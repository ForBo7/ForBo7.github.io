<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ForBo7 // Salman Naqvi</title>
<link>https://forbo7.github.io/forblog/index.html</link>
<atom:link href="https://forbo7.github.io/forblog/index.xml" rel="self" type="application/rss+xml"/>
<description>The world of ForBo7!</description>
<image>
<url>https://forbo7.github.io/images/profile.png</url>
<title>ForBo7 // Salman Naqvi</title>
<link>https://forbo7.github.io/forblog/index.html</link>
<height>144</height>
<width>144</width>
</image>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Wed, 21 Jun 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Implementing and Optimizing Meanshift Clustering</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/17_mean_shift_clustering.html</link>
  <description><![CDATA[ 



<blockquote class="blockquote">
<p>This notebook follows the <a href="https://docs.fast.ai/dev/style.html">fastai style guide</a>.</p>
</blockquote>
<p><img src="https://forbo7.github.io/forblog/images/17_mean_shift_clustering/thumbnail.png" class="img-fluid"></p>
<p>Meanshift clustering is a technique for unsupervised learning. Give this algorithm a bunch of data and it will figure out what groups the data can be sorted into. It does this by iteratively moving all data points until they converge to a single point.</p>
<p>The steps of the algorithm can be summarized as follows:</p>
<ol type="1">
<li>For each data point <img src="https://latex.codecogs.com/png.latex?x"> in the dataset, calculate the distance between <img src="https://latex.codecogs.com/png.latex?x"> and every other data point in the dataset.</li>
<li>Calculate weights for each point in the dataset by passing the calculated distances through the normal distribution.</li>
<li>Calculate the weighted average for all points in the dataset. This weighted average is the new location for <img src="https://latex.codecogs.com/png.latex?x"></li>
</ol>
<p>This is the data we will work with to illustrate meanshift clustering. The data points are put into clearly seperate clusters for the sake of clarity.</p>
<div class="cell page-columns page-full" data-outputid="253e53f0-01af-44eb-835c-c66da8e6e66a" data-execution_count="13">
<div class="cell-output cell-output-display column-page">
<div>                            <div id="d1b431e0-e1f1-4771-a761-8818232ed2db" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("d1b431e0-e1f1-4771-a761-8818232ed2db")) {                    Plotly.newPlot(                        "d1b431e0-e1f1-4771-a761-8818232ed2db",                        [{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-18.425283432006836,-19.442867279052734,-19.854276657104492,-17.30156898498535,-19.117082595825195,-15.677632331848145,-16.907806396484375,-17.445497512817383,-11.341974258422852,-18.200695037841797,-17.12497329711914,-14.913961410522461,-16.144580841064453,-18.372589111328125,-19.294767379760742,-19.257606506347656,-18.581594467163086,-14.373680114746094,-19.242040634155273,-19.5387020111084,-16.264314651489258,-12.42320442199707,-18.451215744018555,-14.812079429626465,-19.69365692138672,-18.194053649902344,-17.762645721435547,-16.024280548095703,-17.579368591308594,-14.169445037841797,-17.940326690673828,-19.92470932006836,-16.432634353637695,-13.702322006225586,-18.81943702697754,-19.135713577270508,-18.676517486572266,-16.721593856811523,-15.12582015991211,-16.347347259521484,-19.844532012939453,-18.49294662475586,-16.823806762695312,-16.128559112548828,-20.409557342529297,-10.699813842773438,-15.691268920898438,-17.062101364135742,-18.343050003051758,-16.38997459411621,-14.201020240783691,-14.336832046508789,-17.710176467895508,-16.444183349609375,-17.2982120513916,-17.644861221313477,-19.40289306640625,-17.765161514282227,-19.959674835205078,-17.096742630004883,-17.082073211669922,-17.194229125976562,-15.314300537109375,-18.716243743896484,-16.28208351135254,-20.57084083557129,-17.447330474853516,-18.80275535583496,-17.124345779418945,-17.731937408447266,-12.793999671936035,-14.34986686706543,-18.603578567504883,-15.424489974975586,-17.606447219848633,-19.777353286743164,-19.87086296081543,-13.475830078125,-15.691652297973633,-20.595218658447266,-21.184223175048828,-17.003326416015625,-15.569633483886719,-17.106281280517578,-19.069355010986328,-16.60281753540039,-15.861335754394531,-19.614273071289062,-17.604625701904297,-18.2739200592041,-16.98937225341797,-20.406129837036133,-19.54855728149414,-13.558757781982422,-17.915620803833008,-17.965360641479492,-13.702252388000488,-16.256093978881836,-19.1097412109375,-15.704054832458496,-14.714237213134766,-16.749597549438477,-16.89400863647461,-16.529354095458984,-13.133790016174316,-16.091548919677734,-16.132667541503906,-17.34357261657715,-20.753503799438477,-18.887680053710938,-17.931848526000977,-14.335396766662598,-17.152362823486328,-16.733449935913086,-15.771133422851562,-18.076326370239258,-14.912118911743164,-16.72152328491211,-16.40565299987793,-17.783065795898438,-16.552995681762695,-20.175418853759766,-18.91767120361328,-14.851733207702637,-22.456077575683594,-22.31831932067871,-20.516998291015625,-18.038631439208984,-19.38145637512207,-16.016443252563477,-16.660627365112305,-18.12176513671875,-20.253890991210938,-14.825736999511719,-16.7254638671875,-20.110719680786133,-17.36981964111328,-21.927078247070312,-20.48758888244629,-14.93463134765625,-18.991792678833008,-18.725482940673828,-16.87033462524414,-14.785836219787598,-16.712627410888672,-14.988848686218262,-16.716533660888672,-15.422408103942871,-18.487947463989258,-17.83020782470703,-13.686074256896973,-19.089563369750977,-13.958005905151367,-18.330406188964844,-20.033981323242188,-17.421554565429688,-16.61069679260254,-21.204364776611328,-14.315523147583008,-16.56385040283203,-19.71274757385254,-17.46829605102539,-19.984617233276367,-17.815505981445312,-15.037534713745117,-15.395480155944824,-16.31277084350586,-19.262632369995117,-18.33284568786621,-14.347151756286621,-14.941446304321289,-21.142486572265625,-16.67853355407715,-14.444382667541504,-16.91511344909668,-16.327878952026367,-18.10141372680664,-15.081724166870117,-15.674304962158203,-18.1227970123291,-13.228094100952148,-22.18153190612793,-13.028053283691406,-21.443737030029297,-18.890525817871094,-21.532024383544922,-20.775909423828125,-20.798927307128906,-13.409114837646484,-18.51154327392578,-16.45906639099121,-20.22492218017578,-17.61229705810547,-16.918779373168945,-16.7662353515625,-17.566591262817383,-15.448262214660645,-20.296810150146484,-15.499092102050781,-17.182064056396484,-21.81060791015625,-13.5812349319458,-17.904890060424805,-16.715087890625,-18.669212341308594,-13.934989929199219,-12.094585418701172,-18.873226165771484,-18.156755447387695,-19.48307228088379,-17.80398941040039,-15.29049301147461,-19.86734390258789,-18.07574462890625,-20.173376083374023,-20.776090621948242,-22.112022399902344,-16.130434036254883,-19.273752212524414,-17.132108688354492,-14.767446517944336,-20.230281829833984,-16.91587257385254,-17.539005279541016,-15.170931816101074,-15.86638355255127,-21.568635940551758,-19.26389503479004,-14.286490440368652,-12.985215187072754,-16.15493392944336,-14.671684265136719,-16.989303588867188,-16.81963539123535,-14.954002380371094,-22.385000228881836,-15.516860961914062,-19.535491943359375,-22.129812240600586,-16.47366714477539,-15.84201431274414,-13.77514934539795,-16.683500289916992,-20.418292999267578,-17.364913940429688,-18.948177337646484,-18.144851684570312,-19.285493850708008,-17.751375198364258,-15.398202896118164],"y":[-32.0471305847168,-25.79459571838379,-28.21319580078125,-29.61461067199707,-26.414121627807617,-25.571475982666016,-26.669921875,-28.512489318847656,-24.65479278564453,-29.242782592773438,-27.07906723022461,-28.532981872558594,-28.21306037902832,-27.536712646484375,-28.805612564086914,-26.684741973876953,-31.968212127685547,-28.123043060302734,-30.623197555541992,-31.188819885253906,-29.770784378051758,-27.890092849731445,-28.920513153076172,-30.594266891479492,-28.868934631347656,-29.73366355895996,-31.046531677246094,-27.099119186401367,-27.822858810424805,-31.817283630371094,-28.85376739501953,-28.674978256225586,-27.691761016845703,-27.07562828063965,-26.55228042602539,-28.963993072509766,-29.280261993408203,-25.576885223388672,-27.616357803344727,-28.410961151123047,-28.432437896728516,-24.772382736206055,-26.533042907714844,-29.083641052246094,-28.417675018310547,-33.15908432006836,-26.761632919311523,-31.91179847717285,-27.873918533325195,-24.95347023010254,-28.84813117980957,-27.899263381958008,-27.130008697509766,-24.683143615722656,-28.07090187072754,-26.792179107666016,-28.365877151489258,-27.99596405029297,-26.80953025817871,-25.778608322143555,-29.421741485595703,-26.749692916870117,-25.46530532836914,-29.185876846313477,-28.248350143432617,-27.35129165649414,-26.6688289642334,-27.777109146118164,-26.50042724609375,-25.034025192260742,-24.580745697021484,-25.654388427734375,-30.404144287109375,-27.516550064086914,-31.38884162902832,-30.42477798461914,-26.350528717041016,-29.308488845825195,-27.44247055053711,-30.167499542236328,-27.037939071655273,-26.606548309326172,-31.066612243652344,-26.774595260620117,-25.593381881713867,-29.70121192932129,-24.696298599243164,-26.036550521850586,-23.817855834960938,-30.95263671875,-26.585054397583008,-25.31855010986328,-26.76004409790039,-28.909452438354492,-32.46820068359375,-28.658334732055664,-30.2910213470459,-29.46282386779785,-27.420970916748047,-29.28928565979004,-29.56557846069336,-28.417875289916992,-25.40730094909668,-31.34650993347168,-24.860137939453125,-25.334754943847656,-28.422603607177734,-26.8785457611084,-27.0628719329834,-26.893936157226562,-31.189964294433594,-29.768596649169922,-30.777780532836914,-28.05354881286621,-28.36737632751465,-23.168020248413086,-24.432273864746094,-28.65330696105957,-28.32551383972168,-27.96194839477539,-26.629575729370117,-34.019630432128906,-28.46030044555664,-32.65538787841797,-29.861289978027344,-31.152997970581055,-30.107206344604492,-27.85457420349121,-28.851152420043945,-26.050661087036133,-28.99776268005371,-23.90937042236328,-31.035280227661133,-29.26023292541504,-29.384498596191406,-27.294466018676758,-23.9848690032959,-31.028064727783203,-30.093748092651367,-30.33407974243164,-24.873268127441406,-27.408409118652344,-30.312875747680664,-26.252355575561523,-28.4118595123291,-27.673553466796875,-27.310714721679688,-30.021638870239258,-25.232114791870117,-29.83550262451172,-27.583023071289062,-27.861963272094727,-29.395198822021484,-29.57470703125,-27.718341827392578,-28.09288787841797,-30.316844940185547,-28.772842407226562,-30.75018882751465,-28.81464385986328,-28.529678344726562,-29.6528263092041,-29.618427276611328,-27.604419708251953,-25.726245880126953,-22.686126708984375,-27.512224197387695,-27.50852394104004,-27.696041107177734,-32.215457916259766,-32.04732131958008,-25.400760650634766,-31.223447799682617,-25.048992156982422,-28.2103214263916,-28.683570861816406,-27.72000503540039,-27.168046951293945,-30.6748046875,-26.077951431274414,-29.446605682373047,-31.54479217529297,-25.68828773498535,-31.99863624572754,-28.98000144958496,-28.14067268371582,-28.900911331176758,-30.646015167236328,-30.50232696533203,-30.927352905273438,-31.025882720947266,-28.365720748901367,-30.860807418823242,-31.36286735534668,-29.728595733642578,-29.8175106048584,-29.060991287231445,-23.956897735595703,-24.516084671020508,-27.825525283813477,-26.81167221069336,-27.312557220458984,-29.933609008789062,-25.270204544067383,-28.531633377075195,-27.22648048400879,-26.630380630493164,-31.36478614807129,-28.484390258789062,-27.74081039428711,-28.31574058532715,-26.071067810058594,-28.804800033569336,-26.31757164001465,-25.852022171020508,-25.886653900146484,-30.749074935913086,-30.350994110107422,-26.842615127563477,-29.34833335876465,-30.154848098754883,-29.82087516784668,-31.134145736694336,-34.633602142333984,-26.403047561645508,-29.826433181762695,-27.80544662475586,-30.34566307067871,-28.359270095825195,-28.178205490112305,-26.689130783081055,-34.38003921508789,-29.775415420532227,-28.883249282836914,-30.41360855102539,-29.668733596801758,-28.936614990234375,-27.57533073425293,-27.462566375732422,-28.22569465637207,-28.01352882385254,-28.511682510375977,-31.460168838500977,-27.07773208618164,-28.2685604095459,-30.80533790588379,-29.018760681152344,-27.95978546142578,-28.012292861938477,-30.937999725341797],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-17.466012954711914],"y":[-28.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-17.466012954711914],"y":[-28.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.285907745361328,20.79730796813965,17.1842098236084,17.530088424682617,22.114276885986328,21.224266052246094,20.020795822143555,14.8724365234375,24.704389572143555,21.13739585876465,18.702177047729492,18.792266845703125,18.643869400024414,16.03401756286621,22.449195861816406,17.934215545654297,18.73138427734375,19.272348403930664,18.451953887939453,16.485170364379883,20.92300033569336,14.866406440734863,15.106898307800293,17.726911544799805,18.86469268798828,19.690961837768555,20.837188720703125,21.72953987121582,15.416463851928711,17.630985260009766,16.862545013427734,18.76531410217285,18.82526206970215,22.656484603881836,23.568374633789062,19.596139907836914,18.80851936340332,18.663249969482422,18.77165985107422,22.054811477661133,17.666528701782227,19.300880432128906,16.047073364257812,21.56205940246582,15.830434799194336,20.371681213378906,21.5921630859375,15.514796257019043,19.55213737487793,18.390371322631836,26.898746490478516,19.914268493652344,16.61199188232422,19.533111572265625,16.40852928161621,18.65648078918457,20.971582412719727,22.689708709716797,19.2409610748291,16.04047203063965,15.055133819580078,15.226943969726562,17.601238250732422,19.69058609008789,20.979843139648438,18.250173568725586,17.544164657592773,17.28986930847168,18.633146286010742,17.5772762298584,20.41511344909668,17.256332397460938,19.839759826660156,14.76276683807373,13.951339721679688,13.569784164428711,19.831661224365234,17.9209041595459,17.080429077148438,16.31656837463379,16.932615280151367,17.511669158935547,15.450879096984863,17.715898513793945,16.341995239257812,18.15589141845703,18.1396541595459,20.288982391357422,15.750883102416992,18.8389892578125,17.769147872924805,19.434377670288086,20.52445411682129,16.095094680786133,17.322858810424805,18.679353713989258,17.533079147338867,17.640201568603516,20.267850875854492,15.81650161743164,17.364120483398438,20.37299346923828,15.63473129272461,21.850730895996094,14.726609230041504,20.915184020996094,19.197429656982422,15.555505752563477,16.891212463378906,18.69365119934082,20.060701370239258,15.732789039611816,18.13576889038086,18.797388076782227,18.25948715209961,17.53692054748535,16.875978469848633,18.693286895751953,18.38149070739746,22.246950149536133,17.974376678466797,19.922273635864258,21.475757598876953,18.350488662719727,21.047208786010742,23.865530014038086,18.39934730529785,19.990440368652344,22.33189582824707,11.368806838989258,18.428998947143555,17.9964656829834,19.698894500732422,18.817657470703125,16.28460121154785,19.352741241455078,14.888886451721191,14.288993835449219,17.679946899414062,18.64801025390625,17.24355125427246,18.962034225463867,19.223405838012695,17.017751693725586,19.932628631591797,14.636707305908203,17.708106994628906,19.428251266479492,19.068744659423828,23.207534790039062,17.78851318359375,19.224851608276367,17.71001434326172,23.529338836669922,19.45734405517578,17.588672637939453,15.998174667358398,14.496673583984375,14.456317901611328,18.55048179626465,15.665937423706055,19.813478469848633,18.41654396057129,18.342281341552734,13.745832443237305,15.779996871948242,16.436847686767578,20.352476119995117,17.190345764160156,22.926172256469727,21.2437686920166,20.55301284790039,18.71432113647461,18.52701187133789,17.08238983154297,18.85123062133789,18.6614990234375,15.867292404174805,18.305500030517578,16.103492736816406,17.103107452392578,18.22189712524414,20.91551399230957,20.000137329101562,18.631103515625,19.712915420532227,18.7369384765625,22.365671157836914,17.860729217529297,19.49117088317871,21.995403289794922,23.19469451904297,16.083406448364258,18.543041229248047,20.880332946777344,14.853985786437988,16.011058807373047,19.552581787109375,18.635080337524414,24.45953369140625,19.89056396484375,19.109867095947266,18.73686408996582,21.650571823120117,23.97255516052246,15.444473266601562,21.070125579833984,18.82577133178711,20.308700561523438,19.049758911132812,21.11652183532715,17.7515869140625,17.980010986328125,18.25163459777832,17.819499969482422,18.529132843017578,21.021656036376953,15.514059066772461,18.30569076538086,19.622093200683594,22.59380340576172,20.413806915283203,20.886690139770508,15.171564102172852,18.679607391357422,18.53107452392578,14.847296714782715,21.327430725097656,15.348832130432129,19.250690460205078,15.975162506103516,17.023046493530273,22.086414337158203,17.227558135986328,16.772428512573242,14.725050926208496,15.795086860656738,15.593132972717285,16.44536781311035,14.051198959350586,19.301485061645508,17.936670303344727,16.413143157958984,18.226226806640625,24.488990783691406,18.75320816040039,19.835208892822266,17.656503677368164,15.857093811035156,18.599315643310547],"y":[-2.7043209075927734,-6.509754180908203,0.10772943496704102,-6.171239852905273,-3.524801015853882,-4.109977722167969,-3.9810469150543213,-3.0426979064941406,-4.877400875091553,-3.196359872817993,-4.218727111816406,-7.716949462890625,-2.501232147216797,-2.3392739295959473,-6.965503692626953,-4.852914810180664,-5.269769191741943,0.6401042938232422,-7.980230808258057,0.1647968292236328,-9.481250762939453,-0.6962454319000244,-3.621338129043579,-3.8732447624206543,-4.000556945800781,-5.998170852661133,-3.602630138397217,-6.2851409912109375,-5.640164852142334,-2.2132859230041504,-1.6206212043762207,-5.713179588317871,-5.192222595214844,-1.6375646591186523,-2.9885497093200684,-1.2236747741699219,-3.304851770401001,-4.592470169067383,-3.335561752319336,-2.2755558490753174,-5.218547821044922,-1.417480707168579,-4.367788791656494,-6.531299591064453,2.026122570037842,-4.1139678955078125,-2.998929023742676,-5.617583751678467,-6.195955753326416,-2.7702388763427734,-1.9186731576919556,-5.377082824707031,-6.060332298278809,-4.623826026916504,-3.166316270828247,-0.5454671382904053,-1.863804817199707,-4.867537021636963,-5.658323764801025,-4.052438735961914,-3.2562546730041504,-3.9043540954589844,-4.773362636566162,-4.914124488830566,-1.450181484222412,-6.346890926361084,-5.7086334228515625,-3.58909273147583,-1.0209121704101562,0.0093231201171875,-0.905308723449707,-6.473879814147949,-3.917097568511963,-1.5587198734283447,-3.071938991546631,-2.888920783996582,-2.7852091789245605,-2.253837823867798,-4.838411808013916,-1.800037145614624,-3.939683198928833,-0.6961755752563477,-4.90866756439209,-2.7949814796447754,-6.738895416259766,-8.036633491516113,-4.805726528167725,-5.475495338439941,-3.7411482334136963,-1.1562025547027588,-3.1100802421569824,-3.6043334007263184,1.2808589935302734,-3.629106283187866,-3.889923095703125,-3.7333695888519287,-6.806085109710693,-5.8205671310424805,-5.128482818603516,-4.0107102394104,-4.09036922454834,-2.980588436126709,0.498568058013916,0.0031003952026367188,-1.2846779823303223,-1.6334819793701172,-2.5716793537139893,-8.118017196655273,-0.5494215488433838,-1.9748762845993042,-0.26900291442871094,-3.5758397579193115,-4.82087516784668,-2.970335006713867,-1.5021917819976807,-2.7392873764038086,-4.956005573272705,-3.3272387981414795,-2.2053232192993164,-4.835358619689941,-2.9242546558380127,-8.266316413879395,-3.5694403648376465,-2.321836471557617,-7.347557544708252,-5.546506881713867,0.9638981819152832,-2.259000062942505,-6.085452079772949,-4.532872200012207,-3.2601137161254883,-0.3713109493255615,-2.9808359146118164,-6.659450531005859,-2.3654940128326416,-3.8557751178741455,-5.325628280639648,-4.131223678588867,-7.263247489929199,-5.00927734375,-4.907634735107422,-3.329878330230713,-6.420282363891602,-4.471495151519775,-3.868802785873413,-3.4477405548095703,-7.645572185516357,-5.764829158782959,-1.9584074020385742,-3.9244496822357178,-0.6639175415039062,-2.607348680496216,-4.216252326965332,-0.7232744693756104,-2.982891082763672,-2.080137252807617,-2.8143386840820312,-5.916345596313477,-4.008955001831055,-4.793750762939453,-1.8198908567428589,-3.817965507507324,-5.170243740081787,-1.0879781246185303,-7.4145708084106445,-0.0548100471496582,0.17017674446105957,-5.223673343658447,-3.7200233936309814,-7.057165145874023,-6.392621040344238,-0.09973978996276855,0.26169800758361816,-5.56971549987793,-9.172874450683594,-6.467351913452148,-3.9755682945251465,-3.9636921882629395,-0.766258716583252,-4.885104179382324,-1.8571819067001343,-3.8930060863494873,-1.914812445640564,-1.7391928434371948,-4.4254326820373535,-5.248516082763672,-0.9376182556152344,-4.670827388763428,-3.927293300628662,0.7906813621520996,-3.635507583618164,-4.733575820922852,-7.6859846115112305,0.08954834938049316,-6.103554725646973,-5.123003005981445,-6.102663040161133,-5.29023551940918,-3.901334762573242,-4.80409049987793,-5.924502372741699,-4.235668182373047,-0.10431289672851562,-3.679736852645874,-5.7222700119018555,-1.1529746055603027,-6.837234973907471,-10.207952499389648,-3.3985257148742676,-0.6541595458984375,-6.354996681213379,-2.2060937881469727,-4.535785675048828,-5.4546966552734375,-1.9065525531768799,-2.727912425994873,-2.19783353805542,-3.9794557094573975,-1.3096957206726074,-6.270785331726074,-3.254026412963867,-0.026159286499023438,-3.0613555908203125,-6.355772972106934,-4.198906421661377,-1.1111929416656494,-0.49185729026794434,-5.250266075134277,-3.311692953109741,-1.5483345985412598,-3.674252986907959,-5.243827819824219,-3.5912892818450928,-3.8679404258728027,-6.431638717651367,-2.750701665878296,-4.8833088874816895,-2.7848410606384277,-4.069465160369873,-3.088862419128418,-4.8706207275390625,-1.2166154384613037,-5.237183094024658,-6.589001655578613,-3.629451036453247,-2.2973575592041016,-2.1324844360351562,-0.999638557434082,-3.615241527557373,-4.449435234069824],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[18.487552642822266],"y":[-3.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[18.487552642822266],"y":[-3.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-8.579100608825684,-14.010672569274902,-14.513997077941895,-15.05034065246582,-10.546951293945312,-8.86486530303955,-12.015640258789062,-10.1292085647583,-11.806747436523438,-8.698286056518555,-9.008814811706543,-10.674229621887207,-11.277036666870117,-12.262077331542969,-12.018115043640137,-8.263415336608887,-10.121085166931152,-5.30994176864624,-14.889737129211426,-11.259674072265625,-8.023612022399902,-14.069195747375488,-11.5695161819458,-18.34925079345703,-11.678018569946289,-8.612247467041016,-13.172802925109863,-12.407089233398438,-8.792895317077637,-6.425328731536865,-10.782958030700684,-5.683115482330322,-10.473514556884766,-10.929500579833984,-13.145326614379883,-7.997108459472656,-10.454900741577148,-12.228693962097168,-13.031203269958496,-10.17485237121582,-11.206878662109375,-10.747255325317383,-16.32989501953125,-14.766944885253906,-9.535654067993164,-7.845025539398193,-13.410931587219238,-14.541098594665527,-11.091876029968262,-13.486000061035156,-11.11856460571289,-11.103869438171387,-7.814505577087402,-12.761046409606934,-8.535818099975586,-9.560537338256836,-8.003549575805664,-10.495542526245117,-9.470699310302734,-11.129680633544922,-10.196456909179688,-14.469796180725098,-8.73503303527832,-11.43630313873291,-9.951140403747559,-10.646602630615234,-10.693506240844727,-12.884533882141113,-13.111177444458008,-11.674116134643555,-10.491535186767578,-9.4536714553833,-10.394414901733398,-5.976884841918945,-12.81216049194336,-8.700218200683594,-8.83251667022705,-9.277288436889648,-14.534629821777344,-13.159838676452637,-8.2501802444458,-13.979494094848633,-7.69365930557251,-13.975175857543945,-8.688097953796387,-9.187835693359375,-10.18696403503418,-12.265019416809082,-10.441424369812012,-12.797905921936035,-7.4091997146606445,-11.501553535461426,-11.511398315429688,-12.68610668182373,-8.08111572265625,-9.222166061401367,-13.489861488342285,-13.197281837463379,-10.057047843933105,-11.867032051086426,-8.768755912780762,-8.353048324584961,-13.836408615112305,-12.194673538208008,-9.63365650177002,-10.623037338256836,-16.568504333496094,-12.599166870117188,-9.693976402282715,-15.027666091918945,-9.357027053833008,-11.587748527526855,-16.095779418945312,-7.353463172912598,-11.70658016204834,-15.886924743652344,-9.86582088470459,-12.38827896118164,-8.525469779968262,-11.691880226135254,-11.018645286560059,-9.173951148986816,-10.892011642456055,-14.551121711730957,-10.090612411499023,-9.941912651062012,-10.800487518310547,-6.488488674163818,-17.684064865112305,-8.25571060180664,-7.884257793426514,-9.230748176574707,-14.27336311340332,-6.527972221374512,-8.942853927612305,-12.84288501739502,-11.504791259765625,-12.8230619430542,-11.953474044799805,-11.439977645874023,-12.161506652832031,-12.676198959350586,-12.84421157836914,-8.466421127319336,-10.02928638458252,-15.196163177490234,-13.270657539367676,-11.809050559997559,-13.238069534301758,-10.774357795715332,-13.11187744140625,-11.827685356140137,-11.208446502685547,-9.358530044555664,-8.390848159790039,-9.566508293151855,-10.056886672973633,-12.978875160217285,-6.733163356781006,-11.81070327758789,-9.520917892456055,-11.07801342010498,-10.623744010925293,-10.204333305358887,-8.742179870605469,-9.267026901245117,-9.723825454711914,-10.127391815185547,-11.12968635559082,-11.555424690246582,-10.689496994018555,-12.561797142028809,-6.911267280578613,-13.814241409301758,-6.106613636016846,-8.544097900390625,-13.208921432495117,-15.629257202148438,-11.55489730834961,-6.757113456726074,-9.691598892211914,-10.248163223266602,-5.443113327026367,-10.154929161071777,-9.293098449707031,-8.985886573791504,-12.611130714416504,-7.694052696228027,-11.935733795166016,-14.812773704528809,-13.496572494506836,-9.690009117126465,-8.743733406066895,-12.370203018188477,-13.763587951660156,-11.901032447814941,-4.670057773590088,-9.945587158203125,-11.442387580871582,-9.95588207244873,-13.887988090515137,-11.537931442260742,-8.262906074523926,-8.673343658447266,-14.847832679748535,-7.945804595947266,-12.744565963745117,-9.703649520874023,-9.8018159866333,-11.981284141540527,-8.29502010345459,-14.439075469970703,-8.556591033935547,-14.827993392944336,-10.283758163452148,-12.0502347946167,-10.731298446655273,-12.340343475341797,-11.376541137695312,-13.243505477905273,-9.012519836425781,-10.177419662475586,-14.337030410766602,-9.902543067932129,-11.152688026428223,-10.001517295837402,-5.549180030822754,-9.67077350616455,-12.813430786132812,-10.372093200683594,-12.902101516723633,-7.566817283630371,-9.946921348571777,-5.6056413650512695,-12.722561836242676,-11.385297775268555,-9.05480670928955,-12.55107593536377,-10.938796043395996,-12.469841957092285,-12.457233428955078,-12.033998489379883,-13.547700881958008,-10.890287399291992,-11.352169036865234,-11.798006057739258,-12.265260696411133,-8.367952346801758,-10.619942665100098,-11.750938415527344],"y":[24.166536331176758,24.21129608154297,23.915916442871094,23.46324348449707,26.648351669311523,22.24660301208496,24.89813804626465,24.031131744384766,19.86046028137207,24.026025772094727,26.82074737548828,22.338207244873047,20.5983943939209,25.4077091217041,25.503665924072266,24.059528350830078,23.425127029418945,20.14756202697754,24.82427215576172,20.79296112060547,28.39200210571289,26.836273193359375,24.189878463745117,20.579238891601562,23.625825881958008,28.48736000061035,20.152433395385742,23.5378475189209,25.189390182495117,24.095935821533203,27.848526000976562,25.813262939453125,25.658403396606445,24.111248016357422,25.42165184020996,26.032514572143555,22.899702072143555,23.18429946899414,23.16908073425293,25.081457138061523,19.344449996948242,25.079919815063477,22.78150177001953,21.08084487915039,20.106494903564453,26.322311401367188,20.55828857421875,28.7423095703125,20.156322479248047,27.59453582763672,24.78298568725586,25.730005264282227,21.698057174682617,24.61909294128418,23.875133514404297,23.3283634185791,20.567609786987305,23.409297943115234,21.9627685546875,25.24949073791504,23.938573837280273,28.386734008789062,20.046916961669922,18.482770919799805,27.214473724365234,23.317790985107422,24.13580894470215,25.694913864135742,26.681396484375,20.748817443847656,21.452476501464844,23.13495445251465,24.68809700012207,25.893529891967773,27.78632164001465,25.865711212158203,24.6231746673584,22.74492835998535,26.371034622192383,24.754962921142578,22.352519989013672,22.538957595825195,23.9776554107666,20.064350128173828,26.491668701171875,24.56884765625,25.294475555419922,26.268943786621094,20.834714889526367,21.845788955688477,22.221118927001953,21.367849349975586,23.17323112487793,21.49356460571289,23.30938720703125,25.95020294189453,24.534587860107422,19.093902587890625,27.985275268554688,24.581083297729492,27.381704330444336,23.545026779174805,27.24094009399414,22.74942398071289,22.777385711669922,20.850820541381836,22.905261993408203,26.333036422729492,22.81785011291504,20.720949172973633,18.307308197021484,26.165565490722656,23.546873092651367,25.428821563720703,26.351011276245117,25.419179916381836,20.960765838623047,18.17739486694336,21.1695499420166,25.409990310668945,24.69497299194336,26.40848731994629,19.911476135253906,25.295400619506836,21.246734619140625,22.84528160095215,22.382009506225586,21.727922439575195,22.453994750976562,19.77501106262207,23.742780685424805,25.356107711791992,22.212650299072266,22.42997932434082,24.777223587036133,23.575393676757812,25.612686157226562,23.020160675048828,21.359241485595703,26.301666259765625,24.841156005859375,29.153520584106445,24.658733367919922,26.526391983032227,26.066200256347656,23.264244079589844,24.016483306884766,22.765623092651367,25.738815307617188,25.503400802612305,24.530885696411133,25.301681518554688,24.087543487548828,20.937530517578125,25.285390853881836,26.232213973999023,22.042537689208984,27.336259841918945,23.748863220214844,20.518396377563477,19.037460327148438,25.98199462890625,28.02004623413086,21.916879653930664,21.755788803100586,25.216001510620117,27.85317611694336,23.071821212768555,23.82419776916504,21.560686111450195,18.87405776977539,25.42539405822754,23.261335372924805,26.449623107910156,20.07421875,25.180927276611328,24.641752243041992,23.278881072998047,23.918684005737305,24.27109718322754,25.34137725830078,20.50657844543457,21.21437644958496,22.152780532836914,26.15593719482422,22.48912239074707,22.050636291503906,22.308494567871094,23.04210662841797,21.55190658569336,23.77651596069336,23.085966110229492,20.795089721679688,24.10763931274414,24.983949661254883,21.158998489379883,19.99505043029785,23.174415588378906,18.87873077392578,25.063648223876953,19.15433120727539,18.174514770507812,20.72757911682129,23.278337478637695,26.75335121154785,22.914554595947266,22.007482528686523,25.811174392700195,24.630651473999023,24.262619018554688,23.68120765686035,18.042409896850586,22.256181716918945,26.868255615234375,28.66885757446289,23.297943115234375,21.409618377685547,25.655284881591797,22.636215209960938,20.862415313720703,20.5523624420166,24.430253982543945,26.663593292236328,21.059926986694336,25.795082092285156,19.12385368347168,21.722013473510742,24.95732307434082,22.832721710205078,22.681297302246094,22.04792594909668,24.684062957763672,23.065418243408203,27.771583557128906,25.500497817993164,22.881866455078125,27.203453063964844,19.437986373901367,25.092344284057617,20.588563919067383,24.666091918945312,22.112287521362305,21.54779815673828,26.44481658935547,24.808486938476562,22.220632553100586,25.37558364868164,25.50981903076172,21.999164581298828,24.52132225036621],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-10.945348739624023],"y":[23.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-10.945348739624023],"y":[23.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-22.754680633544922,-26.67397117614746,-29.0474910736084,-27.880598068237305,-26.793106079101562,-28.609851837158203,-25.550722122192383,-25.13289451599121,-30.861772537231445,-25.098453521728516,-27.027957916259766,-26.690332412719727,-27.978918075561523,-28.723445892333984,-26.617658615112305,-26.145647048950195,-27.301116943359375,-27.541017532348633,-26.28827476501465,-28.458303451538086,-30.348196029663086,-27.500713348388672,-25.45049285888672,-26.94854736328125,-26.681365966796875,-27.806488037109375,-29.25162696838379,-31.574357986450195,-27.206254959106445,-26.811689376831055,-27.541059494018555,-25.602140426635742,-31.249330520629883,-24.833192825317383,-30.38346290588379,-25.411306381225586,-25.21636962890625,-27.801950454711914,-30.520797729492188,-25.773983001708984,-25.538524627685547,-29.186670303344727,-30.3612060546875,-25.742422103881836,-23.975875854492188,-30.541736602783203,-29.402851104736328,-28.90102195739746,-27.1298828125,-26.172513961791992,-25.984153747558594,-32.941349029541016,-28.00428009033203,-31.53002166748047,-27.22295379638672,-25.487157821655273,-30.726882934570312,-22.723384857177734,-26.887983322143555,-27.746496200561523,-27.804460525512695,-27.74074363708496,-26.81143569946289,-28.115148544311523,-28.705944061279297,-29.7871150970459,-29.357318878173828,-30.013545989990234,-27.905405044555664,-29.438213348388672,-28.187253952026367,-25.844383239746094,-30.75335693359375,-31.506750106811523,-27.083555221557617,-25.347217559814453,-33.336952209472656,-23.204486846923828,-24.763843536376953,-28.468351364135742,-24.73185920715332,-30.933462142944336,-28.003822326660156,-28.626880645751953,-30.514076232910156,-30.1181640625,-31.100486755371094,-26.626611709594727,-26.92216682434082,-28.96826171875,-29.316287994384766,-31.121225357055664,-27.736385345458984,-28.736940383911133,-28.26252555847168,-28.540830612182617,-29.509498596191406,-23.790042877197266,-26.288719177246094,-30.238571166992188,-30.58972930908203,-28.273147583007812,-26.89614486694336,-27.07004165649414,-27.556142807006836,-33.44483947753906,-29.376150131225586,-28.735090255737305,-27.88039207458496,-30.662273406982422,-25.744230270385742,-29.801219940185547,-27.025203704833984,-32.16712951660156,-30.601572036743164,-26.80360221862793,-30.419612884521484,-30.228052139282227,-24.289575576782227,-31.258575439453125,-25.667268753051758,-29.139949798583984,-23.67588996887207,-27.540206909179688,-23.941303253173828,-27.0703125,-24.484819412231445,-30.2933349609375,-25.907682418823242,-31.037315368652344,-26.431734085083008,-30.35759162902832,-28.94367218017578,-27.52138328552246,-24.048282623291016,-27.59453010559082,-28.78435707092285,-30.013572692871094,-26.679346084594727,-30.852619171142578,-25.33120346069336,-29.84880828857422,-32.41050338745117,-30.91957664489746,-27.89949607849121,-31.37394905090332,-27.78607940673828,-28.942426681518555,-28.023456573486328,-22.64447784423828,-32.33750534057617,-24.355754852294922,-29.74238395690918,-29.677234649658203,-26.88715171813965,-34.063438415527344,-30.798377990722656,-27.25733184814453,-28.0034236907959,-27.49017906188965,-29.487289428710938,-28.821786880493164,-29.47444725036621,-29.598915100097656,-25.88768768310547,-24.316509246826172,-31.41981315612793,-24.85758399963379,-25.268436431884766,-27.426488876342773,-24.44681739807129,-29.432493209838867,-30.961801528930664,-26.627214431762695,-26.369293212890625,-28.78040885925293,-29.681901931762695,-27.468196868896484,-28.676626205444336,-25.083288192749023,-26.272363662719727,-32.66770553588867,-25.602249145507812,-24.342159271240234,-30.363662719726562,-28.409778594970703,-24.527889251708984,-28.48273468017578,-30.74571990966797,-26.438512802124023,-23.642589569091797,-26.825912475585938,-28.38922882080078,-25.76250648498535,-27.0788631439209,-24.123775482177734,-27.798097610473633,-28.888303756713867,-26.11708641052246,-30.044225692749023,-26.92670440673828,-27.682741165161133,-30.29030418395996,-30.143962860107422,-25.7814998626709,-27.33070945739746,-29.626174926757812,-31.687698364257812,-26.78034782409668,-29.642154693603516,-23.98433494567871,-29.507007598876953,-30.474620819091797,-28.50499725341797,-27.09157371520996,-28.344989776611328,-29.25116729736328,-29.99826431274414,-26.02523422241211,-28.341087341308594,-28.36322021484375,-23.735511779785156,-28.613725662231445,-25.77323341369629,-27.276193618774414,-28.632102966308594,-26.930585861206055,-27.52992057800293,-28.107290267944336,-27.864368438720703,-26.90290069580078,-32.541351318359375,-29.369150161743164,-29.612972259521484,-26.49330711364746,-27.838672637939453,-27.095779418945312,-27.673192977905273,-26.44364356994629,-29.402963638305664,-26.309940338134766,-30.71971321105957,-28.897794723510742,-28.562284469604492,-27.565837860107422,-28.9771728515625,-28.15221405029297,-28.61106300354004,-28.400178909301758,-26.955440521240234],"y":[-22.812103271484375,-27.13236427307129,-30.12288475036621,-23.22892951965332,-26.95492172241211,-27.767873764038086,-24.29842758178711,-26.32865333557129,-32.325828552246094,-25.85442352294922,-26.07243537902832,-29.594820022583008,-30.33013153076172,-28.49605369567871,-30.833694458007812,-27.133132934570312,-24.839204788208008,-29.640169143676758,-22.948753356933594,-26.832529067993164,-29.782766342163086,-25.440824508666992,-27.547670364379883,-24.00748062133789,-27.750194549560547,-26.78800392150879,-25.275381088256836,-22.818323135375977,-26.77277374267578,-25.86844825744629,-24.539634704589844,-26.120084762573242,-29.36851692199707,-28.94501495361328,-24.12368392944336,-26.861536026000977,-22.52953338623047,-29.340885162353516,-26.23798942565918,-26.9093074798584,-29.05398941040039,-25.62008285522461,-26.22440528869629,-29.793928146362305,-24.596940994262695,-28.849611282348633,-24.298254013061523,-23.73541259765625,-30.870174407958984,-25.706865310668945,-28.40962028503418,-28.69384002685547,-27.478240966796875,-26.72382164001465,-25.998355865478516,-27.39862823486328,-27.614625930786133,-24.433231353759766,-25.694704055786133,-26.1588077545166,-26.39619255065918,-28.042747497558594,-23.752553939819336,-27.230056762695312,-29.66582679748535,-24.43213653564453,-27.712116241455078,-25.192598342895508,-28.627573013305664,-25.295276641845703,-25.795513153076172,-27.768810272216797,-26.124309539794922,-22.983169555664062,-30.284440994262695,-27.032127380371094,-26.935131072998047,-23.94964599609375,-24.895145416259766,-25.512432098388672,-27.765756607055664,-27.21888542175293,-30.68604278564453,-27.37806510925293,-23.267929077148438,-23.979982376098633,-28.94563865661621,-24.804340362548828,-23.103893280029297,-28.53502082824707,-25.39186668395996,-24.94180679321289,-23.62557029724121,-26.843551635742188,-28.47794532775879,-26.14957046508789,-23.603208541870117,-25.961429595947266,-24.902748107910156,-26.010595321655273,-27.617000579833984,-23.748497009277344,-25.5210018157959,-24.33966827392578,-27.235315322875977,-26.091209411621094,-26.796483993530273,-23.456911087036133,-26.85331153869629,-30.371004104614258,-23.426525115966797,-22.801252365112305,-30.67855453491211,-26.28957748413086,-29.675235748291016,-25.459794998168945,-26.4066219329834,-29.043201446533203,-30.600997924804688,-29.935619354248047,-25.764385223388672,-23.734933853149414,-30.532398223876953,-26.06085968017578,-27.249935150146484,-24.619234085083008,-26.541170120239258,-29.15574073791504,-25.543310165405273,-28.71436309814453,-30.18498420715332,-28.04328727722168,-29.755693435668945,-24.0363712310791,-29.050451278686523,-27.295700073242188,-26.05672836303711,-28.50531578063965,-23.08432388305664,-25.2154483795166,-25.819570541381836,-24.11327362060547,-32.82190704345703,-30.080713272094727,-25.830141067504883,-25.874727249145508,-25.919281005859375,-29.838043212890625,-27.765350341796875,-29.000734329223633,-25.739810943603516,-25.697534561157227,-26.514646530151367,-24.295307159423828,-26.3797607421875,-24.72423553466797,-23.645631790161133,-30.055360794067383,-27.115310668945312,-28.98636245727539,-27.21289825439453,-26.691865921020508,-27.493494033813477,-24.23539924621582,-27.865760803222656,-28.025888442993164,-22.62710189819336,-23.639854431152344,-23.495662689208984,-29.700300216674805,-25.105648040771484,-26.705020904541016,-30.799789428710938,-29.46636390686035,-26.410633087158203,-26.069316864013672,-28.60173797607422,-26.768827438354492,-26.187341690063477,-21.773984909057617,-24.14080047607422,-24.99478530883789,-28.880271911621094,-28.924007415771484,-26.770061492919922,-21.238292694091797,-27.76487922668457,-23.971864700317383,-24.121994018554688,-31.39949607849121,-29.351900100708008,-26.869853973388672,-24.65330696105957,-25.55305290222168,-26.116046905517578,-27.18555450439453,-24.207828521728516,-22.391935348510742,-26.44062614440918,-27.19648551940918,-28.039995193481445,-23.797222137451172,-24.286928176879883,-25.12257957458496,-25.839004516601562,-25.04374885559082,-27.614763259887695,-27.204246520996094,-25.602169036865234,-24.208145141601562,-26.73737144470215,-29.862648010253906,-25.368635177612305,-27.78744888305664,-24.94830322265625,-23.02849769592285,-29.166662216186523,-26.704771041870117,-27.0417423248291,-27.758983612060547,-24.52991485595703,-23.647092819213867,-24.27936553955078,-26.17720603942871,-26.425167083740234,-26.522323608398438,-27.02530860900879,-27.949155807495117,-24.59185028076172,-27.995018005371094,-29.1949462890625,-27.857925415039062,-31.518260955810547,-27.18427848815918,-28.695398330688477,-29.322429656982422,-23.516319274902344,-27.847639083862305,-27.27460479736328,-28.960725784301758,-23.49502944946289,-26.29165267944336,-22.82915496826172,-26.957691192626953,-31.24008560180664,-28.578392028808594,-28.22464942932129,-26.956378936767578,-26.206178665161133,-28.07477378845215],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-27.84868049621582],"y":[-26.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-27.84868049621582],"y":[-26.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[22.68825912475586,17.128585815429688,19.72096824645996,19.0291690826416,21.440813064575195,20.61655616760254,14.668720245361328,24.837709426879883,21.418811798095703,18.72123908996582,14.635415077209473,23.25212860107422,20.91598129272461,23.931901931762695,19.541109085083008,20.646896362304688,21.6776180267334,23.45769500732422,19.41261863708496,21.793264389038086,20.056774139404297,19.193803787231445,17.846168518066406,17.28873062133789,19.207977294921875,22.016220092773438,23.63275718688965,24.071807861328125,24.227157592773438,19.53055763244629,23.601764678955078,14.044414520263672,22.557266235351562,19.133577346801758,21.7183895111084,20.773962020874023,19.58606719970703,20.631099700927734,18.89724349975586,21.23064422607422,22.684261322021484,26.613021850585938,19.557300567626953,23.01513671875,21.490537643432617,19.75992202758789,20.983943939208984,23.294492721557617,22.73154067993164,24.129610061645508,20.124008178710938,22.968915939331055,24.596433639526367,19.13637351989746,25.438079833984375,23.665069580078125,17.3256778717041,17.246990203857422,20.016691207885742,22.335464477539062,22.579708099365234,19.05389976501465,19.632814407348633,21.50729751586914,21.95848846435547,22.0111026763916,21.826152801513672,20.104310989379883,19.43295669555664,15.718362808227539,17.103418350219727,19.043973922729492,19.238021850585938,21.74604034423828,21.8992862701416,21.11932945251465,20.98802375793457,20.502134323120117,21.139867782592773,20.932126998901367,21.79482650756836,20.954391479492188,26.87238883972168,22.807310104370117,23.014253616333008,19.905527114868164,20.217426300048828,20.90314483642578,20.382944107055664,20.895111083984375,21.480796813964844,21.870342254638672,21.881898880004883,17.91309928894043,24.1691837310791,21.54463005065918,22.216541290283203,23.882022857666016,22.845317840576172,22.06817626953125,13.23406982421875,21.110370635986328,18.1212158203125,18.798641204833984,20.58648681640625,21.790639877319336,18.426517486572266,20.557579040527344,22.26994514465332,19.490943908691406,20.698808670043945,21.55074691772461,16.52289581298828,20.270530700683594,18.858898162841797,18.349958419799805,23.71995735168457,22.44707489013672,21.35320281982422,22.21122932434082,20.984392166137695,23.750164031982422,18.874828338623047,19.841455459594727,18.971139907836914,22.201276779174805,24.511762619018555,17.868179321289062,20.568044662475586,14.937501907348633,23.528261184692383,19.91049575805664,18.91318130493164,21.0638484954834,16.798057556152344,16.23456382751465,18.122785568237305,17.982131958007812,19.849891662597656,22.230854034423828,23.24770736694336,23.199735641479492,19.761192321777344,20.099605560302734,18.563091278076172,24.20151710510254,20.205686569213867,20.866987228393555,24.211320877075195,20.058542251586914,20.178089141845703,16.94730567932129,23.131927490234375,21.710241317749023,15.883949279785156,16.335689544677734,22.60865592956543,22.246517181396484,21.534076690673828,21.95850944519043,19.288562774658203,20.244558334350586,21.002704620361328,19.126075744628906,25.284860610961914,21.531282424926758,26.180551528930664,18.447546005249023,20.36402130126953,16.33159637451172,19.364521026611328,21.08424949645996,23.08587646484375,21.425758361816406,25.775569915771484,19.77846908569336,19.485872268676758,17.723670959472656,22.807140350341797,19.31439971923828,22.443918228149414,18.728843688964844,16.764406204223633,23.75753402709961,17.737796783447266,22.015411376953125,20.3143367767334,18.708768844604492,20.318479537963867,21.419401168823242,20.266935348510742,18.31571388244629,22.107555389404297,21.739728927612305,23.50608253479004,22.863468170166016,19.511802673339844,20.99846076965332,22.784387588500977,21.726102828979492,19.727270126342773,20.297361373901367,21.8659725189209,21.483863830566406,19.444881439208984,20.790868759155273,18.302000045776367,19.996477127075195,19.334936141967773,17.994842529296875,20.446840286254883,23.260305404663086,21.033950805664062,19.845705032348633,25.994192123413086,18.969867706298828,21.441890716552734,20.892311096191406,22.966564178466797,22.80535316467285,20.18839454650879,20.877695083618164,19.865478515625,23.763141632080078,17.628477096557617,21.85353660583496,22.32240104675293,22.090795516967773,20.137548446655273,21.898235321044922,17.44066619873047,23.31387710571289,19.143285751342773,24.04416275024414,20.707073211669922,21.398487091064453,18.980052947998047,20.477210998535156,18.367643356323242,19.068035125732422,19.5159854888916,23.447284698486328,19.346601486206055,20.674190521240234,19.840129852294922,21.034839630126953,24.986467361450195,20.969926834106445,18.824251174926758,22.168678283691406],"y":[15.466756820678711,16.262550354003906,17.28451919555664,15.622554779052734,20.02674102783203,23.027767181396484,20.00188446044922,14.361998558044434,19.860614776611328,16.302326202392578,19.305105209350586,17.764877319335938,16.92913246154785,15.14468765258789,18.56190299987793,19.52238655090332,18.18653678894043,17.34645652770996,18.11683464050293,17.243215560913086,13.030884742736816,16.000524520874023,12.801233291625977,17.91886329650879,17.805017471313477,18.39486312866211,17.253795623779297,15.065544128417969,17.907697677612305,16.2225341796875,13.731605529785156,18.19330406188965,17.621965408325195,15.245977401733398,20.033967971801758,17.50638771057129,20.2559814453125,16.654205322265625,19.30339241027832,16.45628547668457,16.213211059570312,15.914449691772461,17.944791793823242,15.161856651306152,20.758934020996094,18.660747528076172,15.151981353759766,16.99028205871582,17.604576110839844,20.602569580078125,17.514888763427734,16.451570510864258,16.343862533569336,18.900859832763672,20.07329559326172,17.74210548400879,17.609195709228516,16.26103973388672,16.699615478515625,17.50763702392578,21.146743774414062,19.906442642211914,16.25141716003418,16.515302658081055,17.18448829650879,18.945964813232422,19.194965362548828,16.34311866760254,15.850971221923828,16.22774887084961,17.22256088256836,19.44672966003418,17.333036422729492,16.037857055664062,17.11711883544922,18.152076721191406,17.07600212097168,12.014978408813477,17.72388458251953,18.940298080444336,17.928558349609375,14.60434627532959,20.961044311523438,17.120838165283203,14.985398292541504,17.6035213470459,16.680408477783203,15.85981273651123,17.279611587524414,14.574183464050293,17.57388687133789,15.639575958251953,18.111249923706055,21.13006019592285,18.042491912841797,16.40350914001465,16.26378059387207,17.341686248779297,16.376924514770508,16.564300537109375,17.77366065979004,16.309885025024414,13.891131401062012,14.597448348999023,18.83154296875,20.474308013916016,21.094423294067383,19.54987144470215,17.721683502197266,21.4456844329834,17.52791976928711,18.244842529296875,17.824905395507812,18.924257278442383,18.209131240844727,17.904048919677734,18.177751541137695,18.23710823059082,17.44098472595215,17.856159210205078,16.590734481811523,16.383737564086914,22.539112091064453,18.25209617614746,15.619260787963867,13.171451568603516,14.995284080505371,15.457746505737305,15.74722671508789,15.95506763458252,12.54230785369873,19.682628631591797,20.244661331176758,18.41229820251465,14.936967849731445,17.877897262573242,19.974750518798828,18.571361541748047,17.881540298461914,16.686542510986328,16.437461853027344,17.196857452392578,18.467288970947266,19.0017147064209,18.729265213012695,14.258886337280273,16.32211685180664,18.819618225097656,17.054765701293945,15.276723861694336,17.20743751525879,18.473289489746094,14.323864936828613,14.043643951416016,18.571186065673828,14.937100410461426,17.129297256469727,15.869782447814941,14.966029167175293,15.7826566696167,18.19264030456543,15.11573600769043,17.757137298583984,18.17030906677246,18.208620071411133,17.551891326904297,18.942594528198242,20.854263305664062,15.9744234085083,20.480051040649414,17.414831161499023,17.28360939025879,19.077407836914062,15.848388671875,17.747657775878906,16.319894790649414,16.79958152770996,20.350887298583984,20.113330841064453,20.50737762451172,17.5639591217041,18.895307540893555,15.967818260192871,16.397985458374023,18.879854202270508,17.832122802734375,16.634004592895508,19.76674461364746,15.578773498535156,21.19713020324707,11.7936372756958,16.5728702545166,15.755303382873535,19.137605667114258,16.870622634887695,15.857865333557129,16.553422927856445,17.93630027770996,17.178306579589844,17.088266372680664,14.077119827270508,16.344280242919922,16.150440216064453,15.471964836120605,18.082901000976562,19.313552856445312,15.627999305725098,16.623794555664062,20.307065963745117,15.317383766174316,15.54086685180664,15.435260772705078,17.794321060180664,13.037073135375977,17.918153762817383,19.1793155670166,20.888002395629883,21.486604690551758,18.47738265991211,22.128093719482422,21.125503540039062,18.784833908081055,17.01515769958496,19.243650436401367,18.448013305664062,17.339698791503906,16.461048126220703,19.85207176208496,17.523456573486328,16.24659538269043,17.835494995117188,15.179210662841797,16.619041442871094,13.704568862915039,18.07297706604004,12.245382308959961,13.80820369720459,19.725160598754883,16.593265533447266,16.94959259033203,16.117557525634766,19.13555908203125,15.828376770019531,16.592565536499023,18.340681076049805,16.00701141357422,16.75788688659668,17.018070220947266,13.340511322021484,20.625343322753906],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[20.733112335205078],"y":[17.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[20.733112335205078],"y":[17.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-34.786277770996094,-32.98551559448242,-33.58727264404297,-37.28303527832031,-33.38277053833008,-33.271270751953125,-31.684288024902344,-35.299171447753906,-34.974403381347656,-31.43840217590332,-32.84543228149414,-34.08871078491211,-35.29766845703125,-30.418907165527344,-34.27478790283203,-33.36149597167969,-31.7674503326416,-33.34291458129883,-34.788612365722656,-38.50030517578125,-32.88014602661133,-35.28175354003906,-32.88725662231445,-31.204431533813477,-32.49185562133789,-34.02119445800781,-37.217838287353516,-36.17397689819336,-34.91342544555664,-34.141902923583984,-31.602235794067383,-32.8997802734375,-35.456417083740234,-35.421199798583984,-31.533687591552734,-34.049903869628906,-38.188629150390625,-29.703857421875,-30.142560958862305,-35.08719253540039,-36.222469329833984,-34.48225784301758,-37.310401916503906,-35.574649810791016,-33.69162368774414,-31.13685417175293,-29.61040687561035,-38.26445770263672,-32.438690185546875,-36.72296905517578,-35.173458099365234,-34.52485656738281,-30.378671646118164,-32.780120849609375,-34.232994079589844,-34.55628967285156,-33.46833801269531,-30.450965881347656,-33.79840850830078,-27.791980743408203,-33.9351692199707,-35.799049377441406,-29.29617691040039,-33.73920822143555,-35.19481658935547,-36.58304214477539,-29.361204147338867,-35.440433502197266,-32.2940559387207,-32.68912887573242,-34.96353530883789,-32.41054153442383,-33.39219284057617,-38.0408935546875,-34.32146453857422,-33.998958587646484,-33.03433609008789,-35.48695755004883,-33.647918701171875,-30.24983787536621,-27.458309173583984,-32.6208610534668,-32.14482879638672,-37.90208053588867,-33.12397384643555,-35.48960876464844,-33.141395568847656,-35.204132080078125,-32.59781265258789,-33.40555953979492,-29.193933486938477,-37.29500198364258,-31.702800750732422,-33.75777053833008,-31.9945011138916,-33.33823013305664,-33.82190704345703,-30.72000503540039,-32.33026885986328,-31.763364791870117,-31.485013961791992,-32.739837646484375,-33.248661041259766,-31.202646255493164,-30.945985794067383,-35.889320373535156,-33.4879035949707,-34.814308166503906,-32.57730484008789,-30.632579803466797,-32.53888702392578,-33.30049133300781,-34.517921447753906,-33.733421325683594,-32.375858306884766,-32.33277893066406,-32.110069274902344,-35.4594841003418,-29.849374771118164,-30.483699798583984,-34.05622100830078,-33.54214096069336,-34.39543151855469,-30.638376235961914,-36.15119171142578,-35.58393478393555,-35.437015533447266,-37.20899963378906,-31.641277313232422,-36.26168441772461,-34.41654586791992,-31.433635711669922,-33.732845306396484,-34.75202941894531,-37.491004943847656,-36.272953033447266,-33.23356628417969,-35.070472717285156,-33.84282684326172,-33.24551010131836,-35.690059661865234,-33.66445541381836,-32.67445373535156,-35.715152740478516,-34.331390380859375,-35.909942626953125,-31.832311630249023,-35.075260162353516,-35.961273193359375,-34.492095947265625,-35.405517578125,-34.78856658935547,-31.94954490661621,-35.32503128051758,-32.70454406738281,-32.44330978393555,-35.65006637573242,-33.0042610168457,-36.37570571899414,-39.180702209472656,-34.010467529296875,-30.172147750854492,-30.388469696044922,-33.86698532104492,-31.09158706665039,-35.091957092285156,-32.23052215576172,-32.230552673339844,-33.65658187866211,-36.60489273071289,-32.6712760925293,-31.787094116210938,-39.72444534301758,-32.18280029296875,-32.173954010009766,-35.30138397216797,-32.24757766723633,-38.44367980957031,-34.00872802734375,-36.07270050048828,-32.56061553955078,-31.198057174682617,-38.06668472290039,-32.08266830444336,-34.10511016845703,-32.27848434448242,-33.53029251098633,-35.75688171386719,-37.00090789794922,-37.43157958984375,-35.256370544433594,-35.74262237548828,-33.57838821411133,-33.9820556640625,-34.93687438964844,-30.481857299804688,-30.772396087646484,-34.984046936035156,-36.77357482910156,-32.43996810913086,-37.18902587890625,-31.849388122558594,-33.893592834472656,-34.385475158691406,-31.908845901489258,-34.40327453613281,-35.20296096801758,-32.897308349609375,-33.468353271484375,-32.69287109375,-32.62487030029297,-29.013643264770508,-32.9890022277832,-35.06705856323242,-33.12605285644531,-35.269203186035156,-34.974239349365234,-35.4029541015625,-32.846031188964844,-35.755279541015625,-30.473220825195312,-36.41853713989258,-38.344486236572266,-38.17719650268555,-33.39777755737305,-32.47884750366211,-31.982189178466797,-31.989604949951172,-34.37651062011719,-30.552669525146484,-36.7627067565918,-34.26247787475586,-36.41085433959961,-35.82783126831055,-37.29932403564453,-31.85589027404785,-29.23617935180664,-35.68738555908203,-36.75481033325195,-35.989112854003906,-29.04294204711914,-34.76285171508789,-33.49700927734375,-32.40103530883789,-32.32304000854492,-33.52954864501953,-37.26081466674805,-29.07168960571289,-32.086753845214844,-31.10124969482422],"y":[-1.3079537153244019,-1.5687673091888428,-5.015208721160889,0.37808191776275635,0.08640837669372559,-1.205498218536377,-0.23822057247161865,-2.8604302406311035,0.08255338668823242,-3.4534318447113037,0.5474429130554199,-1.5044759511947632,-2.4305291175842285,0.2408963441848755,-4.642973899841309,-1.716383457183838,0.8878538608551025,-0.702662467956543,-1.6856334209442139,-0.057710886001586914,-1.6463559865951538,1.5958967208862305,-2.926636219024658,-0.7453574538230896,-2.6665797233581543,1.6881499290466309,1.697415828704834,1.3063700199127197,-2.780424118041992,-1.8838708400726318,-1.9565043449401855,1.3191134929656982,2.052807569503784,-0.8651090860366821,-3.1164839267730713,-0.5312391519546509,-0.5047979354858398,-0.5590869188308716,-0.3738064765930176,-4.1491498947143555,0.23831665515899658,-0.290813684463501,-4.313520431518555,0.19596946239471436,-4.235535621643066,0.38339054584503174,-3.7878639698028564,1.1655545234680176,2.4589951038360596,0.8747231960296631,-1.6290003061294556,-5.405876159667969,-4.860082626342773,0.19045615196228027,-3.5267229080200195,-2.6222219467163086,1.0459091663360596,-2.485255718231201,-0.5097628831863403,0.5758223533630371,-4.8714752197265625,2.531646728515625,0.9231863021850586,-0.4080582857131958,0.6768913269042969,-2.487992763519287,-7.095523357391357,-0.4914283752441406,-1.4958784580230713,2.6121230125427246,0.4405151605606079,-1.8684362173080444,-1.8774712085723877,-0.7313384413719177,2.054952621459961,-4.108464241027832,1.465702772140503,-2.130704402923584,-5.371101379394531,-2.226217746734619,0.4791533946990967,-4.600157260894775,-0.5742153525352478,1.7084503173828125,-1.1896709203720093,-1.931398868560791,-2.3991036415100098,-1.1595830917358398,-0.8953620195388794,-3.7781591415405273,-1.5868693590164185,-4.069796562194824,-7.2422285079956055,-3.0357391834259033,-0.1505817174911499,-2.2281394004821777,-2.1901841163635254,-2.231431722640991,-2.723644733428955,-3.596595048904419,-1.0045478343963623,2.7403039932250977,-3.0648016929626465,0.7356681823730469,1.164578914642334,-0.16411042213439941,0.880206823348999,0.33174729347229004,0.8971118927001953,1.1774938106536865,-3.1678466796875,-2.829467535018921,-1.0820974111557007,1.8266475200653076,2.130237579345703,-3.415058135986328,-2.110994338989258,0.37157702445983887,-0.006573319435119629,1.680156946182251,1.8811981678009033,-3.700756788253784,-5.228647232055664,-0.2259230613708496,-3.3380284309387207,-2.4042131900787354,0.3517463207244873,-1.1191811561584473,-1.2734150886535645,-3.3897242546081543,-0.5914851427078247,-1.345471978187561,0.12841904163360596,-1.1998852491378784,-2.7191357612609863,-0.559424102306366,-1.6853903532028198,-0.5660925507545471,-0.8014736175537109,-0.03222167491912842,-1.2246586084365845,-6.486256122589111,-4.273756980895996,2.909043788909912,-3.4486255645751953,0.058191537857055664,3.4782629013061523,-2.324270725250244,-0.6814618110656738,-1.7507152557373047,1.1072652339935303,-4.672080039978027,-2.457566499710083,-1.3932610750198364,-0.08560097217559814,-1.619522213935852,-3.8886544704437256,-0.004502654075622559,-2.695192575454712,-1.9960553646087646,0.2785458564758301,-1.0178179740905762,-3.2211780548095703,0.4344754219055176,-1.0448927879333496,-0.7436995506286621,3.558774948120117,-6.4076924324035645,3.9666824340820312,2.0238850116729736,0.08738267421722412,-3.6296193599700928,-0.6219260096549988,-1.1914854049682617,-3.99352765083313,-5.24586296081543,-1.7896080017089844,-0.3870319128036499,-1.1105537414550781,-1.2487242221832275,0.42590105533599854,-7.296867370605469,-2.5229814052581787,-2.7447023391723633,-3.060511350631714,-0.3849477767944336,-0.21444380283355713,-0.7106090188026428,-1.9749436378479004,-1.8415688276290894,-3.6787853240966797,-3.060153007507324,0.2663658857345581,-1.5226943492889404,-4.5513596534729,-1.4911593198776245,-2.366349935531616,0.6045627593994141,1.3657903671264648,-5.274683475494385,-2.3139519691467285,-3.0115299224853516,-1.3747377395629883,-4.709768295288086,-5.919867515563965,-1.9845699071884155,-1.6104366779327393,-1.5923974514007568,-3.7274768352508545,-1.5101288557052612,2.482415199279785,-0.872113049030304,-0.14150989055633545,-0.9163210988044739,-0.1650829315185547,-1.8043817281723022,-1.8429034948349,-0.7156722545623779,-5.331514358520508,1.6370668411254883,-0.18635833263397217,-0.890454113483429,-0.9139787554740906,-6.096468925476074,2.098078489303589,0.1454155445098877,-2.941251039505005,-8.594369888305664,-1.2922152280807495,-1.2021934986114502,-0.6776652336120605,-3.4323456287384033,-2.3471410274505615,-3.332916736602783,-3.2646942138671875,-7.615720748901367,-4.08339786529541,-5.473243713378906,-1.8892383575439453,-1.722118854522705,0.17733514308929443,-3.5523600578308105,-3.657548666000366,-0.34082555770874023,2.0679662227630615,-1.8558177947998047,-2.3761096000671387,-3.269364356994629,-1.8960355520248413,-2.1909849643707275],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-33.52712631225586],"y":[-1.5078315734863281],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-33.52712631225586],"y":[-1.5078315734863281],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}},"xaxis":{"zeroline":false},"yaxis":{"zeroline":false}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('d1b431e0-e1f1-4771-a761-8818232ed2db');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<p>In the end, all clusters will converge at their respective center (marked by X).</p>
<section id="implementation" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>Let’s start of simple and apply the algorithm to a single point.</p>
<section id="calculate-distances" class="level3">
<h3 class="anchored" data-anchor-id="calculate-distances">Calculate Distances</h3>
<blockquote class="blockquote">
<p>For each data point <img src="https://latex.codecogs.com/png.latex?x"> in the dataset, calculate the distance between <img src="https://latex.codecogs.com/png.latex?x"> and every other data point in the dataset.</p>
</blockquote>
<div class="cell" data-outputid="a5e276d3-00f9-4fbd-b46f-89e6b5040010" data-execution_count="14">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">data</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>tensor([[-18.425, -32.047],
        [-19.443, -25.795],
        [-19.854, -28.213],
        ...,
        [-29.072,  -3.269],
        [-32.087,  -1.896],
        [-31.101,  -2.191]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="edf1ccf9-5f62-4a0e-f1b1-6f65ede655b9" data-execution_count="15">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.clone()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> X.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>torch.Size([1500, 2])</code></pre>
</div>
</div>
<p>Each point has an <img src="https://latex.codecogs.com/png.latex?x"> coordinate and a <img src="https://latex.codecogs.com/png.latex?y"> coordinate.</p>
<div class="cell" data-outputid="fab637a8-e484-4d59-a2b1-602013b0c3c0" data-execution_count="16">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>tensor([[  0.000,   0.000],
        [  1.018,  -6.253],
        [  1.429,  -3.834],
        ...,
        [ 10.646, -28.778],
        [ 13.661, -30.151],
        [ 12.676, -29.856]])</code></pre>
</div>
</div>
<p>The distance metric we’ll use is <a href="https://www.mathsisfun.com/algebra/distance-2-points.html">Euclidean distance</a> —&nbsp;also better known as Pythagoras’ theorem.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csqrt%7B(x_2%20-%20x_1)%5E2%20+%20(y_2%20-%20y_1)%5E2%7D%0A"></p>
<div class="cell" data-outputid="f8457383-39fe-4863-bd74-7f21509f230c" data-execution_count="17">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X).square().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sqrt()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> dists</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>tensor([ 0.000,  6.335,  4.092,  ..., 30.684, 33.102, 32.436])</code></pre>
</div>
</div>
</section>
<section id="calculate-weights" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="calculate-weights">Calculate Weights</h3>
<blockquote class="blockquote">
<p>Calculate weights for each point in the dataset by passing the calculated distances through the normal distribution.</p>
</blockquote>
<p>The <a href="https://www.mathsisfun.com/data/standard-normal-distribution.html">normal distribution</a> is also known as the Gaussian distribution. A distribution is simply a way to describe how data is spread out —&nbsp;this isn’t applicable in our case. What is applicable is the shape of this distribution which we will use to calculate the weights.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7B2%5Cpi%7D%20%7D%20e%5E%7B-%5Cfrac%7B1%7D%7B2%7D%5Cleft(%5Cfrac%7Bx-%5Cmu%7D%7B%5Csigma%7D%5Cright)%5E2%7D%0A"></p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> gauss_kernel(x, mean, std):</span>
<span id="cb9-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tensor(torch.pi)))</span></code></pre></div>
</div>
<p>This is how it looks like.</p>
<div class="cell page-columns page-full" data-outputid="fe1290d3-367a-4ac2-8e8e-cb44cd8c6ec9" data-execution_count="21">
<div class="cell-output cell-output-display column-page">
<div>                            <div id="f78ff8eb-9ee8-41d4-b38a-3d687acfcdaa" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("f78ff8eb-9ee8-41d4-b38a-3d687acfcdaa")) {                    Plotly.newPlot(                        "f78ff8eb-9ee8-41d4-b38a-3d687acfcdaa",                        [{"marker":{"color":"#d92310"},"x":[0.0,0.10101009905338287,0.20202019810676575,0.3030303120613098,0.4040403962135315,0.5050504803657532,0.6060606241226196,0.7070707082748413,0.808080792427063,0.9090908765792847,1.0101009607315063,1.111111044883728,1.2121212482452393,1.313131332397461,1.4141414165496826,1.5151515007019043,1.616161584854126,1.7171716690063477,1.8181817531585693,1.919191837310791,2.0202019214630127,2.1212120056152344,2.222222089767456,2.3232321739196777,2.4242424964904785,2.5252525806427,2.626262664794922,2.7272727489471436,2.8282828330993652,2.929292917251587,3.0303030014038086,3.1313130855560303,3.232323169708252,3.3333332538604736,3.4343433380126953,3.535353422164917,3.6363635063171387,3.7373735904693604,3.838383674621582,3.9393937587738037,4.040403842926025,4.141414165496826,4.242424011230469,4.3434343338012695,4.444444179534912,4.545454502105713,4.6464643478393555,4.747474670410156,4.848484992980957,4.9494948387146,5.0505051612854,5.151515007019043,5.252525329589844,5.3535356521606445,5.454545497894287,5.555555820465088,5.6565656661987305,5.757575988769531,5.858585834503174,5.959596157073975,6.060606002807617,6.161616325378418,6.2626261711120605,6.363636493682861,6.464646339416504,6.565656661987305,6.666666507720947,6.767676830291748,6.868687152862549,6.969696998596191,7.070707321166992,7.171717166900635,7.2727274894714355,7.373737335205078,7.474747657775879,7.5757575035095215,7.676767826080322,7.777777671813965,7.878787994384766,7.979797840118408,8.08080768585205,8.181818008422852,8.282828330993652,8.383838653564453,8.484848976135254,8.585858345031738,8.686868667602539,8.78787899017334,8.88888931274414,8.989898681640625,9.090909004211426,9.191919326782227,9.292929649353027,9.393939018249512,9.494949340820312,9.595959663391113,9.696969985961914,9.797979354858398,9.8989896774292,10.0],"y":[0.1595769077539444,0.15944671630859375,0.15905675292015076,0.15840892493724823,0.15750640630722046,0.15635357797145844,0.15495601296424866,0.15332044661045074,0.15145468711853027,0.1493675857782364,0.14706897735595703,0.144569531083107,0.14188076555728912,0.13901486992835999,0.13598470389842987,0.13280360400676727,0.1294853538274765,0.12604409456253052,0.12249413877725601,0.11885000765323639,0.11512617766857147,0.11133713275194168,0.10749714821577072,0.10362031310796738,0.09972036629915237,0.0958106592297554,0.09190409630537033,0.08801301568746567,0.08414918929338455,0.08032375574111938,0.07654716819524765,0.07282915711402893,0.06917870044708252,0.06560403108596802,0.06211260333657265,0.058711059391498566,0.055405277758836746,0.05220034345984459,0.04910058155655861,0.046109553426504135,0.043230101466178894,0.040464334189891815,0.037813760340213776,0.035279154777526855,0.03286076337099075,0.030558215454220772,0.028370661661028862,0.026296738535165787,0.024334654211997986,0.02248224802315235,0.020736966282129288,0.019095974043011665,0.017556147649884224,0.016114164143800735,0.014766494743525982,0.013509458862245083,0.01233927346765995,0.011252064257860184,0.01024391409009695,0.009310876950621605,0.008449019864201546,0.0076544322073459625,0.006923263426870108,0.006251719314604998,0.005636107642203569,0.005072826519608498,0.004558395594358444,0.0040894486010074615,0.0036627596709877253,0.0032752424012869596,0.0029239447321742773,0.0026060710661113262,0.002318964572623372,0.002060123486444354,0.0018271876033395529,0.0016179465455934405,0.0014303296338766813,0.0012624067021533847,0.0011123797157779336,0.0009785847505554557,0.000859478022903204,0.0007536362973041832,0.000659750250633806,0.0005766188842244446,0.0005031400360167027,0.00043830907088704407,0.00038120849058032036,0.0003310059546492994,0.0002869457530323416,0.0002483450516592711,0.0002145861799363047,0.00018511386588215828,0.00015942890604492277,0.00013708397455047816,0.00011767854448407888,0.00010085522080771625,8.629600051790476e-05,7.371818355750293e-05,6.287076394073665e-05,5.353209053282626e-05],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('f78ff8eb-9ee8-41d4-b38a-3d687acfcdaa');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<p>From the shape of this graph, we can see that larger values of <img src="https://latex.codecogs.com/png.latex?x"> give smaller values of <img src="https://latex.codecogs.com/png.latex?y">, which is what we want —&nbsp;longer distances should have smaller weights meaning they have a smaller effect on the new position of the point.</p>
<p>We can control the rate at which the weights go to zero by varying what’s known as the bandwidth, or the standard deviation. The graph above is generated with a bandwith of 2.5.</p>
<p>The graph below is generated with a bandwidth of 1.</p>
<div class="cell page-columns page-full" data-outputid="6fe345ed-05a8-409d-ae1c-ef1f5c297d3e" data-execution_count="22">
<div class="cell-output cell-output-display column-page">
<div>                            <div id="b794ba93-32ce-44b5-be7a-95fdad00506a" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("b794ba93-32ce-44b5-be7a-95fdad00506a")) {                    Plotly.newPlot(                        "b794ba93-32ce-44b5-be7a-95fdad00506a",                        [{"marker":{"color":"#d92310"},"x":[0.0,0.10101009905338287,0.20202019810676575,0.3030303120613098,0.4040403962135315,0.5050504803657532,0.6060606241226196,0.7070707082748413,0.808080792427063,0.9090908765792847,1.0101009607315063,1.111111044883728,1.2121212482452393,1.313131332397461,1.4141414165496826,1.5151515007019043,1.616161584854126,1.7171716690063477,1.8181817531585693,1.919191837310791,2.0202019214630127,2.1212120056152344,2.222222089767456,2.3232321739196777,2.4242424964904785,2.5252525806427,2.626262664794922,2.7272727489471436,2.8282828330993652,2.929292917251587,3.0303030014038086,3.1313130855560303,3.232323169708252,3.3333332538604736,3.4343433380126953,3.535353422164917,3.6363635063171387,3.7373735904693604,3.838383674621582,3.9393937587738037,4.040403842926025,4.141414165496826,4.242424011230469,4.3434343338012695,4.444444179534912,4.545454502105713,4.6464643478393555,4.747474670410156,4.848484992980957,4.9494948387146,5.0505051612854,5.151515007019043,5.252525329589844,5.3535356521606445,5.454545497894287,5.555555820465088,5.6565656661987305,5.757575988769531,5.858585834503174,5.959596157073975,6.060606002807617,6.161616325378418,6.2626261711120605,6.363636493682861,6.464646339416504,6.565656661987305,6.666666507720947,6.767676830291748,6.868687152862549,6.969696998596191,7.070707321166992,7.171717166900635,7.2727274894714355,7.373737335205078,7.474747657775879,7.5757575035095215,7.676767826080322,7.777777671813965,7.878787994384766,7.979797840118408,8.08080768585205,8.181818008422852,8.282828330993652,8.383838653564453,8.484848976135254,8.585858345031738,8.686868667602539,8.78787899017334,8.88888931274414,8.989898681640625,9.090909004211426,9.191919326782227,9.292929649353027,9.393939018249512,9.494949340820312,9.595959663391113,9.696969985961914,9.797979354858398,9.8989896774292,10.0],"y":[0.3989422917366028,0.39691224694252014,0.3908839225769043,0.38103950023651123,0.3676724135875702,0.35117292404174805,0.332008957862854,0.31070446968078613,0.2878154516220093,0.2639061510562897,0.2395266741514206,0.21519248187541962,0.19136790931224823,0.16845351457595825,0.14677762985229492,0.12659268081188202,0.10807523876428604,0.09132982790470123,0.07639553397893906,0.06325461715459824,0.051842425018548965,0.04205787181854248,0.03377366065979004,0.026845896616578102,0.02112254500389099,0.0164506733417511,0.012682069092988968,0.009677547961473465,0.0073098656721413136,0.005465405061841011,0.004044866189360619,0.0029631592333316803,0.0021486938931047916,0.001542279263958335,0.001095772604458034,0.0007706313044764102,0.0005364654352888465,0.0003696628555189818,0.0002521381829865277,0.00017023166583385319,0.00011376560723874718,7.525753608206287e-05,4.9278671212960035e-05,3.1940071494318545e-05,2.0491905161179602e-05,1.3013589523325209e-05,8.180530130630359e-06,5.090186732559232e-06,3.13512373395497e-06,1.9113738289888715e-06,1.1534652912814636e-06,6.890224426570057e-07,4.0740854956311523e-07,2.384490471740719e-07,1.3814370447562396e-07,7.921985911707452e-08,4.4968398782430086e-08,2.5266686520808435e-08,1.4052678132259189e-08,7.736388418777551e-09,4.215864102263822e-09,2.274066712715239e-09,1.2141988525726788e-09,6.417175124617813e-10,3.357128741665605e-10,1.7384393924402275e-10,8.910907428605341e-11,4.5211799581945655e-11,2.2706491201174295e-11,1.1288052090274725e-11,5.554624035036815e-12,2.705584888074153e-12,1.3044731310765667e-12,6.225581573697514e-13,2.940975371221177e-13,1.3752246683009645e-13,6.365353665167828e-14,2.91637340091213e-14,1.3226028989187216e-14,5.93727998487786e-15,2.6382372154287346e-15,1.160399879991962e-15,5.052075603734663e-16,2.17721838453168e-16,9.287577300300494e-17,3.9217019961665717e-17,1.6391296867426264e-17,6.781416499660302e-18,2.7771273849293945e-18,1.1257566245328715e-18,4.517084949629707e-19,1.794073710776881e-19,7.053272148011633e-20,2.744822440642201e-20,1.0573155067797779e-20,4.031452931178279e-21,1.5215580441903595e-21,5.684454437762772e-22,2.1020951984089623e-22,7.694598494446235e-23],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('b794ba93-32ce-44b5-be7a-95fdad00506a');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<p>Let’s get our weights now.</p>
<div class="cell" data-outputid="249b1bf2-23ed-4d7f-db58-c9f32516fd07" data-execution_count="23">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">gauss_kernel(dists, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor([    0.160,     0.006,     0.042,  ...,     0.000,     0.000,     0.000])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">bw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span></span>
<span id="cb12-2">ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gauss_kernel(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dists, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bw)</span></code></pre></div>
</div>
</section>
<section id="move-the-point" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="move-the-point">Move the Point</h3>
<blockquote class="blockquote">
<p>Calculate the weighted average for all points in the dataset. This weighted average is the new location for <img src="https://latex.codecogs.com/png.latex?x"></p>
</blockquote>
<div class="cell" data-outputid="82d90aa8-e7fc-4e79-8807-eb92a6ff47db" data-execution_count="25">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">ws.shape, X.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>(torch.Size([1500]), torch.Size([1500, 2]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="dd5fa33c-2ced-4c4e-a6d7-edcaf7cc2cdb" data-execution_count="26">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">ws[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>].shape, X.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>(torch.Size([1500, 1]), torch.Size([1500, 2]))</code></pre>
</div>
</div>
<p>Below is the formula for <a href="https://www.mathsisfun.com/data/weighted-mean.html">weighted average</a>.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Csum%20wx%7D%7B%5Csum%20w%7D%0A"></p>
<p>In words, multiply each data point in the set with its corresponding weight and sum all products. Divide that with the sum of all weights.</p>
<div class="cell" data-outputid="9614f3ab-0da8-4dbe-e0a4-dbdc6e58786d" data-execution_count="27">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">ws[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X, ws[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>(tensor([[    -2.940,     -5.114],
         [    -0.125,     -0.166],
         [    -0.830,     -1.180],
         ...,
         [    -0.000,     -0.000],
         [    -0.000,     -0.000],
         [    -0.000,     -0.000]]),
 tensor([-2.940, -5.114]))</code></pre>
</div>
</div>
<p>Let’s calculate the weighted average and assign it as the new location for our point <img src="https://latex.codecogs.com/png.latex?x">.</p>
<div class="cell" data-outputid="5e83063c-bd77-438d-b110-33d9d2785719" data-execution_count="28">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ws[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ws.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>tensor([-17.933, -29.820])</code></pre>
</div>
</div>
<p>And there you have it! We just moved a single data point.</p>
<p>Let’s do this for all data points and for a single iteration.</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(X):</span>
<span id="cb21-2">    dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X).square().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sqrt()</span>
<span id="cb21-3">    ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gauss_kernel(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dist, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bw)</span>
<span id="cb21-4">    X[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ws[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ws.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</div>
<div class="cell page-columns page-full" data-outputid="53a4718b-2ed1-450b-8b45-b2775e7b515f" data-execution_count="30">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">plot_data(centroids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, X, n_samples)</span></code></pre></div>
<div class="cell-output cell-output-display column-page">
<div>                            <div id="0d22d6bd-f291-43da-9da3-182108825d60" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("0d22d6bd-f291-43da-9da3-182108825d60")) {                    Plotly.newPlot(                        "0d22d6bd-f291-43da-9da3-182108825d60",                        [{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-17.93345069885254,-18.672956466674805,-18.87554168701172,-17.391448974609375,-18.410518646240234,-16.605117797851562,-17.218339920043945,-17.476564407348633,-14.472488403320312,-17.8407039642334,-17.316455841064453,-16.292034149169922,-16.865018844604492,-17.948312759399414,-18.454017639160156,-18.474454879760742,-18.00103759765625,-16.074743270874023,-18.382627487182617,-18.55415916442871,-16.91604232788086,-15.244893074035645,-17.94951820373535,-16.267900466918945,-18.669349670410156,-17.797882080078125,-17.560890197753906,-16.83671760559082,-17.53059196472168,-15.961772918701172,-17.681848526000977,-18.81679916381836,-17.02103614807129,-15.849772453308105,-18.159515380859375,-18.280488967895508,-18.019315719604492,-17.126646041870117,-16.489713668823242,-16.99738311767578,-18.731733322143555,-18.00418472290039,-17.199201583862305,-16.90850257873535,-19.1691837310791,-14.256765365600586,-16.735475540161133,-17.20042610168457,-17.861865997314453,-16.988012313842773,-16.143762588500977,-16.22237205505371,-17.586223602294922,-17.017948150634766,-17.40336036682129,-17.56263542175293,-18.393787384033203,-17.591869354248047,-18.857650756835938,-17.322853088378906,-17.290185928344727,-17.369625091552734,-16.575206756591797,-17.98999786376953,-17.010387420654297,-19.340627670288086,-17.479625701904297,-18.05548667907715,-17.346755981445312,-17.61469078063965,-15.401942253112793,-16.222063064575195,-17.9050350189209,-16.709407806396484,-17.442842483520508,-18.55061149597168,-18.777090072631836,-15.952781677246094,-16.831796646118164,-19.158226013183594,-20.054349899291992,-17.31753158569336,-16.684738159179688,-17.356403350830078,-18.273239135742188,-17.128137588500977,-16.845399856567383,-18.58141326904297,-17.568769454956055,-17.732309341430664,-17.317419052124023,-19.40077781677246,-18.455087661743164,-16.072799682617188,-17.549072265625,-17.642398834228516,-16.11077308654785,-17.041587829589844,-18.150238037109375,-16.87252426147461,-16.54407501220703,-17.23980712890625,-17.272306442260742,-17.082740783691406,-15.783092498779297,-16.99578285217285,-17.05095863342285,-17.449695587158203,-19.40622329711914,-18.042131423950195,-17.598587036132812,-16.44927215576172,-17.33185577392578,-17.252620697021484,-16.962709426879883,-17.81957244873047,-16.545286178588867,-17.254043579101562,-17.167293548583984,-17.59521484375,-17.214754104614258,-18.974763870239258,-18.01205825805664,-16.447269439697266,-21.53748893737793,-21.206308364868164,-18.949708938598633,-17.688060760498047,-18.21295928955078,-17.046979904174805,-17.246286392211914,-17.84295654296875,-18.73354148864746,-16.702789306640625,-17.27138900756836,-18.710498809814453,-17.493684768676758,-20.526987075805664,-18.85688018798828,-16.723800659179688,-18.22001838684082,-17.93875503540039,-17.304397583007812,-16.69280242919922,-17.303457260131836,-16.821149826049805,-17.320199966430664,-16.926584243774414,-17.929445266723633,-17.60738754272461,-16.416893005371094,-18.064477920532227,-16.537883758544922,-17.75608253479004,-18.56281852722168,-17.508243560791016,-17.263036727905273,-19.54575538635254,-16.620220184326172,-17.295360565185547,-18.309009552001953,-17.50843620300293,-18.430185317993164,-17.61665153503418,-16.843257904052734,-16.70153045654297,-17.244417190551758,-18.105562210083008,-17.757396697998047,-16.55284881591797,-16.787572860717773,-20.190898895263672,-17.28972625732422,-16.651630401611328,-17.388263702392578,-17.256025314331055,-17.689125061035156,-16.9613094329834,-17.084514617919922,-17.7273006439209,-16.46013832092285,-20.81535530090332,-16.284650802612305,-19.69078826904297,-17.914894104003906,-19.96660614013672,-18.959808349609375,-18.90993881225586,-16.569318771362305,-17.76008415222168,-17.283655166625977,-18.524736404418945,-17.533876419067383,-17.375221252441406,-17.374357223510742,-17.54176139831543,-17.1226749420166,-19.468900680541992,-17.068490982055664,-17.484661102294922,-20.695425033569336,-16.69091033935547,-17.62763214111328,-17.400163650512695,-17.83158302307129,-16.82742691040039,-16.311124801635742,-17.860008239746094,-17.688663482666016,-18.119394302368164,-17.6047420501709,-17.14929962158203,-18.248106002807617,-17.70142364501953,-18.707134246826172,-19.311094284057617,-20.550716400146484,-17.26909637451172,-18.049772262573242,-17.4688777923584,-17.043922424316406,-18.397476196289062,-17.40957260131836,-17.364994049072266,-17.162384033203125,-17.265621185302734,-19.88526725769043,-17.952392578125,-17.03742790222168,-16.833314895629883,-17.361536026000977,-16.70001792907715,-17.463722229003906,-17.450136184692383,-17.16475486755371,-21.037080764770508,-17.281068801879883,-18.096054077148438,-20.94745635986328,-17.42332649230957,-17.344350814819336,-17.084896087646484,-17.44031524658203,-18.616968154907227,-17.5672550201416,-17.854639053344727,-17.688631057739258,-17.973222732543945,-17.62203598022461,-17.284921646118164],"y":[-29.82018280029297,-27.252962112426758,-28.24264907836914,-28.84381866455078,-27.535568237304688,-27.156702041625977,-27.660043716430664,-28.403989791870117,-26.54819679260254,-28.676164627075195,-27.82912826538086,-28.423824310302734,-28.288593292236328,-28.01381492614746,-28.493797302246094,-27.666330337524414,-29.727039337158203,-28.25453758239746,-29.174270629882812,-29.370197296142578,-28.89134407043457,-28.125530242919922,-28.52867889404297,-29.243791580200195,-28.485424041748047,-28.819215774536133,-29.301605224609375,-27.849151611328125,-28.130769729614258,-29.737943649291992,-28.499160766601562,-28.395612716674805,-28.08953857421875,-27.80547332763672,-27.65271759033203,-28.518497467041016,-28.63184356689453,-27.2771053314209,-28.069812774658203,-28.363372802734375,-28.307104110717773,-26.972370147705078,-27.68634796142578,-28.60478401184082,-28.279090881347656,-30.71819305419922,-27.768577575683594,-29.591672897338867,-28.163297653198242,-27.07356834411621,-28.5618896484375,-28.203763961791992,-27.93286895751953,-26.996320724487305,-28.256311416625977,-27.833194732666016,-28.312101364135742,-28.231576919555664,-27.753986358642578,-27.48889923095703,-28.69884490966797,-27.84437370300293,-27.336318969726562,-28.591455459594727,-28.343740463256836,-27.905794143676758,-27.833507537841797,-28.16132164001465,-27.790376663208008,-27.270109176635742,-26.811613082885742,-27.439573287963867,-28.968324661254883,-28.13803482055664,-29.29633903503418,-28.951513290405273,-27.655012130737305,-28.75788688659668,-28.12044334411621,-28.858455657958984,-27.723772048950195,-27.871856689453125,-29.242145538330078,-27.9326229095459,-27.504150390625,-28.75847625732422,-27.208274841308594,-27.63625717163086,-26.921899795532227,-29.065031051635742,-27.918851852416992,-27.29453468322754,-27.909589767456055,-28.60574722290039,-29.56396484375,-28.43793296813965,-29.038793563842773,-28.67259979248047,-28.117286682128906,-28.63887596130371,-28.74171257019043,-28.392744064331055,-27.608104705810547,-29.174121856689453,-27.175273895263672,-27.596025466918945,-28.401596069335938,-28.04241943359375,-27.906917572021484,-28.02680206298828,-29.052579879760742,-28.787525177001953,-28.935014724731445,-28.312097549438477,-28.38812828063965,-26.823884963989258,-27.29998016357422,-28.435546875,-28.369102478027344,-28.2828426361084,-28.011960983276367,-30.150163650512695,-28.38235092163086,-29.678861618041992,-28.63614273071289,-29.085861206054688,-28.736772537231445,-28.272302627563477,-28.450359344482422,-27.892499923706055,-28.520036697387695,-27.291391372680664,-28.944705963134766,-28.61179542541504,-28.58624267578125,-28.077192306518555,-27.413789749145508,-28.952369689941406,-28.673980712890625,-28.854206085205078,-27.633956909179688,-28.191843032836914,-28.756023406982422,-27.942358016967773,-28.389415740966797,-28.255537033081055,-28.204370498657227,-28.739490509033203,-27.812223434448242,-28.62491798400879,-28.216270446777344,-28.269893646240234,-28.636455535888672,-28.564088821411133,-28.200349807739258,-28.331811904907227,-28.733022689819336,-28.327800750732422,-28.9379940032959,-28.445322036743164,-28.358001708984375,-28.5703067779541,-28.53862953186035,-28.244308471679688,-27.884395599365234,-27.07375717163086,-28.24193000793457,-28.202707290649414,-28.260421752929688,-29.35333824157715,-29.18290901184082,-27.376506805419922,-28.854103088378906,-27.787357330322266,-28.348134994506836,-28.416860580444336,-28.27450180053711,-28.199331283569336,-28.751672744750977,-28.061254501342773,-28.564640045166016,-29.010940551757812,-27.864398956298828,-29.039831161499023,-28.435880661010742,-28.12364959716797,-28.364013671875,-28.6677188873291,-28.762405395507812,-28.70552635192871,-28.74207305908203,-28.287731170654297,-28.67350196838379,-28.750757217407227,-28.50192642211914,-28.49774742126465,-28.420095443725586,-27.255178451538086,-27.869312286376953,-28.28159523010254,-27.68055534362793,-28.196985244750977,-28.496000289916992,-28.033660888671875,-28.337520599365234,-28.217741012573242,-28.10299301147461,-28.66118049621582,-28.33313751220703,-28.230138778686523,-28.323637008666992,-28.138586044311523,-28.333280563354492,-28.148738861083984,-27.92496681213379,-27.810365676879883,-28.57619285583496,-28.552003860473633,-28.179344177246094,-28.424991607666016,-28.547014236450195,-28.430330276489258,-28.59770965576172,-29.571104049682617,-28.192691802978516,-28.46324348449707,-28.03916358947754,-28.462507247924805,-28.34943199157715,-28.345685958862305,-28.223663330078125,-29.54801368713379,-28.434078216552734,-28.368135452270508,-28.50812530517578,-28.272388458251953,-28.37278175354004,-28.230518341064453,-27.801164627075195,-28.31940269470215,-28.30918312072754,-28.35401153564453,-28.54264259338379,-28.121706008911133,-28.315176010131836,-28.457670211791992,-28.345537185668945,-28.265836715698242,-28.292570114135742,-28.484949111938477],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.31194496154785,19.60264778137207,17.852184295654297,18.00135612487793,20.19584846496582,19.719310760498047,19.108762741088867,16.78489875793457,21.780879974365234,19.6170654296875,18.508777618408203,18.61858558654785,18.467782974243164,17.340219497680664,20.435272216796875,18.184322357177734,18.54207420349121,18.720035552978516,18.45891761779785,17.5909423828125,19.64946746826172,16.896514892578125,16.961639404296875,18.09926414489746,18.579195022583008,18.977893829345703,19.433731079101562,19.96000862121582,17.11467742919922,18.07077980041504,17.774110794067383,18.55094337463379,18.567256927490234,20.24831771850586,20.7992000579834,18.842082977294922,18.54688262939453,18.499130249023438,18.529848098754883,19.88465118408203,18.09912872314453,18.71331024169922,17.432117462158203,19.821372985839844,17.408079147338867,19.169708251953125,19.64541244506836,17.22052001953125,18.870948791503906,18.371437072753906,23.148460388183594,19.001707077026367,17.69402503967285,18.825654983520508,17.626564025878906,18.4725284576416,19.320629119873047,20.268217086791992,18.722747802734375,17.495338439941406,17.102191925048828,17.19304084777832,18.118022918701172,18.874116897583008,19.27398109436035,18.356971740722656,18.09990119934082,18.011653900146484,18.451642990112305,18.104434967041016,19.039112091064453,18.000314712524414,18.8885555267334,17.05986785888672,16.730243682861328,16.61931800842285,18.836519241333008,18.21787452697754,17.953847885131836,17.714893341064453,17.919252395629883,18.11064910888672,17.39457130432129,18.180578231811523,17.700796127319336,18.366392135620117,18.33197021484375,19.082202911376953,17.5579776763916,18.513221740722656,18.20884895324707,18.715253829956055,19.062658309936523,17.696992874145508,18.09080696105957,18.491195678710938,18.158897399902344,18.200767517089844,19.043949127197266,17.62574005126953,18.120203018188477,18.994211196899414,17.551727294921875,19.47199821472168,17.29815673828125,19.11261558532715,18.6041316986084,17.402381896972656,17.993608474731445,18.46124839782715,18.805118560791016,17.65644073486328,18.35255241394043,18.498632431030273,18.346036911010742,18.176729202270508,18.006332397460938,18.482406616210938,18.38773536682129,19.81353759765625,18.296838760375977,19.040212631225586,19.3450927734375,18.383525848388672,19.402273178100586,20.75014877319336,18.381845474243164,18.797496795654297,19.827003479003906,15.676347732543945,18.41238021850586,18.28046226501465,18.722427368164062,18.56415557861328,17.86656951904297,18.646739959716797,17.403303146362305,17.265779495239258,18.251953125,18.489501953125,18.145002365112305,18.53607940673828,18.674497604370117,18.091806411743164,18.786663055419922,17.45075798034668,18.267728805541992,18.703977584838867,18.533048629760742,20.054611206054688,18.24629783630371,18.574678421020508,18.26358985900879,20.04035186767578,18.634061813354492,18.220775604248047,17.87328338623047,17.390666961669922,17.491527557373047,18.468608856201172,17.824542999267578,18.72773551940918,18.442089080810547,18.383262634277344,17.114809036254883,17.837066650390625,18.018835067749023,18.89638328552246,18.179397583007812,20.051149368286133,19.2031192779541,18.850427627563477,18.470056533813477,18.462236404418945,18.097915649414062,18.545814514160156,18.46795654296875,17.93093490600586,18.391782760620117,17.989574432373047,18.188133239746094,18.398168563842773,18.923795700073242,18.699871063232422,18.472949981689453,18.70380210876465,18.45541763305664,19.466259002685547,18.32801628112793,18.58493995666504,19.235652923583984,19.76487159729004,17.959352493286133,18.41038703918457,18.960155487060547,17.76902198791504,18.030807495117188,18.63864517211914,18.457782745361328,20.395639419555664,18.713274002075195,18.53799057006836,18.441261291503906,19.022859573364258,19.935054779052734,17.902402877807617,18.93545150756836,18.570220947265625,18.707599639892578,18.48879623413086,18.8892879486084,18.31317138671875,18.359743118286133,18.403701782226562,18.325721740722656,18.430381774902344,18.80904769897461,17.985042572021484,18.388418197631836,18.607749938964844,19.145883560180664,18.65987777709961,18.744604110717773,17.939104080200195,18.449031829833984,18.39680290222168,17.830690383911133,18.828414916992188,18.005773544311523,18.489160537719727,18.11813735961914,18.265769958496094,18.917072296142578,18.28925895690918,18.253190994262695,17.967348098754883,18.155057907104492,18.134143829345703,18.250659942626953,17.986671447753906,18.537799835205078,18.37718391418457,18.27678680419922,18.45863151550293,19.576265335083008,18.464618682861328,18.55844497680664,18.353790283203125,18.23674964904785,18.474628448486328],"y":[-3.2253570556640625,-4.980579853057861,-1.9378918409347534,-4.7480974197387695,-3.7079365253448486,-3.9322264194488525,-3.8352179527282715,-3.411043643951416,-4.406094074249268,-3.5163931846618652,-3.9162557125091553,-5.403076171875,-3.15657901763916,-3.1055238246917725,-5.159969329833984,-4.174549579620361,-4.350169658660889,-1.7642484903335571,-5.450778961181641,-2.0071864128112793,-6.100213527679443,-2.4488401412963867,-3.6727139949798584,-3.7566511631011963,-3.81669020652771,-4.625809669494629,-3.6865038871765137,-4.779524326324463,-4.441735744476318,-3.0714902877807617,-2.8377060890197754,-4.473483085632324,-4.267498016357422,-2.899198293685913,-3.555734157562256,-2.6661643981933594,-3.5316827297210693,-4.02793550491333,-3.5419371128082275,-3.1910793781280518,-4.249509811401367,-2.767648696899414,-3.931091785430908,-4.8095703125,-1.330065369606018,-3.8679237365722656,-3.4805972576141357,-4.380720138549805,-4.602298736572266,-3.321652889251709,-3.2234718799591064,-4.301663875579834,-4.515533924102783,-4.01350212097168,-3.4688398838043213,-2.4453632831573486,-3.014688014984131,-4.229975700378418,-4.360228538513184,-3.7846341133117676,-3.510321855545044,-3.7379956245422363,-4.026822566986084,-4.094428062438965,-2.862868309020996,-4.563020706176758,-4.322591781616211,-3.604454755783081,-2.688918113708496,-2.3002285957336426,-2.68359637260437,-4.573750972747803,-3.7487850189208984,-2.9199018478393555,-3.4677114486694336,-3.4219110012054443,-3.3768768310546875,-3.1806812286376953,-4.002139568328857,-3.0303027629852295,-3.722689390182495,-2.6463406085968018,-4.044424057006836,-3.372593641281128,-4.640075206756592,-5.106696605682373,-3.976959228515625,-4.233634948730469,-3.6614797115325928,-2.8445966243743896,-3.478219509124756,-3.6451568603515625,-1.869956612586975,-3.626356840133667,-3.6981101036071777,-3.66375470161438,-4.5737199783325195,-4.238084316253662,-4.095329284667969,-3.721956968307495,-3.7360341548919678,-3.4701881408691406,-2.2535059452056885,-2.474231481552124,-2.920705795288086,-3.0799672603607178,-3.3364431858062744,-5.092688083648682,-2.712639093399048,-3.174604892730713,-2.649034023284912,-3.6143922805786133,-3.929793119430542,-3.4626026153564453,-3.05537748336792,-3.3998053073883057,-3.9580419063568115,-3.5627834796905518,-3.2687675952911377,-4.13264799118042,-3.459958553314209,-5.055666923522949,-3.7266123294830322,-3.317023992538452,-4.740174293518066,-4.431121349334717,-2.2854413986206055,-3.3422248363494873,-4.421267986297607,-4.093379020690918,-3.572600841522217,-2.7976231575012207,-3.534785270690918,-4.390549182891846,-3.3538787364959717,-3.729994535446167,-4.085515022277832,-3.791597604751587,-4.524293899536133,-3.958314895629883,-3.9157605171203613,-3.5970029830932617,-4.2774553298950195,-3.8114116191864014,-3.72868275642395,-3.5973758697509766,-4.563242435455322,-4.097799777984619,-3.2841053009033203,-3.8824095726013184,-2.948845386505127,-3.453277349472046,-3.757582902908325,-3.0158183574676514,-3.5397894382476807,-3.324805498123169,-3.476311206817627,-4.180341720581055,-3.7244513034820557,-3.8753631114959717,-3.2520031929016113,-3.7184128761291504,-3.9359652996063232,-3.115755081176758,-4.650813102722168,-2.8292078971862793,-2.822126626968384,-3.9930403232574463,-3.6667702198028564,-4.584473133087158,-4.2449846267700195,-2.8932647705078125,-2.8469655513763428,-3.980858325958252,-4.9653520584106445,-4.125097274780273,-3.7096731662750244,-3.7022323608398438,-3.1391613483428955,-3.8440299034118652,-3.3633627891540527,-3.6962647438049316,-3.403735637664795,-3.3712785243988037,-3.7825002670288086,-3.9217684268951416,-3.2202370166778564,-3.9368975162506104,-3.6999192237854004,-2.8508410453796387,-3.7485735416412354,-3.989741086959839,-4.322898864746094,-3.0780527591705322,-4.071644306182861,-3.8597006797790527,-3.9732699394226074,-3.888094902038574,-3.690866231918335,-4.031498908996582,-3.9717040061950684,-3.730921983718872,-3.160763740539551,-3.709254026412964,-4.105042457580566,-3.302617311477661,-4.1161885261535645,-4.9849348068237305,-3.6484124660491943,-3.2966384887695312,-4.000332832336426,-3.502383232116699,-3.7582643032073975,-3.8501765727996826,-3.470968246459961,-3.572129011154175,-3.5330753326416016,-3.6926543712615967,-3.424786329269409,-3.937267541885376,-3.6690633296966553,-3.2964284420013428,-3.6483213901519775,-3.941934585571289,-3.724984884262085,-3.438201904296875,-3.3088161945343018,-3.847193479537964,-3.632012128829956,-3.507751703262329,-3.6718952655792236,-3.805764675140381,-3.715233564376831,-3.6875765323638916,-3.8958826065063477,-3.570549726486206,-3.749922513961792,-3.5816333293914795,-3.689645290374756,-3.5981342792510986,-3.7715601921081543,-3.4799749851226807,-3.7731058597564697,-3.8757271766662598,-3.735161304473877,-3.5787768363952637,-3.585528612136841,-3.490229845046997,-3.657270669937134,-3.7306253910064697],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-9.789095878601074,-12.362283706665039,-12.585768699645996,-12.828444480895996,-10.75062084197998,-9.920994758605957,-11.40302848815918,-10.528397560119629,-11.290746688842773,-9.883021354675293,-10.044102668762207,-10.764655113220215,-11.036927223205566,-11.521190643310547,-11.407833099365234,-9.70959186553955,-10.536728858947754,-8.04806900024414,-12.680559158325195,-11.018533706665039,-9.60473346710205,-12.353851318359375,-11.16597843170166,-14.921163558959961,-11.210343360900879,-9.908323287963867,-11.891547203063965,-11.511687278747559,-9.992476463317871,-8.937873840332031,-10.90017318725586,-8.702479362487793,-10.717360496520996,-10.880701065063477,-11.84139347076416,-9.71937084197998,-10.667430877685547,-11.402710914611816,-11.738048553466797,-10.588273048400879,-10.993817329406738,-10.819095611572266,-13.36093521118164,-12.53370189666748,-10.265341758728027,-9.698494911193848,-11.892742156982422,-12.652471542358398,-10.920615196228027,-12.053348541259766,-10.977462768554688,-10.990866661071777,-9.564226150512695,-11.606375694274902,-9.963486671447754,-10.359207153320312,-9.644524574279785,-10.719406127929688,-10.310683250427246,-10.987314224243164,-10.620890617370605,-12.487377166748047,-9.995197296142578,-11.147343635559082,-10.571634292602539,-10.787886619567871,-10.816810607910156,-11.667088508605957,-11.780511856079102,-11.166909217834473,-10.717363357543945,-10.353935241699219,-10.719281196594238,-9.037405014038086,-11.682791709899902,-10.128437995910645,-10.174494743347168,-10.30439567565918,-12.298747062683105,-11.696255683898926,-9.91281509399414,-12.00465202331543,-9.777507781982422,-12.06704330444336,-10.186394691467285,-10.356671333312988,-10.699182510375977,-11.39316177368164,-10.727703094482422,-11.526259422302246,-9.623666763305664,-11.080554962158203,-11.087416648864746,-11.47153091430664,-9.973274230957031,-10.40908432006836,-11.745697975158691,-11.722234725952148,-10.67536735534668,-11.20340633392334,-10.269994735717773,-10.114912033081055,-11.95181655883789,-11.274659156799316,-10.516800880432129,-10.783034324645996,-13.137325286865234,-11.456426620483398,-10.550223350524902,-12.338860511779785,-10.314030647277832,-11.139427185058594,-12.70394515991211,-9.861783027648926,-11.176132202148438,-12.549424171447754,-10.579172134399414,-11.421287536621094,-10.143562316894531,-11.151921272277832,-10.963699340820312,-10.463582992553711,-10.89553451538086,-11.974753379821777,-10.677350044250488,-10.667930603027344,-10.89699935913086,-9.336453437805176,-13.344924926757812,-10.02199649810791,-10.096763610839844,-10.519549369812012,-11.831743240356445,-9.542383193969727,-10.460620880126953,-11.410981178283691,-11.101222038269043,-11.392091751098633,-11.176243782043457,-11.087210655212402,-11.23570728302002,-11.516810417175293,-11.391351699829102,-10.331501007080078,-10.74176025390625,-11.99860668182373,-11.458206176757812,-11.110790252685547,-11.47612190246582,-10.902559280395508,-11.400425910949707,-11.119588851928711,-10.973801612854004,-10.513717651367188,-10.352911949157715,-10.642792701721191,-10.720237731933594,-11.445245742797852,-9.860758781433105,-11.123234748840332,-10.534562110900879,-10.966736793518066,-10.868577003479004,-10.761655807495117,-10.420315742492676,-10.604784965515137,-10.685188293457031,-10.77191162109375,-10.971671104431152,-11.05780029296875,-10.907073020935059,-11.265007972717285,-9.987434387207031,-11.571605682373047,-9.236966133117676,-10.48198127746582,-11.356206893920898,-11.922248840332031,-11.030082702636719,-10.0689058303833,-10.723233222961426,-10.79261589050293,-9.270634651184082,-10.78127670288086,-10.661654472351074,-10.580376625061035,-11.228937149047852,-10.324755668640137,-11.09002685546875,-11.693111419677734,-11.340631484985352,-10.727446556091309,-10.53073501586914,-11.143949508666992,-11.381168365478516,-11.087671279907227,-8.76567268371582,-10.764653205871582,-11.098657608032227,-10.782291412353516,-11.618733406066895,-11.11782169342041,-10.464008331298828,-10.594635963439941,-11.666902542114258,-10.491697311401367,-11.187479019165039,-10.771236419677734,-10.789454460144043,-11.070845603942871,-10.582647323608398,-11.828587532043457,-10.626897811889648,-11.578701972961426,-10.848298072814941,-11.076336860656738,-10.916592597961426,-11.118430137634277,-10.989631652832031,-11.258846282958984,-10.684499740600586,-10.850818634033203,-11.389147758483887,-10.82116985321045,-10.963916778564453,-10.854416847229004,-10.087437629699707,-10.797329902648926,-11.151338577270508,-10.878084182739258,-11.162416458129883,-10.556023597717285,-10.839323043823242,-9.856878280639648,-11.124115943908691,-10.978493690490723,-10.741665840148926,-11.165657997131348,-10.938053131103516,-11.106034278869629,-11.080567359924316,-11.031280517578125,-11.19306755065918,-10.932517051696777,-10.963388442993164,-10.990910530090332,-11.04703140258789,-10.690226554870605,-10.88012981414795,-10.991724014282227],"y":[23.966825485229492,24.079408645629883,23.927120208740234,23.680309295654297,25.12744903564453,22.98078727722168,24.366191864013672,23.915252685546875,21.675291061401367,23.891653060913086,25.173736572265625,23.054506301879883,22.119115829467773,24.58823013305664,24.616098403930664,23.89458656311035,23.611711502075195,21.829103469848633,24.37544059753418,22.254005432128906,25.79536247253418,25.269495010375977,24.002445220947266,22.0123348236084,23.733118057250977,25.751739501953125,21.897531509399414,23.702119827270508,24.40319061279297,23.84770393371582,25.476619720458984,24.622182846069336,24.598737716674805,23.94852638244629,24.563732147216797,24.70409393310547,23.383995056152344,23.53704071044922,23.53309440612793,24.342609405517578,21.556840896606445,24.342391967773438,23.267868041992188,22.431703567504883,22.014244079589844,24.77771759033203,22.21570587158203,26.02638816833496,22.070016860961914,25.404361724853516,24.207670211791992,24.571840286254883,22.779897689819336,24.164575576782227,23.773754119873047,23.567142486572266,22.282093048095703,23.61897087097168,22.976146697998047,24.367605209350586,23.833812713623047,25.710939407348633,22.0891056060791,21.27623176574707,25.06484603881836,23.583925247192383,23.913393020629883,24.557098388671875,24.91767692565918,22.460657119750977,22.804672241210938,23.506183624267578,24.1158447265625,24.532955169677734,25.26508331298828,24.521255493164062,24.06011962890625,23.34864616394043,24.793806076049805,24.16074562072754,23.16758918762207,23.274608612060547,23.794538497924805,22.105234146118164,24.718236923217773,24.03252410888672,24.29155731201172,24.641401290893555,22.590879440307617,23.03078269958496,23.08011245727539,22.85118293762207,23.566009521484375,22.909164428710938,23.54930305480957,24.48246192932129,24.072052001953125,21.72920799255371,25.148672103881836,24.045717239379883,24.910242080688477,23.63298988342285,24.958690643310547,23.43285369873047,23.409442901611328,22.689380645751953,23.423812866210938,24.58147621154785,23.43828773498535,22.566383361816406,21.485721588134766,24.48480987548828,23.722278594970703,24.235212326049805,24.520029067993164,24.37144660949707,22.773481369018555,21.45241928100586,22.819618225097656,24.227937698364258,24.014646530151367,24.494020462036133,22.410667419433594,24.24073600769043,22.94179916381836,23.469039916992188,23.341468811035156,22.911588668823242,23.17357635498047,22.343544006347656,23.704757690429688,24.16924285888672,23.266633987426758,23.206890106201172,24.00045394897461,23.701011657714844,24.2308406829834,23.538782119750977,23.032991409301758,24.402019500732422,24.023332595825195,25.317520141601562,23.983413696289062,24.447933197021484,24.291202545166016,23.610727310180664,23.81656265258789,23.475004196166992,24.253753662109375,24.138269424438477,23.931896209716797,24.090864181518555,23.79489517211914,22.91057014465332,24.064544677734375,24.27914810180664,23.27219009399414,24.59073829650879,23.620887756347656,22.80710220336914,22.259008407592773,24.191417694091797,24.662626266479492,23.27168083190918,23.20813751220703,24.00381088256836,24.565887451171875,23.55835723876953,23.72522735595703,23.19597816467285,22.290111541748047,24.05689811706543,23.514673233032227,24.298227310180664,22.45409393310547,23.964967727661133,23.8855037689209,23.554920196533203,23.73101806640625,23.743728637695312,23.980674743652344,22.951364517211914,22.786474227905273,23.37244415283203,24.11642837524414,23.431930541992188,23.338552474975586,23.365758895874023,23.568143844604492,23.122859954833984,23.719024658203125,23.57242774963379,23.072673797607422,23.77391242980957,23.955429077148438,23.166112899780273,22.358612060546875,23.59843635559082,22.472204208374023,23.908300399780273,22.409210205078125,22.32253074645996,23.119184494018555,23.604801177978516,24.351654052734375,23.542322158813477,23.38577651977539,24.014402389526367,23.82103729248047,23.775148391723633,23.66321563720703,22.079805374145508,23.43280792236328,24.297590255737305,24.507535934448242,23.618318557739258,23.31307029724121,23.972917556762695,23.522058486938477,23.1903076171875,23.179664611816406,23.787126541137695,24.141904830932617,23.298398971557617,23.962221145629883,22.96798324584961,23.36862564086914,23.844449996948242,23.55883026123047,23.555030822753906,23.453218460083008,23.826007843017578,23.60999298095703,24.636383056640625,23.919857025146484,23.588985443115234,24.11513900756836,23.05638313293457,23.84822654724121,23.291458129882812,23.80386734008789,23.507061004638672,23.437393188476562,23.983081817626953,23.805416107177734,23.531335830688477,23.866973876953125,23.855100631713867,23.50722885131836,23.77183723449707],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-24.567899703979492,-27.297517776489258,-28.491470336914062,-27.935680389404297,-27.370088577270508,-28.245206832885742,-26.779512405395508,-26.392580032348633,-29.422422409057617,-26.422744750976562,-27.517749786376953,-27.322221755981445,-27.987916946411133,-28.304533004760742,-27.281522750854492,-27.058034896850586,-27.6694278717041,-27.776065826416016,-27.23577308654785,-28.16780662536621,-29.05293846130371,-27.757509231567383,-26.611888885498047,-27.539588928222656,-27.361032485961914,-27.88942527770996,-28.522260665893555,-29.581050872802734,-27.627946853637695,-27.460630416870117,-27.806602478027344,-26.828678131103516,-29.40070152282715,-25.957786560058594,-29.01288414001465,-26.684825897216797,-26.75334930419922,-27.912811279296875,-29.019197463989258,-26.93934440612793,-26.676895141601562,-28.458776473999023,-28.928184509277344,-26.820104598999023,-25.713424682617188,-29.021469116210938,-28.545568466186523,-28.353775024414062,-27.637052536010742,-27.215656280517578,-27.05596923828125,-30.02147102355957,-27.98442268371582,-29.3592472076416,-27.679203033447266,-26.797842025756836,-29.00535011291504,-23.813919067382812,-27.552021026611328,-27.883943557739258,-27.90589714050293,-27.891244888305664,-27.550477981567383,-28.024372100830078,-28.287874221801758,-28.666969299316406,-28.4713191986084,-28.717464447021484,-27.952669143676758,-28.489639282226562,-28.03304100036621,-27.03251838684082,-28.963214874267578,-29.359806060791016,-27.64179801940918,-26.769298553466797,-30.04457664489746,-24.987646102905273,-26.53946304321289,-28.12785530090332,-26.16693687438965,-28.976404190063477,-28.04770278930664,-28.177692413330078,-28.881593704223633,-28.692581176757812,-29.058210372924805,-27.496845245361328,-27.620866775512695,-28.30196189880371,-28.38141632080078,-29.00391387939453,-27.888322830200195,-28.18653678894043,-28.060083389282227,-28.118684768676758,-28.453128814697266,-25.348976135253906,-27.382841110229492,-28.639867782592773,-28.759626388549805,-28.042692184448242,-27.598838806152344,-27.667362213134766,-27.811843872070312,-29.891958236694336,-28.352415084838867,-28.19750213623047,-27.91277313232422,-28.91101837158203,-27.2081298828125,-28.55121421813965,-27.6107120513916,-29.225759506225586,-28.789823532104492,-27.5969295501709,-28.615188598632812,-28.604427337646484,-25.14820098876953,-28.950206756591797,-27.158201217651367,-28.289810180664062,-23.892690658569336,-27.816667556762695,-25.327863693237305,-27.689868927001953,-26.256887435913086,-28.574771881103516,-27.295223236083984,-28.746109008789062,-27.37464141845703,-28.527008056640625,-28.185001373291016,-27.841917037963867,-25.10735321044922,-27.82244873046875,-28.13540267944336,-28.418296813964844,-27.597335815429688,-28.682470321655273,-27.04189109802246,-28.435983657836914,-29.68808364868164,-28.655546188354492,-27.915307998657227,-28.766557693481445,-27.884422302246094,-28.14261817932129,-27.923322677612305,-21.697010040283203,-29.037723541259766,-26.350727081298828,-28.303749084472656,-28.3326358795166,-27.64985466003418,-29.756324768066406,-28.604127883911133,-27.708913803100586,-27.926128387451172,-27.789634704589844,-28.23297691345215,-28.094160079956055,-28.218460083007812,-28.272214889526367,-27.27002716064453,-25.919647216796875,-28.73795509338379,-26.957916259765625,-27.183948516845703,-27.767087936401367,-26.62787628173828,-28.189260482788086,-28.584787368774414,-27.527992248535156,-27.53451919555664,-28.0666561126709,-28.23104476928711,-27.801149368286133,-28.04048728942871,-27.19641876220703,-27.568025588989258,-28.865882873535156,-27.114151000976562,-25.842805862426758,-28.3187313079834,-28.088706970214844,-26.36945343017578,-28.015869140625,-28.38758659362793,-27.467832565307617,-24.305578231811523,-27.659215927124023,-27.97580337524414,-27.39250946044922,-27.732154846191406,-25.99289321899414,-27.886947631835938,-28.095632553100586,-27.501949310302734,-28.233884811401367,-27.69152069091797,-27.87120819091797,-28.268993377685547,-28.22380828857422,-27.425390243530273,-27.79781150817871,-28.15054702758789,-28.454803466796875,-27.69318962097168,-28.132627487182617,-25.961393356323242,-28.145402908325195,-28.219295501708984,-27.959938049316406,-27.753854751586914,-27.947412490844727,-28.07257080078125,-28.141403198242188,-27.492177963256836,-27.92739486694336,-27.935503005981445,-26.342288970947266,-27.963163375854492,-27.452037811279297,-27.776395797729492,-27.96174430847168,-27.712451934814453,-27.808551788330078,-27.903095245361328,-27.859834671020508,-27.685794830322266,-28.479461669921875,-28.117389678955078,-28.06864356994629,-27.59918975830078,-27.85634994506836,-27.775100708007812,-27.833723068237305,-27.625919342041016,-28.054058074951172,-27.665796279907227,-28.165687561035156,-28.001955032348633,-27.9389705657959,-27.80472755432129,-27.983003616333008,-27.884206771850586,-27.936227798461914,-27.913530349731445,-27.708532333374023],"y":[-25.290395736694336,-26.824071884155273,-28.276113510131836,-25.078330993652344,-26.736873626708984,-27.121156692504883,-25.58614158630371,-26.517196655273438,-29.32086944580078,-26.31177520751953,-26.340208053588867,-27.962785720825195,-28.282684326171875,-27.44583511352539,-28.456310272216797,-26.827051162719727,-25.809555053710938,-27.914201736450195,-25.058547973632812,-26.6747989654541,-28.02735137939453,-26.083335876464844,-27.0306453704834,-25.50469398498535,-27.072246551513672,-26.656234741210938,-25.997821807861328,-24.92127799987793,-26.649255752563477,-26.278852462768555,-25.730091094970703,-26.423961639404297,-27.827268600463867,-27.652252197265625,-25.5200138092041,-26.737504959106445,-24.988910675048828,-27.712085723876953,-26.420745849609375,-26.729965209960938,-27.608478546142578,-26.176605224609375,-26.423254013061523,-27.883188247680664,-25.980581283569336,-27.540939331054688,-25.650968551635742,-25.45500373840332,-28.27558135986328,-26.264387130737305,-27.27712631225586,-27.500850677490234,-26.916122436523438,-26.63211441040039,-26.363752365112305,-26.91047477722168,-26.997896194458008,-26.38995361328125,-26.259681701660156,-26.427703857421875,-26.515926361083984,-27.118276596069336,-25.550153732299805,-26.817062377929688,-27.748079299926758,-25.75467300415039,-26.99848747253418,-26.04961395263672,-27.306333541870117,-26.1061954498291,-26.304658889770508,-27.00740623474121,-26.408178329467773,-25.147979736328125,-27.909271240234375,-26.764671325683594,-26.70431137084961,-25.999462127685547,-26.081335067749023,-26.215795516967773,-27.08349609375,-26.829479217529297,-28.034297943115234,-26.84642219543457,-25.35309410095215,-25.661327362060547,-27.482711791992188,-26.008285522460938,-25.4251651763916,-27.22408103942871,-26.197525024414062,-26.016368865966797,-25.637540817260742,-26.67024040222168,-27.174304962158203,-26.451658248901367,-25.613849639892578,-26.674945831298828,-26.094379425048828,-26.419763565063477,-26.947542190551758,-25.722867965698242,-26.292715072631836,-25.946544647216797,-26.78369903564453,-26.387147903442383,-26.665630340576172,-25.654319763183594,-26.67415428161621,-27.964384078979492,-25.693761825561523,-25.43251609802246,-27.88033676147461,-26.511533737182617,-27.619937896728516,-26.315540313720703,-26.558914184570312,-27.350412368774414,-28.021533966064453,-27.714513778686523,-26.431779861450195,-25.820720672607422,-28.052804946899414,-26.486886978149414,-27.072200775146484,-26.12295150756836,-26.762069702148438,-27.342342376708984,-26.393348693847656,-27.205196380615234,-27.591495513916016,-26.979825973510742,-27.434627532958984,-25.989307403564453,-27.50461769104004,-26.785526275634766,-26.489248275756836,-27.075122833251953,-25.734722137451172,-26.22608757019043,-26.510910034179688,-25.98964500427246,-29.30217170715332,-27.550539016723633,-26.47120475769043,-26.40778160095215,-26.496301651000977,-27.39670181274414,-26.8837890625,-27.916709899902344,-26.32978057861328,-26.584468841552734,-26.60011100769043,-26.08462905883789,-26.6070613861084,-25.913833618164062,-25.88052749633789,-27.41106414794922,-26.737398147583008,-27.123027801513672,-26.744140625,-26.640766143798828,-26.797035217285156,-26.105382919311523,-26.912761688232422,-27.12228775024414,-25.594501495361328,-25.995012283325195,-25.983613967895508,-27.247055053710938,-26.465240478515625,-26.63617515563965,-27.61652374267578,-27.17640495300293,-26.60959815979004,-26.523822784423828,-26.98194694519043,-26.65260124206543,-26.543142318725586,-25.496623992919922,-26.19875717163086,-26.25902557373047,-27.078025817871094,-27.2502384185791,-26.640625,-25.379867553710938,-26.97014045715332,-26.158220291137695,-26.16280746459961,-27.571239471435547,-27.484718322753906,-26.668798446655273,-26.311988830566406,-26.499818801879883,-26.564268112182617,-26.937219619750977,-26.259885787963867,-25.899818420410156,-26.635318756103516,-26.730266571044922,-26.845224380493164,-26.227685928344727,-26.29410743713379,-26.43816566467285,-26.568157196044922,-26.445411682128906,-26.798233032226562,-26.75946617126465,-26.53047752380371,-26.327146530151367,-26.910184860229492,-27.16205406188965,-26.499914169311523,-26.806007385253906,-26.4575138092041,-26.196134567260742,-27.00251579284668,-26.671001434326172,-26.732755661010742,-26.79030990600586,-26.42131996154785,-26.456396102905273,-26.40774917602539,-26.65337371826172,-26.653196334838867,-26.658531188964844,-26.72106170654297,-26.816003799438477,-26.45838737487793,-26.817358016967773,-26.962400436401367,-26.84772300720215,-27.396629333496094,-26.716781616210938,-26.882152557373047,-26.928956985473633,-26.363039016723633,-26.76445198059082,-26.720718383789062,-26.87340545654297,-26.39309310913086,-26.615760803222656,-26.333087921142578,-26.677522659301758,-27.12212371826172,-26.803646087646484,-26.76323699951172,-26.661182403564453,-26.607742309570312,-26.752553939819336],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[21.702043533325195,19.209863662719727,20.402679443359375,20.136873245239258,21.020463943481445,20.545520782470703,17.67682647705078,22.605239868164062,21.007795333862305,20.005273818969727,17.7930965423584,21.838729858398438,20.907285690307617,22.169885635375977,20.286916732788086,20.69813346862793,21.169837951660156,21.90694236755371,20.258100509643555,21.238466262817383,20.582582473754883,20.2355899810791,19.634729385375977,19.355083465576172,20.207969665527344,21.278470993041992,21.942581176757812,22.14996337890625,22.15140151977539,20.397117614746094,21.969919204711914,17.55742645263672,21.474782943725586,20.255361557006836,21.073650360107422,20.82221221923828,20.240184783935547,20.800039291381836,20.03453826904297,21.020822525024414,21.539987564086914,23.11471939086914,20.369115829467773,21.668718338012695,20.972078323364258,20.420387268066406,20.956239700317383,21.718786239624023,21.49827003479004,22.043304443359375,20.603288650512695,21.590641021728516,22.15505599975586,20.191320419311523,22.58964729309082,21.77264976501465,19.51311492919922,19.522850036621094,20.60936737060547,21.323060989379883,21.300565719604492,20.133424758911133,20.493803024291992,21.0869083404541,21.204423904418945,21.165054321289062,21.09200096130371,20.646678924560547,20.43608283996582,18.800395965576172,19.532047271728516,20.18128204345703,20.359729766845703,21.158323287963867,21.171316146850586,20.907556533813477,20.901981353759766,20.790395736694336,20.925798416137695,20.818449020385742,21.108190536499023,20.936717987060547,23.367895126342773,21.434947967529297,21.54805564880371,20.565631866455078,20.686534881591797,20.9017391204834,20.722789764404297,20.915924072265625,21.02842140197754,21.181293487548828,21.122085571289062,19.669029235839844,21.826045989990234,21.0568790435791,21.243534088134766,21.707304000854492,21.399187088012695,21.170148849487305,17.387659072875977,20.90929412841797,19.965944290161133,20.247961044311523,20.699329376220703,20.979053497314453,19.887531280517578,20.662330627441406,21.17765998840332,20.237590789794922,20.764944076538086,20.96727180480957,19.39455223083496,20.604841232299805,20.238136291503906,20.103940963745117,21.569284439086914,21.188432693481445,20.926116943359375,21.12542724609375,20.85068130493164,21.580047607421875,19.994823455810547,20.52097511291504,20.347551345825195,21.270944595336914,21.846708297729492,20.024097442626953,20.772798538208008,18.799232482910156,21.653522491455078,20.495452880859375,20.19554901123047,20.825042724609375,19.716230392456055,19.47904396057129,20.005950927734375,20.067567825317383,20.571775436401367,21.117708206176758,21.359535217285156,21.320823669433594,20.534360885620117,20.599302291870117,20.248855590820312,21.647790908813477,20.684263229370117,20.781557083129883,21.566614151000977,20.664993286132812,20.6697998046875,19.82581901550293,21.311565399169922,20.995492935180664,19.51365089416504,19.770723342895508,21.13519287109375,21.06499671936035,20.93023681640625,20.99966812133789,20.479684829711914,20.688217163085938,20.811077117919922,20.456119537353516,21.86306381225586,20.908302307128906,22.19599151611328,20.21554946899414,20.718284606933594,19.673553466796875,20.534120559692383,20.83536148071289,21.1867733001709,20.8980712890625,21.847076416015625,20.620134353637695,20.571800231933594,20.153785705566406,21.11227035522461,20.501169204711914,21.043182373046875,20.427227020263672,20.051856994628906,21.273080825805664,20.269018173217773,20.95821189880371,20.719024658203125,20.454347610473633,20.725975036621094,20.88750648498535,20.65053367614746,20.4240665435791,20.989824295043945,20.909931182861328,21.1790714263916,21.076534271240234,20.61173439025879,20.80436897277832,21.04065704345703,20.89278793334961,20.625831604003906,20.7169189453125,20.916784286499023,20.868854522705078,20.595718383789062,20.766496658325195,20.444223403930664,20.686262130737305,20.578542709350586,20.421415328979492,20.75779151916504,21.111421585083008,20.8075008392334,20.6682071685791,21.6026554107666,20.554601669311523,20.87495231628418,20.812000274658203,21.021263122558594,21.076641082763672,20.695507049560547,20.782550811767578,20.685447692871094,21.101787567138672,20.3907470703125,20.887449264526367,20.937646865844727,20.889291763305664,20.71009635925293,20.890565872192383,20.397783279418945,21.047821044921875,20.62407684326172,21.157129287719727,20.767349243164062,20.81517219543457,20.59541893005371,20.7391300201416,20.56178092956543,20.641279220581055,20.693918228149414,21.007814407348633,20.687166213989258,20.79237174987793,20.710813522338867,20.82704734802246,21.152250289916992,20.809722900390625,20.651371002197266,20.871131896972656],"y":[16.617189407348633,16.99505043029785,17.33669662475586,16.737882614135742,18.32146453857422,19.630573272705078,18.54253578186035,16.182933807373047,18.227075576782227,17.017017364501953,18.226181030273438,17.394681930541992,17.189682006835938,16.51311492919922,17.812700271606445,18.108400344848633,17.578582763671875,17.24732208251953,17.64034652709961,17.25701332092285,15.748921394348145,16.91305160522461,15.660053253173828,17.64255714416504,17.529781341552734,17.620492935180664,17.2040958404541,16.503259658813477,17.41338348388672,16.989179611206055,16.075763702392578,17.764738082885742,17.347139358520508,16.684734344482422,18.197057723999023,17.363737106323242,18.37114906311035,17.108264923095703,18.041677474975586,17.03494644165039,16.930522918701172,16.82039451599121,17.543060302734375,16.62359046936035,18.433719635009766,17.753372192382812,16.670440673828125,17.159025192260742,17.339250564575195,18.317110061645508,17.384492874145508,17.016489028930664,16.96968650817871,17.850021362304688,18.131052017211914,17.358577728271484,17.495996475219727,17.05775260925293,17.156169891357422,17.319250106811523,18.460376739501953,18.176746368408203,17.04179573059082,17.081836700439453,17.247055053710938,17.714906692504883,17.783432006835938,17.064512252807617,16.942256927490234,17.080854415893555,17.405298233032227,17.99527931213379,17.362396240234375,16.96133804321289,17.231983184814453,17.51410675048828,17.244495391845703,15.538435935974121,17.396793365478516,17.721363067626953,17.41887664794922,16.592233657836914,18.43243408203125,17.203893661499023,16.670093536376953,17.40381622314453,17.167240142822266,16.95830726623535,17.316064834594727,16.626949310302734,17.359210968017578,16.90545654296875,17.476213455200195,18.63785743713379,17.412965774536133,17.0976619720459,17.054637908935547,17.260009765625,17.068775177001953,17.13429069519043,17.616147994995117,17.102001190185547,16.421180725097656,16.69832420349121,17.693174362182617,18.101987838745117,18.49143409729004,17.850915908813477,17.37229347229004,18.48222541809082,17.3702335357666,17.49410629272461,17.575817108154297,17.677461624145508,17.56450843811035,17.510452270507812,17.42876434326172,17.45536994934082,17.3182315826416,17.37775421142578,17.15898895263672,17.03940200805664,18.856691360473633,17.526670455932617,16.992206573486328,16.26041603088379,16.71247673034668,16.967411041259766,17.02515983581543,17.08441925048828,16.03302764892578,17.827072143554688,18.001697540283203,17.500469207763672,16.85477066040039,17.60211181640625,17.951248168945312,17.627647399902344,17.422687530517578,17.16753387451172,17.107418060302734,17.246469497680664,17.528627395629883,17.614696502685547,17.604629516601562,16.639734268188477,17.13957405090332,17.5505313873291,17.219572067260742,16.959651947021484,17.29033851623535,17.62150764465332,16.741086959838867,16.727624893188477,17.691728591918945,16.866605758666992,17.25912857055664,17.077302932739258,16.947078704833984,17.086639404296875,17.471996307373047,16.99431610107422,17.38109016418457,17.470022201538086,17.48491096496582,17.343364715576172,17.65127944946289,18.039100646972656,17.138072967529297,18.042869567871094,17.348234176635742,17.31548309326172,17.577621459960938,17.12301254272461,17.361141204833984,17.201730728149414,17.27201271057129,17.878746032714844,17.763086318969727,17.833179473876953,17.336273193359375,17.545963287353516,17.139307022094727,17.17229461669922,17.55111312866211,17.371185302734375,17.239770889282227,17.65629768371582,17.110326766967773,17.927505493164062,16.154640197753906,17.241455078125,17.13549041748047,17.526689529418945,17.244476318359375,17.144107818603516,17.246501922607422,17.385517120361328,17.294212341308594,17.292734146118164,16.923372268676758,17.234243392944336,17.208330154418945,17.14756965637207,17.420330047607422,17.545522689819336,17.165042877197266,17.276430130004883,17.674972534179688,17.141733169555664,17.180286407470703,17.14375877380371,17.38277244567871,16.833749771118164,17.410518646240234,17.518287658691406,17.742019653320312,17.80024528503418,17.419418334960938,17.93463706970215,17.644540786743164,17.422473907470703,17.30970573425293,17.453350067138672,17.424232482910156,17.31258773803711,17.25029945373535,17.480989456176758,17.334068298339844,17.24028778076172,17.375463485717773,17.143680572509766,17.28766632080078,16.98453712463379,17.366724014282227,16.838119506835938,17.08017349243164,17.455516815185547,17.297950744628906,17.315940856933594,17.273847579956055,17.40574836730957,17.265884399414062,17.29840087890625,17.38568687438965,17.27043914794922,17.27317237854004,17.3194580078125,17.13003158569336,17.478487014770508],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-34.27167510986328,-33.436885833740234,-33.67157745361328,-35.42924880981445,-33.6185302734375,-33.575958251953125,-32.83479309082031,-34.47975158691406,-34.351097106933594,-32.76370620727539,-33.37736511230469,-33.94854736328125,-34.47283935546875,-32.25503158569336,-33.97500228881836,-33.622501373291016,-32.904842376708984,-33.62049102783203,-34.24639129638672,-35.92761993408203,-33.4228401184082,-34.468772888183594,-33.426082611083984,-32.68428039550781,-33.26957702636719,-33.913299560546875,-35.30644226074219,-34.824562072753906,-34.29085922241211,-33.973873138427734,-32.900482177734375,-33.43743133544922,-34.49182891845703,-34.49750518798828,-32.886138916015625,-33.93254852294922,-35.6706428527832,-32.03490447998047,-32.2762451171875,-34.32441329956055,-34.787025451660156,-34.08979797363281,-35.23066711425781,-34.51014709472656,-33.757232666015625,-32.748233795166016,-32.100502014160156,-35.614994049072266,-33.245941162109375,-34.921321868896484,-34.34077072143555,-34.02733612060547,-32.45103073120117,-33.43674850463867,-33.97217559814453,-34.09820556640625,-33.681678771972656,-32.55179977416992,-33.82107925415039,-31.14276695251465,-33.81962203979492,-34.501014709472656,-32.01334762573242,-33.78696060180664,-34.2928352355957,-34.845157623291016,-31.950281143188477,-34.3811149597168,-33.27903366088867,-33.343441009521484,-34.193756103515625,-33.327632904052734,-33.668907165527344,-35.39052963256836,-33.93120574951172,-33.85635757446289,-33.50675582885742,-34.38510513305664,-33.67814254760742,-32.56126022338867,-31.261581420898438,-33.367862701416016,-33.25043869018555,-35.248016357421875,-33.588863372802734,-34.36772155761719,-33.59404373168945,-34.258689880371094,-33.417518615722656,-33.66694259643555,-32.21548843383789,-35.055015563964844,-32.85704040527344,-33.786170959472656,-33.229461669921875,-33.66560745239258,-33.81630325317383,-32.83315658569336,-33.36359786987305,-33.182220458984375,-33.113155364990234,-33.402278900146484,-33.659149169921875,-32.99982833862305,-32.9214973449707,-34.447086334228516,-33.71620559692383,-34.10477828979492,-33.451656341552734,-32.848323822021484,-33.45805358886719,-33.68470001220703,-34.02739715576172,-33.7822151184082,-33.391754150390625,-33.40453338623047,-33.363800048828125,-34.28951644897461,-32.66130447387695,-32.884239196777344,-33.884307861328125,-33.75777053833008,-33.98991012573242,-32.985557556152344,-34.53352355957031,-34.32420349121094,-34.255802154541016,-34.8285026550293,-33.284236907958984,-34.526206970214844,-33.971458435058594,-33.2424201965332,-33.80799865722656,-34.05721664428711,-34.91712951660156,-34.45640182495117,-33.686946868896484,-34.11933135986328,-33.82475280761719,-33.688323974609375,-34.27741622924805,-33.64559555053711,-33.51026916503906,-34.28962326049805,-33.93864059448242,-34.31269836425781,-33.280052185058594,-34.105308532714844,-34.310489654541016,-33.95145034790039,-34.14643859863281,-34.031700134277344,-33.38157653808594,-34.1347541809082,-33.56144714355469,-33.512550354003906,-34.24869155883789,-33.6333122253418,-34.41741943359375,-35.483238220214844,-33.838680267333984,-32.9748420715332,-33.00198745727539,-33.81071472167969,-33.2594108581543,-34.061622619628906,-33.43306350708008,-33.25465774536133,-33.751800537109375,-34.433677673339844,-33.5931510925293,-33.38970947265625,-35.589996337890625,-33.52055740356445,-33.484893798828125,-34.14595413208008,-33.54468536376953,-34.91039276123047,-33.86124038696289,-34.24863052368164,-33.599891662597656,-32.880279541015625,-34.768226623535156,-33.5197639465332,-33.87849426269531,-33.56965637207031,-33.78291320800781,-34.15882873535156,-34.41487503051758,-34.484161376953125,-34.05845260620117,-34.129844665527344,-33.777610778808594,-33.839473724365234,-33.979923248291016,-33.224586486816406,-33.303184509277344,-33.98952102661133,-34.28582000732422,-33.5259895324707,-34.361324310302734,-33.521026611328125,-33.827571868896484,-33.88479232788086,-33.399051666259766,-33.8939094543457,-33.99850845336914,-33.68947982788086,-33.76087951660156,-33.666908264160156,-33.61012268066406,-32.92774963378906,-33.7101936340332,-33.976802825927734,-33.72754669189453,-34.00192642211914,-33.95659637451172,-34.005218505859375,-33.633888244628906,-34.04145431518555,-33.3445930480957,-34.13026428222656,-34.45111846923828,-34.786842346191406,-33.72952651977539,-33.651275634765625,-33.5921630859375,-33.00328826904297,-33.86701583862305,-33.412837982177734,-34.12955856323242,-33.85353088378906,-34.08280944824219,-34.00770568847656,-34.1708984375,-33.30230712890625,-33.08598709106445,-33.95659637451172,-34.05536651611328,-33.965126037597656,-33.19945526123047,-33.83991622924805,-33.73253631591797,-33.66507339477539,-33.65591049194336,-33.758155822753906,-34.052547454833984,-33.2591667175293,-33.64998245239258,-33.58061218261719],"y":[-1.3364434242248535,-1.45102059841156,-3.056312322616577,-0.6289229989051819,-0.7474259734153748,-1.2986592054367065,-0.8777238130569458,-1.9944450855255127,-0.7659304738044739,-2.2892606258392334,-0.5696747899055481,-1.431046485900879,-1.8053412437438965,-0.6826369166374207,-2.793419361114502,-1.513646125793457,-0.44070303440093994,-1.1046991348266602,-1.4941223859786987,-0.8112407922744751,-1.4864425659179688,-0.18576078116893768,-2.0151398181915283,-1.1122586727142334,-1.899965524673462,-0.16182076930999756,-0.19625693559646606,-0.3685072064399719,-1.9124641418457031,-1.558745265007019,-1.5904864072799683,-0.3287651538848877,-0.10921446979045868,-1.1826186180114746,-2.0714266300201416,-1.0601030588150024,-1.0690515041351318,-1.0125292539596558,-0.9594082236289978,-2.4538052082061768,-0.8135329484939575,-0.9905463457107544,-2.468886137008667,-0.8413410186767578,-2.4980123043060303,-0.7119110822677612,-2.3883862495422363,-0.5338624119758606,0.05894225090742111,-0.6542631983757019,-1.4643526077270508,-2.97706937789917,-2.89145827293396,-0.8476855754852295,-2.134591817855835,-1.7922446727752686,-0.5696166753768921,-1.7595211267471313,-1.103864073753357,-0.5480334162712097,-2.6800537109375,-0.09746628254652023,-0.5379012227058411,-1.0775736570358276,-0.7635955214500427,-1.7366620302200317,-4.481472492218018,-1.1314055919647217,-1.4256303310394287,-0.021203573793172836,-0.8596348762512207,-1.5446844100952148,-1.5442662239074707,-1.2420045137405396,-0.33934280276298523,-2.304572582244873,-0.5304762125015259,-1.6148329973220825,-2.853926420211792,-1.6494842767715454,-0.6847352981567383,-2.5007808208465576,-1.15120530128479,-0.5541464686393738,-1.3336845636367798,-1.5490739345550537,-1.677236795425415,-1.3350355625152588,-1.2462025880813599,-2.11963152885437,-1.4211009740829468,-2.207531452178955,-4.118685245513916,-1.8561198711395264,-1.037472128868103,-1.61720871925354,-1.6007660627365112,-1.6267606019973755,-1.7592896223068237,-2.0479516983032227,-1.2551727294921875,-0.1335109919309616,-1.8343884944915771,-0.7729625105857849,-0.6543496251106262,-1.0924001932144165,-0.8150520324707031,-0.9804002046585083,-0.8162814378738403,-0.7045435309410095,-1.863228440284729,-1.748055338859558,-1.316145896911621,-0.603411853313446,-0.5090051889419556,-1.9211374521255493,-1.5527913570404053,-1.0143364667892456,-1.053725004196167,-0.6462517976760864,-0.6665849089622498,-1.971325159072876,-2.5090034008026123,-1.1530216932296753,-1.8575313091278076,-1.6080812215805054,-1.0443270206451416,-1.361836552619934,-1.3711936473846436,-1.8564873933792114,-1.2335138320922852,-1.3908811807632446,-1.1012589931488037,-1.358061671257019,-1.7089595794677734,-1.24142324924469,-1.4524719715118408,-1.2436375617980957,-1.2873388528823853,-1.1472523212432861,-1.3789690732955933,-3.096146583557129,-2.106245756149292,-0.46156996488571167,-1.8253437280654907,-1.1563578844070435,-0.2172575742006302,-1.575636625289917,-1.2881474494934082,-1.463605523109436,-0.9772499799728394,-2.1410255432128906,-1.6029213666915894,-1.4071791172027588,-1.1797770261764526,-1.438847541809082,-1.900588870048523,-1.1744440793991089,-1.642092227935791,-1.5612050294876099,-1.142577052116394,-1.3615329265594482,-1.8336247205734253,-1.1287251710891724,-1.358890414237976,-1.3180336952209473,-0.3888200521469116,-3.0069048404693604,-0.40774691104888916,-0.9037824273109436,-1.2069928646087646,-1.8477718830108643,-1.340422511100769,-1.3856321573257446,-1.910180687904358,-2.1949198246002197,-1.4664517641067505,-1.3165088891983032,-1.3744661808013916,-1.4109522104263306,-1.171903371810913,-3.676419734954834,-1.6527421474456787,-1.6287734508514404,-1.6602952480316162,-1.2828569412231445,-1.272684931755066,-1.3460434675216675,-1.5271486043930054,-1.5118286609649658,-1.7634373903274536,-1.6491373777389526,-1.2221428155899048,-1.4356156587600708,-1.9119662046432495,-1.446515679359436,-1.5744038820266724,-1.1949522495269775,-1.1143381595611572,-2.1531453132629395,-1.5487462282180786,-1.6358717679977417,-1.414737582206726,-1.8881995677947998,-2.3366732597351074,-1.4748088121414185,-1.4365572929382324,-1.4294300079345703,-1.6826101541519165,-1.4133410453796387,-0.9655606150627136,-1.332902431488037,-1.2888940572738647,-1.3701956272125244,-1.2997525930404663,-1.4573971033096313,-1.4584405422210693,-1.3560729026794434,-1.9770269393920898,-1.1529302597045898,-1.2903947830200195,-1.390364646911621,-1.422113060951233,-2.394178867340088,-1.1267509460449219,-1.303784966468811,-1.5809004306793213,-4.110000133514404,-1.4291605949401855,-1.420809030532837,-1.3967417478561401,-1.6211094856262207,-1.5238538980484009,-1.601845383644104,-1.5961558818817139,-2.680713415145874,-1.8107867240905762,-1.8157618045806885,-1.453757882118225,-1.4419405460357666,-1.273141860961914,-1.5811293125152588,-1.592419981956482,-1.348967432975769,-1.187544345855713,-1.4536992311477661,-1.458364486694336,-1.6431893110275269,-1.4618706703186035,-1.4857535362243652],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}},"xaxis":{"zeroline":false},"yaxis":{"zeroline":false}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('0d22d6bd-f291-43da-9da3-182108825d60');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<p>Let’s encapsulate the algorithm so we can run it for multiple iterations.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(X):</span>
<span id="cb23-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(X):</span>
<span id="cb23-3">      dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X).square().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sqrt()</span>
<span id="cb23-4">      ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gauss_kernel(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dist, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bw)</span>
<span id="cb23-5">      X[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ws[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ws.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> meanshift(data):</span>
<span id="cb23-8">   X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.clone()</span>
<span id="cb23-9">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): update(X)</span>
<span id="cb23-10">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X</span></code></pre></div>
</div>
<div class="cell" data-outputid="93eaa9ca-0761-44c4-d12f-f4fea76a453f" data-execution_count="32">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">plot_data(centroids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, meanshift(data), n_samples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>                            <div id="9f7fa94e-dcc7-44fe-8dfd-93018057a600" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("9f7fa94e-dcc7-44fe-8dfd-93018057a600")) {                    Plotly.newPlot(                        "9f7fa94e-dcc7-44fe-8dfd-93018057a600",                        [{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-17.71932029724121,-17.7193603515625,-17.719404220581055,-17.719438552856445,-17.719478607177734,-17.71951675415039,-17.71955680847168,-17.719593048095703,-17.719629287719727,-17.719667434692383,-17.719707489013672,-17.719741821289062,-17.71977424621582,-17.719810485839844,-17.7198486328125,-17.71988296508789,-17.71991539001465,-17.71994972229004,-17.719982147216797,-17.720016479492188,-17.720048904418945,-17.720081329345703,-17.720109939575195,-17.720144271850586,-17.72017478942871,-17.7202091217041,-17.72023582458496,-17.720264434814453,-17.720294952392578,-17.720327377319336,-17.72035789489746,-17.72038459777832,-17.720409393310547,-17.720439910888672,-17.72046661376953,-17.720495223999023,-17.72052001953125,-17.720548629760742,-17.7205753326416,-17.72060203552246,-17.720630645751953,-17.72065544128418,-17.72068214416504,-17.720703125,-17.720727920532227,-17.720754623413086,-17.720779418945312,-17.72080421447754,-17.720829010009766,-17.720849990844727,-17.720874786376953,-17.720895767211914,-17.720922470092773,-17.7209415435791,-17.720964431762695,-17.72098731994629,-17.721006393432617,-17.721025466918945,-17.721050262451172,-17.721071243286133,-17.72109603881836,-17.721115112304688,-17.72113609313965,-17.72115707397461,-17.721176147460938,-17.721195220947266,-17.721216201782227,-17.721237182617188,-17.72125816345215,-17.721277236938477,-17.721296310424805,-17.721315383911133,-17.72133445739746,-17.721357345581055,-17.721370697021484,-17.72138786315918,-17.72140884399414,-17.721426010131836,-17.721445083618164,-17.721464157104492,-17.72148323059082,-17.721498489379883,-17.721515655517578,-17.721534729003906,-17.7215518951416,-17.72157096862793,-17.721588134765625,-17.72160530090332,-17.721622467041016,-17.721637725830078,-17.721654891967773,-17.7216739654541,-17.721689224243164,-17.721708297729492,-17.72172737121582,-17.721744537353516,-17.721757888793945,-17.721773147583008,-17.721790313720703,-17.721805572509766,-17.72182273864746,-17.721839904785156,-17.72185516357422,-17.72187042236328,-17.72188949584961,-17.721904754638672,-17.721920013427734,-17.721935272216797,-17.721948623657227,-17.72196388244629,-17.721981048583984,-17.72199821472168,-17.722015380859375,-17.722028732299805,-17.7220458984375,-17.722061157226562,-17.722076416015625,-17.722091674804688,-17.722110748291016,-17.722126007080078,-17.72214126586914,-17.722158432006836,-17.7221736907959,-17.722190856933594,-17.722206115722656,-17.72222328186035,-17.722238540649414,-17.72225570678711,-17.722272872924805,-17.722291946411133,-17.72231101989746,-17.722328186035156,-17.72234344482422,-17.722360610961914,-17.722379684448242,-17.722396850585938,-17.722415924072266,-17.722431182861328,-17.722448348999023,-17.722463607788086,-17.722482681274414,-17.722497940063477,-17.722515106201172,-17.722532272338867,-17.722549438476562,-17.722564697265625,-17.722583770751953,-17.722597122192383,-17.722618103027344,-17.72263526916504,-17.7226505279541,-17.722667694091797,-17.722684860229492,-17.722702026367188,-17.722719192504883,-17.722736358642578,-17.72275161743164,-17.722768783569336,-17.72278594970703,-17.722801208496094,-17.722820281982422,-17.722837448120117,-17.722854614257812,-17.722869873046875,-17.72288703918457,-17.7229061126709,-17.722923278808594,-17.722938537597656,-17.72295570373535,-17.722972869873047,-17.722990036010742,-17.723007202148438,-17.723024368286133,-17.723041534423828,-17.723058700561523,-17.72307586669922,-17.723093032836914,-17.723112106323242,-17.723129272460938,-17.723146438598633,-17.723163604736328,-17.723180770874023,-17.72319793701172,-17.723217010498047,-17.723234176635742,-17.72325325012207,-17.7232723236084,-17.723289489746094,-17.723308563232422,-17.723325729370117,-17.723344802856445,-17.72336196899414,-17.72338104248047,-17.723398208618164,-17.72341537475586,-17.723434448242188,-17.723453521728516,-17.723472595214844,-17.723491668701172,-17.723508834838867,-17.723526000976562,-17.723546981811523,-17.72356605529785,-17.723583221435547,-17.723602294921875,-17.72361946105957,-17.7236385345459,-17.723657608032227,-17.723676681518555,-17.723695755004883,-17.72371482849121,-17.72373390197754,-17.723751068115234,-17.723772048950195,-17.72378921508789,-17.72380828857422,-17.72382926940918,-17.723848342895508,-17.723867416381836,-17.723886489868164,-17.723907470703125,-17.723928451538086,-17.723947525024414,-17.723968505859375,-17.723987579345703,-17.72400665283203,-17.72402572631836,-17.724044799804688,-17.72406578063965,-17.724084854125977,-17.724103927612305,-17.724124908447266,-17.724143981933594,-17.724164962768555,-17.724184036254883,-17.72420310974121,-17.724224090576172,-17.724245071411133,-17.72426414489746,-17.724287033081055,-17.72430992126465,-17.72432518005371,-17.724348068237305,-17.724369049072266,-17.72438621520996,-17.724407196044922,-17.724430084228516,-17.724449157714844,-17.72446632385254,-17.7244873046875],"y":[-28.321346282958984,-28.321340560913086,-28.321338653564453,-28.321332931518555,-28.321331024169922,-28.32132911682129,-28.32132339477539,-28.321317672729492,-28.32131004333496,-28.32131004333496,-28.32130241394043,-28.321298599243164,-28.3212947845459,-28.321290969848633,-28.321285247802734,-28.321279525756836,-28.321273803710938,-28.321266174316406,-28.321264266967773,-28.32125473022461,-28.321252822875977,-28.321256637573242,-28.321245193481445,-28.32124137878418,-28.32123565673828,-28.32123374938965,-28.32122802734375,-28.32122230529785,-28.321210861206055,-28.321205139160156,-28.32120132446289,-28.321203231811523,-28.321197509765625,-28.321191787719727,-28.32118034362793,-28.321176528930664,-28.32117462158203,-28.321170806884766,-28.3211612701416,-28.321155548095703,-28.321149826049805,-28.321144104003906,-28.321142196655273,-28.321136474609375,-28.321134567260742,-28.321125030517578,-28.32111930847168,-28.32111358642578,-28.321107864379883,-28.321107864379883,-28.32109832763672,-28.321090698242188,-28.321086883544922,-28.321081161499023,-28.321077346801758,-28.321075439453125,-28.321069717407227,-28.32105827331543,-28.32105827331543,-28.32105255126953,-28.32105255126953,-28.321043014526367,-28.321041107177734,-28.321033477783203,-28.321025848388672,-28.321025848388672,-28.321020126342773,-28.321014404296875,-28.321006774902344,-28.321001052856445,-28.320999145507812,-28.320993423461914,-28.320993423461914,-28.320985794067383,-28.320974349975586,-28.320972442626953,-28.320968627929688,-28.320960998535156,-28.320960998535156,-28.32095718383789,-28.320953369140625,-28.320947647094727,-28.320940017700195,-28.32093620300293,-28.320932388305664,-28.320926666259766,-28.320924758911133,-28.320920944213867,-28.320919036865234,-28.320913314819336,-28.320905685424805,-28.320905685424805,-28.320903778076172,-28.320898056030273,-28.320894241333008,-28.32088851928711,-28.32088279724121,-28.320878982543945,-28.320877075195312,-28.320873260498047,-28.32086944580078,-28.32086753845215,-28.320863723754883,-28.320858001708984,-28.320858001708984,-28.320858001708984,-28.32085418701172,-28.320852279663086,-28.320842742919922,-28.32084083557129,-28.320837020874023,-28.32083511352539,-28.320833206176758,-28.32082748413086,-28.320825576782227,-28.32082176208496,-28.320819854736328,-28.320816040039062,-28.320816040039062,-28.320810317993164,-28.320810317993164,-28.320804595947266,-28.320804595947266,-28.320798873901367,-28.3207950592041,-28.3207950592041,-28.320791244506836,-28.320785522460938,-28.320785522460938,-28.320781707763672,-28.32077980041504,-28.32077980041504,-28.32077980041504,-28.320775985717773,-28.320772171020508,-28.320770263671875,-28.32076644897461,-28.32076644897461,-28.32076072692871,-28.32076072692871,-28.32076072692871,-28.320749282836914,-28.320749282836914,-28.320743560791016,-28.320743560791016,-28.320737838745117,-28.320737838745117,-28.320728302001953,-28.32073211669922,-28.320728302001953,-28.320724487304688,-28.32071876525879,-28.32071876525879,-28.320716857910156,-28.320716857910156,-28.320716857910156,-28.320711135864258,-28.320707321166992,-28.320703506469727,-28.320701599121094,-28.320701599121094,-28.320695877075195,-28.320695877075195,-28.32069206237793,-28.32069206237793,-28.320688247680664,-28.32068634033203,-28.320682525634766,-28.320680618286133,-28.320676803588867,-28.320676803588867,-28.3206729888916,-28.3206729888916,-28.32067108154297,-28.320667266845703,-28.32066535949707,-28.32066535949707,-28.320663452148438,-28.320661544799805,-28.32065773010254,-28.320655822753906,-28.320650100708008,-28.320648193359375,-28.320646286010742,-28.320642471313477,-28.320642471313477,-28.320640563964844,-28.320636749267578,-28.320632934570312,-28.32063102722168,-28.320627212524414,-28.32062530517578,-28.320621490478516,-28.320621490478516,-28.32061767578125,-28.320615768432617,-28.32061195373535,-28.32061004638672,-28.320606231689453,-28.320602416992188,-28.32059669494629,-28.320602416992188,-28.320600509643555,-28.320594787597656,-28.320594787597656,-28.320587158203125,-28.320587158203125,-28.320581436157227,-28.320581436157227,-28.320575714111328,-28.320575714111328,-28.32056999206543,-28.32056999206543,-28.32056427001953,-28.32056427001953,-28.320556640625,-28.320556640625,-28.3205509185791,-28.3205509185791,-28.32054901123047,-28.320545196533203,-28.320545196533203,-28.320539474487305,-28.320539474487305,-28.32053565979004,-28.320533752441406,-28.320528030395508,-28.320524215698242,-28.320520401000977,-28.320520401000977,-28.320518493652344,-28.320514678955078,-28.320512771606445,-28.320505142211914,-28.320505142211914,-28.320505142211914,-28.320497512817383,-28.32049560546875,-28.320493698120117,-28.320493698120117,-28.320491790771484,-28.320484161376953,-28.320480346679688,-28.320480346679688,-28.320472717285156,-28.32046890258789,-28.320466995239258,-28.320463180541992,-28.320457458496094,-28.320453643798828],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.456666946411133,18.456666946411133,18.4566707611084,18.4566707611084,18.45667266845703,18.45667266845703,18.456676483154297,18.456676483154297,18.456680297851562,18.456680297851562,18.456682205200195,18.456682205200195,18.45668601989746,18.45668601989746,18.456687927246094,18.456687927246094,18.456687927246094,18.456689834594727,18.45669174194336,18.45669174194336,18.456695556640625,18.456695556640625,18.456695556640625,18.456695556640625,18.456697463989258,18.456697463989258,18.45669937133789,18.45669937133789,18.456701278686523,18.456701278686523,18.456701278686523,18.456701278686523,18.456701278686523,18.456703186035156,18.456703186035156,18.456703186035156,18.456703186035156,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.456703186035156,18.456703186035156,18.456703186035156,18.456703186035156,18.456703186035156,18.456701278686523,18.456701278686523,18.456701278686523,18.456701278686523,18.45669937133789,18.45669937133789,18.45669937133789,18.456697463989258,18.456697463989258,18.456695556640625,18.456695556640625,18.456695556640625,18.45669174194336,18.45669174194336,18.45669174194336,18.456687927246094,18.456687927246094,18.456687927246094,18.45668601989746,18.456684112548828,18.456682205200195,18.456682205200195,18.456680297851562,18.456680297851562,18.45667839050293,18.456676483154297,18.456674575805664,18.45667266845703,18.45667266845703,18.4566707611084,18.456668853759766,18.456666946411133,18.456666946411133,18.4566650390625,18.4566650390625,18.4566650390625,18.456661224365234,18.456661224365234,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.456655502319336,18.456653594970703,18.45665168762207,18.456649780273438,18.456649780273438,18.456647872924805,18.456647872924805,18.456645965576172,18.456645965576172,18.456645965576172,18.45664405822754,18.45664405822754,18.456642150878906,18.456640243530273,18.456640243530273,18.456640243530273,18.45663833618164,18.45663833618164,18.45663833618164,18.45663833618164,18.456634521484375,18.456634521484375,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.45663070678711,18.45663070678711,18.45663070678711,18.45663070678711,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.45663070678711,18.45663070678711,18.45663070678711,18.45663070678711,18.45663070678711,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456636428833008,18.456636428833008,18.45663833618164,18.45663833618164,18.45663833618164,18.45663833618164,18.45663833618164,18.45663833618164,18.456640243530273,18.456640243530273,18.456640243530273,18.456642150878906,18.456642150878906,18.45664405822754,18.45664405822754,18.45664405822754,18.456645965576172,18.456645965576172,18.456645965576172,18.456645965576172,18.456647872924805,18.456647872924805,18.456649780273438,18.456649780273438,18.456649780273438,18.456649780273438,18.456649780273438,18.45665168762207,18.45665168762207,18.45665168762207,18.45665168762207,18.45665168762207,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797],"y":[-3.67580509185791,-3.6758058071136475,-3.675806999206543,-3.6758079528808594,-3.6758086681365967,-3.675809383392334,-3.6758105754852295,-3.675811290740967,-3.675812005996704,-3.6758131980895996,-3.675813913345337,-3.675814628601074,-3.6758155822753906,-3.675816297531128,-3.6758170127868652,-3.6758177280426025,-3.67581844329834,-3.6758193969726562,-3.6758196353912354,-3.6758203506469727,-3.675821304321289,-3.6758220195770264,-3.6758222579956055,-3.6758227348327637,-3.675823211669922,-3.675823450088501,-3.6758244037628174,-3.6758246421813965,-3.6758251190185547,-3.675825357437134,-3.675825834274292,-3.675825834274292,-3.67582631111145,-3.6758265495300293,-3.6758265495300293,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758270263671875,-3.6758265495300293,-3.6758265495300293,-3.6758265495300293,-3.67582631111145,-3.675825834274292,-3.675825834274292,-3.675825357437134,-3.6758251190185547,-3.6758251190185547,-3.6758246421813965,-3.6758244037628174,-3.675823926925659,-3.675823450088501,-3.6758227348327637,-3.6758220195770264,-3.6758220195770264,-3.675821304321289,-3.675821304321289,-3.6758203506469727,-3.6758196353912354,-3.675818920135498,-3.67581844329834,-3.6758177280426025,-3.6758174896240234,-3.675816535949707,-3.6758158206939697,-3.6758155822753906,-3.675814628601074,-3.675814390182495,-3.675813674926758,-3.6758127212524414,-3.675812005996704,-3.675811290740967,-3.6758105754852295,-3.675809860229492,-3.675808906555176,-3.6758081912994385,-3.6758079528808594,-3.675806999206543,-3.675806760787964,-3.6758058071136475,-3.67580509185791,-3.675804376602173,-3.6758036613464355,-3.6758029460906982,-3.675801992416382,-3.6758017539978027,-3.6758010387420654,-3.6758005619049072,-3.67579984664917,-3.6757991313934326,-3.675798177719116,-3.675797939300537,-3.675797462463379,-3.6757967472076416,-3.6757960319519043,-3.675795555114746,-3.675795316696167,-3.6757943630218506,-3.6757936477661133,-3.675793409347534,-3.675792932510376,-3.6757924556732178,-3.6757922172546387,-3.6757915019989014,-3.6757915019989014,-3.675790548324585,-3.675790548324585,-3.6757898330688477,-3.6757898330688477,-3.6757891178131104,-3.6757891178131104,-3.675788640975952,-3.675788402557373,-3.675788402557373,-3.675787925720215,-3.675787925720215,-3.675787925720215,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.675787925720215,-3.675787925720215,-3.675787925720215,-3.675787925720215,-3.675788402557373,-3.675788402557373,-3.675788402557373,-3.675788640975952,-3.6757891178131104,-3.6757891178131104,-3.6757891178131104,-3.6757895946502686,-3.6757895946502686,-3.6757898330688477,-3.6757898330688477,-3.675790309906006,-3.675790309906006,-3.675790548324585,-3.675790548324585,-3.675791025161743,-3.675791025161743,-3.6757915019989014,-3.6757915019989014,-3.6757917404174805,-3.6757922172546387,-3.6757922172546387,-3.6757922172546387,-3.6757924556732178,-3.675792932510376,-3.675792932510376,-3.675792932510376,-3.675793409347534,-3.6757936477661133,-3.6757936477661133,-3.6757941246032715,-3.6757943630218506,-3.675794839859009,-3.675795316696167,-3.675795316696167,-3.675795555114746,-3.6757960319519043,-3.6757960319519043,-3.6757960319519043,-3.6757962703704834,-3.6757967472076416,-3.6757967472076416,-3.6757972240448,-3.675797462463379,-3.675797939300537,-3.675798177719116,-3.675798177719116,-3.6757986545562744,-3.6757991313934326,-3.6757991313934326,-3.6757991313934326,-3.6757993698120117,-3.67579984664917,-3.67579984664917,-3.67579984664917,-3.675800085067749,-3.6758005619049072,-3.6758005619049072,-3.6758005619049072,-3.6758010387420654,-3.6758012771606445,-3.6758012771606445,-3.6758012771606445,-3.6758012771606445,-3.6758017539978027,-3.6758017539978027,-3.6758017539978027,-3.6758017539978027,-3.675801992416382,-3.675801992416382,-3.675801992416382,-3.67580246925354,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.912999153137207,-10.912999153137207,-10.912999153137207,-10.912999153137207,-10.913000106811523,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.913002014160156,-10.913002014160156,-10.913002014160156,-10.913002014160156,-10.913002014160156,-10.913002014160156,-10.913002967834473,-10.913002967834473,-10.913002967834473,-10.913003921508789,-10.913003921508789,-10.913003921508789,-10.913003921508789,-10.913004875183105,-10.913004875183105,-10.913004875183105,-10.913004875183105,-10.913004875183105,-10.913005828857422,-10.913006782531738,-10.913006782531738,-10.913006782531738,-10.913006782531738,-10.913007736206055,-10.913007736206055,-10.913008689880371,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.91301155090332,-10.913012504577637,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.91301441192627,-10.91301441192627,-10.91301441192627,-10.913016319274902,-10.913016319274902,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913020133972168,-10.913020133972168,-10.913021087646484,-10.913021087646484,-10.913021087646484,-10.913021087646484,-10.9130220413208,-10.9130220413208,-10.9130220413208,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.9130220413208,-10.9130220413208,-10.9130220413208,-10.9130220413208,-10.913021087646484,-10.913021087646484,-10.913021087646484,-10.913021087646484,-10.913020133972168,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913016319274902,-10.913016319274902,-10.913016319274902,-10.913016319274902,-10.913015365600586,-10.913015365600586,-10.91301441192627,-10.91301441192627,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913012504577637,-10.913012504577637,-10.91301155090332,-10.91301155090332,-10.91301155090332,-10.91301155090332,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688],"y":[23.639501571655273,23.639501571655273,23.63949966430664,23.63949966430664,23.63949966430664,23.63949966430664,23.639497756958008,23.639497756958008,23.639497756958008,23.639493942260742,23.639493942260742,23.639493942260742,23.639493942260742,23.639493942260742,23.639493942260742,23.639493942260742,23.639495849609375,23.639495849609375,23.639495849609375,23.639495849609375,23.639495849609375,23.63949966430664,23.63949966430664,23.63949966430664,23.63949966430664,23.63949966430664,23.639501571655273,23.639501571655273,23.639501571655273,23.639503479003906,23.639503479003906,23.63950538635254,23.639507293701172,23.639507293701172,23.639507293701172,23.639509201049805,23.639509201049805,23.639511108398438,23.63951301574707,23.63951301574707,23.639514923095703,23.639516830444336,23.639516830444336,23.639516830444336,23.63951873779297,23.63951873779297,23.639522552490234,23.639522552490234,23.639524459838867,23.639524459838867,23.639524459838867,23.6395263671875,23.639528274536133,23.639530181884766,23.6395320892334,23.6395320892334,23.6395320892334,23.639535903930664,23.639535903930664,23.639537811279297,23.63953971862793,23.63953971862793,23.63953971862793,23.639541625976562,23.639543533325195,23.639543533325195,23.63954734802246,23.63954734802246,23.639549255371094,23.639549255371094,23.639549255371094,23.63955307006836,23.63955307006836,23.639554977416992,23.639554977416992,23.639554977416992,23.639556884765625,23.63956069946289,23.63956069946289,23.639562606811523,23.639562606811523,23.639564514160156,23.639564514160156,23.63956642150879,23.639568328857422,23.639568328857422,23.639568328857422,23.639572143554688,23.639572143554688,23.639572143554688,23.63957405090332,23.63957405090332,23.639575958251953,23.639575958251953,23.639577865600586,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.63958168029785,23.63958168029785,23.639583587646484,23.639585494995117,23.639585494995117,23.639585494995117,23.639585494995117,23.639585494995117,23.63958740234375,23.63958740234375,23.63958740234375,23.63958740234375,23.63958740234375,23.63958740234375,23.639589309692383,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639589309692383,23.639589309692383,23.639589309692383,23.639589309692383,23.639589309692383,23.63958740234375,23.63958740234375,23.639585494995117,23.639585494995117,23.639585494995117,23.639585494995117,23.639583587646484,23.639583587646484,23.63958168029785,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.639577865600586,23.639575958251953,23.63957405090332,23.63957405090332,23.639572143554688,23.639572143554688,23.639572143554688,23.639572143554688,23.639572143554688,23.639570236206055,23.639568328857422,23.639568328857422,23.63956642150879,23.63956642150879,23.63956642150879,23.63956642150879,23.639564514160156,23.639562606811523,23.639562606811523,23.639562606811523,23.639562606811523,23.639562606811523,23.639562606811523,23.63956069946289,23.63956069946289,23.63956069946289,23.63956069946289,23.63956069946289,23.639558792114258,23.639558792114258,23.639558792114258,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-27.796791076660156,-27.79676628112793,-27.79674530029297,-27.796724319458008,-27.79669761657715,-27.796674728393555,-27.796653747558594,-27.796632766723633,-27.796602249145508,-27.796585083007812,-27.796560287475586,-27.796539306640625,-27.796510696411133,-27.796493530273438,-27.79647445678711,-27.796449661254883,-27.796428680419922,-27.796409606933594,-27.796388626098633,-27.796367645263672,-27.79634666442871,-27.79632568359375,-27.796306610107422,-27.79628562927246,-27.7962646484375,-27.796245574951172,-27.796220779418945,-27.79619789123535,-27.796178817749023,-27.796157836914062,-27.796138763427734,-27.79612159729004,-27.79610252380371,-27.796079635620117,-27.796056747436523,-27.796039581298828,-27.796022415161133,-27.796005249023438,-27.795984268188477,-27.795969009399414,-27.795949935913086,-27.795930862426758,-27.795913696289062,-27.7958927154541,-27.795873641967773,-27.79585838317871,-27.795839309692383,-27.795822143554688,-27.79580307006836,-27.79578399658203,-27.79576873779297,-27.795751571655273,-27.795734405517578,-27.795713424682617,-27.795698165893555,-27.795677185058594,-27.795665740966797,-27.79564094543457,-27.79562759399414,-27.795612335205078,-27.79559326171875,-27.79557991027832,-27.79555892944336,-27.79553985595703,-27.79552459716797,-27.79550552368164,-27.795490264892578,-27.795467376708984,-27.795455932617188,-27.795433044433594,-27.795413970947266,-27.795398712158203,-27.79538345336914,-27.795366287231445,-27.795347213745117,-27.795331954956055,-27.795316696166992,-27.795297622680664,-27.7952823638916,-27.79526710510254,-27.79524803161621,-27.79523277282715,-27.795211791992188,-27.795196533203125,-27.795181274414062,-27.795166015625,-27.795148849487305,-27.795135498046875,-27.795114517211914,-27.79509925842285,-27.79508399963379,-27.795068740844727,-27.795053482055664,-27.795034408569336,-27.79501724243164,-27.79500389099121,-27.794984817504883,-27.794967651367188,-27.794952392578125,-27.794937133789062,-27.794921875,-27.794902801513672,-27.79488754272461,-27.79486846923828,-27.79485321044922,-27.794837951660156,-27.794818878173828,-27.794801712036133,-27.79478645324707,-27.794767379760742,-27.79475212097168,-27.79473304748535,-27.79471778869629,-27.794700622558594,-27.79468536376953,-27.794666290283203,-27.79465103149414,-27.794631958007812,-27.794612884521484,-27.794597625732422,-27.794578552246094,-27.7945613861084,-27.794540405273438,-27.79452896118164,-27.794509887695312,-27.794492721557617,-27.79447364807129,-27.794452667236328,-27.79443359375,-27.794414520263672,-27.794397354125977,-27.79437828063965,-27.79435920715332,-27.794342041015625,-27.794315338134766,-27.794296264648438,-27.794275283813477,-27.794254302978516,-27.79423713684082,-27.794219970703125,-27.794198989868164,-27.794179916381836,-27.794158935546875,-27.794139862060547,-27.79412078857422,-27.794103622436523,-27.794078826904297,-27.79405975341797,-27.794042587280273,-17.724519729614258,-27.794023513793945,-27.794002532958984,-27.793983459472656,-27.793964385986328,-27.793943405151367,-27.79392433166504,-27.793903350830078,-27.793886184692383,-27.793867111206055,-27.793848037719727,-27.793827056884766,-27.793806076049805,-27.793787002563477,-27.79376792907715,-27.793746948242188,-27.793725967407227,-27.7937068939209,-27.79368782043457,-27.79366683959961,-27.793649673461914,-27.79362678527832,-27.793609619140625,-27.79358673095703,-27.79356575012207,-27.793546676635742,-27.793529510498047,-27.793506622314453,-27.793485641479492,-27.793468475341797,-27.793445587158203,-27.793424606323242,-27.793405532836914,-27.79338836669922,-27.793365478515625,-27.793344497680664,-27.793325424194336,-27.793302536010742,-27.79328155517578,-27.793258666992188,-27.793241500854492,-27.7932186126709,-27.793197631835938,-27.79317855834961,-27.79315948486328,-27.793136596679688,-27.793115615844727,-27.7930965423584,-27.793075561523438,-27.793054580688477,-27.793031692504883,-27.793014526367188,-27.792991638183594,-27.7929744720459,-27.792951583862305,-27.79293441772461,-27.79291343688965,-27.79289436340332,-27.79287338256836,-27.792850494384766,-27.792829513549805,-27.792808532714844,-27.792789459228516,-27.792768478393555,-27.792747497558594,-27.79273223876953,-27.792709350585938,-27.792692184448242,-27.792673110961914,-27.792652130126953,-27.792633056640625,-27.792612075805664,-27.792593002319336,-27.792572021484375,-27.79254722595215,-27.792530059814453,-27.792510986328125,-27.792491912841797,-27.7924747467041,-27.792451858520508,-27.792434692382812,-27.79241180419922,-27.792390823364258,-27.792373657226562,-27.792354583740234,-27.792327880859375,-27.792308807373047,-27.79229164123535,-27.792272567749023,-27.792251586914062,-27.792232513427734,-27.792213439941406,-27.79219627380371,-27.792171478271484,-27.792152404785156,-27.79213523864746,-27.792112350463867,-27.792095184326172,-27.792076110839844,-27.792057037353516,-27.792036056518555],"y":[-26.64735221862793,-26.647357940673828,-26.647361755371094,-26.647367477416992,-26.647369384765625,-26.647375106811523,-26.647384643554688,-26.647384643554688,-26.647388458251953,-26.64739227294922,-26.647397994995117,-26.647401809692383,-26.64740753173828,-26.647411346435547,-26.647417068481445,-26.64742088317871,-26.64742660522461,-26.647432327270508,-26.64743995666504,-26.64743995666504,-26.647445678710938,-26.647449493408203,-26.6474552154541,-26.647459030151367,-26.647464752197266,-26.647470474243164,-26.64747428894043,-26.64746856689453,-26.647476196289062,-26.647480010986328,-26.647485733032227,-26.64748764038086,-26.64749526977539,-26.647491455078125,-26.647499084472656,-26.64750099182129,-26.647510528564453,-26.647510528564453,-26.64751625061035,-26.647520065307617,-26.647523880004883,-26.64752960205078,-26.64753532409668,-26.647533416748047,-26.647539138793945,-26.647539138793945,-26.647544860839844,-26.647550582885742,-26.647554397583008,-26.647558212280273,-26.647560119628906,-26.647563934326172,-26.64756965637207,-26.64756965637207,-26.647573471069336,-26.647573471069336,-26.647579193115234,-26.6475772857666,-26.6475830078125,-26.64759063720703,-26.647594451904297,-26.647594451904297,-26.647594451904297,-26.647598266601562,-26.647602081298828,-26.647607803344727,-26.64760971069336,-26.647607803344727,-26.647613525390625,-26.647615432739258,-26.647615432739258,-26.647619247436523,-26.647624969482422,-26.647624969482422,-26.647626876831055,-26.64763069152832,-26.64763641357422,-26.64763641357422,-26.647640228271484,-26.647642135620117,-26.647645950317383,-26.64764976501465,-26.64764976501465,-26.64765167236328,-26.64765167236328,-26.647659301757812,-26.647661209106445,-26.647661209106445,-26.647663116455078,-26.64766502380371,-26.64767074584961,-26.64767074584961,-26.647676467895508,-26.647674560546875,-26.647680282592773,-26.647680282592773,-26.647686004638672,-26.647686004638672,-26.647689819335938,-26.647693634033203,-26.647693634033203,-26.647695541381836,-26.6476993560791,-26.6476993560791,-26.647705078125,-26.647705078125,-26.6477108001709,-26.6477108001709,-26.64771842956543,-26.64771842956543,-26.647720336914062,-26.647724151611328,-26.64772605895996,-26.647729873657227,-26.647733688354492,-26.647735595703125,-26.64773941040039,-26.647741317749023,-26.64774513244629,-26.647747039794922,-26.64775276184082,-26.64775276184082,-26.64775848388672,-26.64776039123535,-26.647768020629883,-26.647768020629883,-26.64777374267578,-26.64777374267578,-26.64777946472168,-26.647785186767578,-26.647789001464844,-26.647790908813477,-26.647794723510742,-26.647798538208008,-26.647796630859375,-26.647798538208008,-26.647802352905273,-26.647804260253906,-26.647808074951172,-26.647811889648438,-26.647817611694336,-26.647817611694336,-26.647823333740234,-26.647823333740234,-26.647829055786133,-26.647829055786133,-26.6478328704834,-26.6478328704834,-26.647838592529297,-28.320451736450195,-26.647838592529297,-26.647846221923828,-26.647846221923828,-26.647851943969727,-26.647851943969727,-26.647857666015625,-26.647857666015625,-26.647863388061523,-26.647863388061523,-26.647871017456055,-26.647871017456055,-26.647876739501953,-26.647878646850586,-26.64788246154785,-26.647886276245117,-26.64788818359375,-26.64788818359375,-26.64789390563965,-26.64789390563965,-26.64790153503418,-26.64790153503418,-26.647907257080078,-26.647907257080078,-26.647912979125977,-26.647912979125977,-26.647918701171875,-26.647918701171875,-26.647926330566406,-26.64792823791504,-26.647932052612305,-26.647933959960938,-26.647937774658203,-26.64794158935547,-26.6479434967041,-26.647947311401367,-26.64794921875,-26.647951126098633,-26.647953033447266,-26.64795684814453,-26.647960662841797,-26.647966384887695,-26.647966384887695,-26.647974014282227,-26.647981643676758,-26.647977828979492,-26.647981643676758,-26.647987365722656,-26.647987365722656,-26.647994995117188,-26.64799690246582,-26.648000717163086,-26.648006439208984,-26.648006439208984,-26.648012161254883,-26.64801597595215,-26.64801597595215,-26.648025512695312,-26.648025512695312,-26.64803123474121,-26.648035049438477,-26.648035049438477,-26.648040771484375,-26.648040771484375,-26.648046493530273,-26.64805030822754,-26.648052215576172,-26.648059844970703,-26.6480655670166,-26.6480655670166,-26.6480712890625,-26.6480712890625,-26.6480770111084,-26.648080825805664,-26.64808464050293,-26.648086547851562,-26.648094177246094,-26.648094177246094,-26.648099899291992,-26.648099899291992,-26.64810562133789,-26.648109436035156,-26.648109436035156,-26.648115158081055,-26.648120880126953,-26.648117065429688,-26.648122787475586,-26.648122787475586,-26.648128509521484,-26.64813232421875,-26.648134231567383,-26.64813804626465,-26.648141860961914,-26.648143768310547,-26.648147583007812,-26.64815330505371,-26.648157119750977,-26.64815902709961,-26.648162841796875,-26.64816665649414,-26.648168563842773],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[20.775474548339844,20.775476455688477,20.775476455688477,20.775476455688477,20.775476455688477,20.775476455688477,20.77547836303711,20.77547836303711,20.77547836303711,20.77547836303711,20.77547836303711,20.77547836303711,20.775480270385742,20.775482177734375,20.775484085083008,20.775484085083008,20.77548599243164,20.77548599243164,20.77548599243164,20.775487899780273,20.775487899780273,20.775487899780273,20.775489807128906,20.77549171447754,20.775493621826172,20.775493621826172,20.775493621826172,20.775495529174805,20.775497436523438,20.77549934387207,20.775501251220703,20.775501251220703,20.775501251220703,20.775503158569336,20.775503158569336,20.7755069732666,20.7755069732666,20.7755069732666,20.775508880615234,20.775508880615234,20.775510787963867,20.7755126953125,20.775514602661133,20.775516510009766,20.775516510009766,20.7755184173584,20.77552032470703,20.77552032470703,20.775522232055664,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775527954101562,20.775527954101562,20.775531768798828,20.775531768798828,20.775531768798828,20.775531768798828,20.77553367614746,20.775535583496094,20.775535583496094,20.775537490844727,20.775537490844727,20.775537490844727,20.775537490844727,20.77553939819336,20.77553939819336,20.775541305541992,20.775541305541992,20.775543212890625,20.775543212890625,20.775543212890625,20.775543212890625,20.775545120239258,20.775545120239258,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.775545120239258,20.775545120239258,20.775543212890625,20.775543212890625,20.775543212890625,20.775541305541992,20.775541305541992,20.775541305541992,20.77553939819336,20.77553939819336,20.77553939819336,20.775537490844727,20.775537490844727,20.775537490844727,20.775537490844727,20.775535583496094,20.77553367614746,20.77553367614746,20.77553367614746,20.77553367614746,20.775531768798828,20.775531768798828,20.775531768798828,20.775531768798828,20.775531768798828,20.775529861450195,20.775529861450195,20.775529861450195,20.775527954101562,20.775527954101562,20.775527954101562,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775522232055664,20.775522232055664,20.775522232055664,20.7755184173584,20.7755184173584,20.7755184173584,20.7755184173584,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775514602661133,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.775514602661133,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.7755184173584,20.7755184173584,20.7755184173584,20.7755184173584,20.77552032470703,20.77552032470703,20.77552032470703,20.77552032470703,20.77552032470703],"y":[17.331676483154297,17.331676483154297,17.331676483154297,17.331676483154297,17.331676483154297,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","xy":[-1.4660975933074951,-1.4661005735397339,-1.4661036729812622,-1.4661065340042114,-1.4661091566085815,-1.4661117792129517,-1.4661142826080322,-1.4661167860031128,-1.4661189317703247,-1.4661211967468262,-1.4661232233047485,-1.4661251306533813,-1.4661270380020142,-1.4661288261413574,-1.4661303758621216,-1.4661319255828857,-1.4661333560943604,-1.466134786605835,-1.466135859489441,-1.4661370515823364,-1.4661381244659424,-1.4661390781402588,-1.4661400318145752,-1.466140866279602,-1.4661415815353394,-1.466142177581787,-1.4661427736282349,-1.4661433696746826,-1.4661437273025513,-1.46614408493042,-1.4661444425582886,-1.4661446809768677,-1.4661449193954468,-1.4661450386047363,-1.4661452770233154,-1.4661452770233154,-1.4661452770233154,-1.4661452770233154,-1.4661450386047363,-1.4661450386047363,-1.4661449193954468,-1.4661446809768677,-1.4661444425582886,-1.46614408493042,-1.4661438465118408,-1.4661434888839722,-1.466143012046814,-1.4661426544189453,-1.466142177581787,-1.466141700744629,-1.4661412239074707,-1.466140627861023,-1.4661401510238647,-1.466139554977417,-1.4661388397216797,-1.4661381244659424,-1.4661375284194946,-1.4661368131637573,-1.46613609790802,-1.4661352634429932,-1.4661345481872559,-1.4661338329315186,-1.4661328792572021,-1.4661320447921753,-1.4661312103271484,-1.4661303758621216,-1.4661294221878052,-1.4661285877227783,-1.466127634048462,-1.4661266803741455,-1.4661258459091187,-1.4661248922348022,-1.4661239385604858,-1.4661229848861694,-1.4661219120025635,-1.466120958328247,-1.4661197662353516,-1.4661188125610352,-1.4661178588867188,-1.4661167860031128,-1.4661158323287964,-1.4661146402359009,-1.4661136865615845,-1.466112494468689,-1.466111421585083,-1.4661104679107666,-1.466109275817871,-1.4661082029342651,-1.4661071300506592,-1.4661060571670532,-1.4661049842834473,-1.4661039113998413,-1.4661028385162354,-1.4661016464233398,-1.4661004543304443,-1.4660993814468384,-1.4660983085632324,-1.466097116470337,-1.4660961627960205,-1.466094970703125,-1.4660937786102295,-1.4660927057266235,-1.466091513633728,-1.4660903215408325,-1.4660892486572266,-1.4660882949829102,-1.4660871028900146,-1.4660860300064087,-1.4660849571228027,-1.4660837650299072,-1.4660826921463013,-1.4660816192626953,-1.466080665588379,-1.4660797119140625,-1.466078758239746,-1.4660775661468506,-1.4660766124725342,-1.4660757780075073,-1.466074824333191,-1.4660738706588745,-1.4660730361938477,-1.4660722017288208,-1.4660714864730835,-1.4660706520080566,-1.4660699367523193,-1.4660691022872925,-1.4660683870315552,-1.4660677909851074,-1.4660670757293701,-1.4660664796829224,-1.4660658836364746,-1.4660651683807373,-1.466064691543579,-1.466064214706421,-1.4660636186599731,-1.466063141822815,-1.4660626649856567,-1.466062307357788,-1.4660618305206299,-1.4660614728927612,-1.4660611152648926,-1.4660608768463135,-1.4660605192184448,-1.4660602807998657,-1.466059923171997,-1.4660598039627075,-1.4660595655441284,-1.4660594463348389,-1.4660592079162598,-1.4660592079162598,-1.4660590887069702,-1.4660589694976807,-1.4660589694976807,-1.4660589694976807,-1.4660589694976807,-1.4660589694976807,-1.4660590887069702,-1.4660592079162598,-1.4660593271255493,-1.4660594463348389,-1.4660595655441284,-1.466059684753418,-1.466059923171997,-1.4660602807998657,-1.4660604000091553,-1.4660606384277344,-1.4660608768463135,-1.4660613536834717,-1.4660617113113403,-1.4660619497299194,-1.466062307357788,-1.4660627841949463,-1.4660632610321045,-1.4660637378692627,-1.466064214706421,-1.4660645723342896,-1.4660650491714478,-1.4660656452178955,-1.4660661220550537,-1.466066598892212,-1.4660670757293701,-1.4660675525665283,-1.466068148612976,-1.4660687446594238,-1.4660693407058716,-1.4660699367523193,-1.466070532798767,-1.4660710096359253,-1.466071605682373,-1.4660722017288208,-1.4660727977752686,-1.4660733938217163,-1.466073989868164,-1.4660745859146118,-1.4660753011703491,-1.4660757780075073,-1.466076374053955,-1.4660769701004028,-1.4660776853561401,-1.466078281402588,-1.466078758239746,-1.4660793542861938,-1.4660799503326416,-1.466080665588379,-1.466081142425537,-1.4660817384719849,-1.4660823345184326,-1.4660828113555908,-1.4660834074020386,-1.4660840034484863,-1.4660844802856445,-1.4660850763320923,-1.46608567237854,-1.4660861492156982,-1.4660866260528564,-1.4660872220993042,-1.4660876989364624,-1.4660881757736206,-1.4660886526107788,-1.466089129447937,-1.4660896062850952,-1.4660900831222534,-1.4660905599594116,-1.4660909175872803,-1.466091275215149,-1.4660917520523071,-1.4660921096801758,-1.4660924673080444,-1.466092824935913,-1.4660931825637817,-1.4660935401916504,-1.46609365940094,-1.4660941362380981,-1.4660942554473877,-1.4660946130752563,-1.4660948514938354,-1.466095209121704,-1.4660953283309937,-1.4660955667495728,-1.4660956859588623,-1.4660959243774414,-1.466096043586731,-1.4660961627960205,-1.4660961627960205,-1.46609628200531,-1.4660964012145996,-1.4660965204238892,-1.4660965204238892,-1.4660966396331787,-1.4660966396331787],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}},"xaxis":{"zeroline":false},"yaxis":{"zeroline":false}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('9f7fa94e-dcc7-44fe-8dfd-93018057a600');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<p>All points have converged.</p>
<div class="cell" data-outputid="bb2e334a-704b-4c00-bc0b-863e78e145b9" data-execution_count="33">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> meanshift(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.58 s ± 357 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>The algorithm took roughly 1.5 seconds to run 5 iterations. We’ll optimize the algorithm further in Optimized Implementation.</p>
<p>As we can see below, simply moving the algorithm to the GPU won’t help —&nbsp;in fact, it becamse a bit slower.</p>
<div class="cell" data-outputid="2fa44f9e-eb1f-4f6a-e0c9-d63c0d897425" data-execution_count="34">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(X):</span>
<span id="cb27-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(X):</span>
<span id="cb27-3">      dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X).square().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sqrt()</span>
<span id="cb27-4">      ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gauss_kernel(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dist, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bw)</span>
<span id="cb27-5">      X[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ws[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ws.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb27-6"></span>
<span id="cb27-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> meanshift(data):</span>
<span id="cb27-8">   X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.clone().to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span>
<span id="cb27-9">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): update(X)</span>
<span id="cb27-10">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X.detach().cpu()</span>
<span id="cb27-11"></span>
<span id="cb27-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> meanshift(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.69 s ± 20.4 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
</section>
<section id="animation" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="animation">Animation</h3>
<p>Let’s see meanshift clustering happen in real time.</p>
<div class="cell page-columns page-full" data-outputid="c3243981-529e-459b-c2e8-8a12c267d1bc" data-execution_count="39">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.clone()</span>
<span id="cb29-2">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data(centroids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, X, n_samples, display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb29-3">fig.update_layout(xaxis_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>], yaxis_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>],  updatemenus<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'buttons'</span>, buttons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb29-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Play'</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'animate'</span>, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]),</span>
<span id="cb29-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pause'</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'animate'</span>, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(frame_duration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, frame_redraw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'False'</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'immediate'</span>, transition_duration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)])</span>
<span id="cb29-6">])])</span>
<span id="cb29-7"></span>
<span id="cb29-8">frames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [go.Frame(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fig.data)]</span>
<span id="cb29-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb29-10">    update(X)</span>
<span id="cb29-11">    frames.append(go.Frame(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot_data(centroids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, X, n_samples, display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).data))</span>
<span id="cb29-12">fig.frames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frames</span>
<span id="cb29-13">fig.show()</span></code></pre></div>
<div class="cell-output cell-output-display column-page">
<div>                            <div id="da1905ce-daae-44fb-a7c9-5e15f048904c" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("da1905ce-daae-44fb-a7c9-5e15f048904c")) {                    Plotly.newPlot(                        "da1905ce-daae-44fb-a7c9-5e15f048904c",                        [{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-18.425283432006836,-19.442867279052734,-19.854276657104492,-17.30156898498535,-19.117082595825195,-15.677632331848145,-16.907806396484375,-17.445497512817383,-11.341974258422852,-18.200695037841797,-17.12497329711914,-14.913961410522461,-16.144580841064453,-18.372589111328125,-19.294767379760742,-19.257606506347656,-18.581594467163086,-14.373680114746094,-19.242040634155273,-19.5387020111084,-16.264314651489258,-12.42320442199707,-18.451215744018555,-14.812079429626465,-19.69365692138672,-18.194053649902344,-17.762645721435547,-16.024280548095703,-17.579368591308594,-14.169445037841797,-17.940326690673828,-19.92470932006836,-16.432634353637695,-13.702322006225586,-18.81943702697754,-19.135713577270508,-18.676517486572266,-16.721593856811523,-15.12582015991211,-16.347347259521484,-19.844532012939453,-18.49294662475586,-16.823806762695312,-16.128559112548828,-20.409557342529297,-10.699813842773438,-15.691268920898438,-17.062101364135742,-18.343050003051758,-16.38997459411621,-14.201020240783691,-14.336832046508789,-17.710176467895508,-16.444183349609375,-17.2982120513916,-17.644861221313477,-19.40289306640625,-17.765161514282227,-19.959674835205078,-17.096742630004883,-17.082073211669922,-17.194229125976562,-15.314300537109375,-18.716243743896484,-16.28208351135254,-20.57084083557129,-17.447330474853516,-18.80275535583496,-17.124345779418945,-17.731937408447266,-12.793999671936035,-14.34986686706543,-18.603578567504883,-15.424489974975586,-17.606447219848633,-19.777353286743164,-19.87086296081543,-13.475830078125,-15.691652297973633,-20.595218658447266,-21.184223175048828,-17.003326416015625,-15.569633483886719,-17.106281280517578,-19.069355010986328,-16.60281753540039,-15.861335754394531,-19.614273071289062,-17.604625701904297,-18.2739200592041,-16.98937225341797,-20.406129837036133,-19.54855728149414,-13.558757781982422,-17.915620803833008,-17.965360641479492,-13.702252388000488,-16.256093978881836,-19.1097412109375,-15.704054832458496,-14.714237213134766,-16.749597549438477,-16.89400863647461,-16.529354095458984,-13.133790016174316,-16.091548919677734,-16.132667541503906,-17.34357261657715,-20.753503799438477,-18.887680053710938,-17.931848526000977,-14.335396766662598,-17.152362823486328,-16.733449935913086,-15.771133422851562,-18.076326370239258,-14.912118911743164,-16.72152328491211,-16.40565299987793,-17.783065795898438,-16.552995681762695,-20.175418853759766,-18.91767120361328,-14.851733207702637,-22.456077575683594,-22.31831932067871,-20.516998291015625,-18.038631439208984,-19.38145637512207,-16.016443252563477,-16.660627365112305,-18.12176513671875,-20.253890991210938,-14.825736999511719,-16.7254638671875,-20.110719680786133,-17.36981964111328,-21.927078247070312,-20.48758888244629,-14.93463134765625,-18.991792678833008,-18.725482940673828,-16.87033462524414,-14.785836219787598,-16.712627410888672,-14.988848686218262,-16.716533660888672,-15.422408103942871,-18.487947463989258,-17.83020782470703,-13.686074256896973,-19.089563369750977,-13.958005905151367,-18.330406188964844,-20.033981323242188,-17.421554565429688,-16.61069679260254,-21.204364776611328,-14.315523147583008,-16.56385040283203,-19.71274757385254,-17.46829605102539,-19.984617233276367,-17.815505981445312,-15.037534713745117,-15.395480155944824,-16.31277084350586,-19.262632369995117,-18.33284568786621,-14.347151756286621,-14.941446304321289,-21.142486572265625,-16.67853355407715,-14.444382667541504,-16.91511344909668,-16.327878952026367,-18.10141372680664,-15.081724166870117,-15.674304962158203,-18.1227970123291,-13.228094100952148,-22.18153190612793,-13.028053283691406,-21.443737030029297,-18.890525817871094,-21.532024383544922,-20.775909423828125,-20.798927307128906,-13.409114837646484,-18.51154327392578,-16.45906639099121,-20.22492218017578,-17.61229705810547,-16.918779373168945,-16.7662353515625,-17.566591262817383,-15.448262214660645,-20.296810150146484,-15.499092102050781,-17.182064056396484,-21.81060791015625,-13.5812349319458,-17.904890060424805,-16.715087890625,-18.669212341308594,-13.934989929199219,-12.094585418701172,-18.873226165771484,-18.156755447387695,-19.48307228088379,-17.80398941040039,-15.29049301147461,-19.86734390258789,-18.07574462890625,-20.173376083374023,-20.776090621948242,-22.112022399902344,-16.130434036254883,-19.273752212524414,-17.132108688354492,-14.767446517944336,-20.230281829833984,-16.91587257385254,-17.539005279541016,-15.170931816101074,-15.86638355255127,-21.568635940551758,-19.26389503479004,-14.286490440368652,-12.985215187072754,-16.15493392944336,-14.671684265136719,-16.989303588867188,-16.81963539123535,-14.954002380371094,-22.385000228881836,-15.516860961914062,-19.535491943359375,-22.129812240600586,-16.47366714477539,-15.84201431274414,-13.77514934539795,-16.683500289916992,-20.418292999267578,-17.364913940429688,-18.948177337646484,-18.144851684570312,-19.285493850708008,-17.751375198364258,-15.398202896118164],"y":[-32.0471305847168,-25.79459571838379,-28.21319580078125,-29.61461067199707,-26.414121627807617,-25.571475982666016,-26.669921875,-28.512489318847656,-24.65479278564453,-29.242782592773438,-27.07906723022461,-28.532981872558594,-28.21306037902832,-27.536712646484375,-28.805612564086914,-26.684741973876953,-31.968212127685547,-28.123043060302734,-30.623197555541992,-31.188819885253906,-29.770784378051758,-27.890092849731445,-28.920513153076172,-30.594266891479492,-28.868934631347656,-29.73366355895996,-31.046531677246094,-27.099119186401367,-27.822858810424805,-31.817283630371094,-28.85376739501953,-28.674978256225586,-27.691761016845703,-27.07562828063965,-26.55228042602539,-28.963993072509766,-29.280261993408203,-25.576885223388672,-27.616357803344727,-28.410961151123047,-28.432437896728516,-24.772382736206055,-26.533042907714844,-29.083641052246094,-28.417675018310547,-33.15908432006836,-26.761632919311523,-31.91179847717285,-27.873918533325195,-24.95347023010254,-28.84813117980957,-27.899263381958008,-27.130008697509766,-24.683143615722656,-28.07090187072754,-26.792179107666016,-28.365877151489258,-27.99596405029297,-26.80953025817871,-25.778608322143555,-29.421741485595703,-26.749692916870117,-25.46530532836914,-29.185876846313477,-28.248350143432617,-27.35129165649414,-26.6688289642334,-27.777109146118164,-26.50042724609375,-25.034025192260742,-24.580745697021484,-25.654388427734375,-30.404144287109375,-27.516550064086914,-31.38884162902832,-30.42477798461914,-26.350528717041016,-29.308488845825195,-27.44247055053711,-30.167499542236328,-27.037939071655273,-26.606548309326172,-31.066612243652344,-26.774595260620117,-25.593381881713867,-29.70121192932129,-24.696298599243164,-26.036550521850586,-23.817855834960938,-30.95263671875,-26.585054397583008,-25.31855010986328,-26.76004409790039,-28.909452438354492,-32.46820068359375,-28.658334732055664,-30.2910213470459,-29.46282386779785,-27.420970916748047,-29.28928565979004,-29.56557846069336,-28.417875289916992,-25.40730094909668,-31.34650993347168,-24.860137939453125,-25.334754943847656,-28.422603607177734,-26.8785457611084,-27.0628719329834,-26.893936157226562,-31.189964294433594,-29.768596649169922,-30.777780532836914,-28.05354881286621,-28.36737632751465,-23.168020248413086,-24.432273864746094,-28.65330696105957,-28.32551383972168,-27.96194839477539,-26.629575729370117,-34.019630432128906,-28.46030044555664,-32.65538787841797,-29.861289978027344,-31.152997970581055,-30.107206344604492,-27.85457420349121,-28.851152420043945,-26.050661087036133,-28.99776268005371,-23.90937042236328,-31.035280227661133,-29.26023292541504,-29.384498596191406,-27.294466018676758,-23.9848690032959,-31.028064727783203,-30.093748092651367,-30.33407974243164,-24.873268127441406,-27.408409118652344,-30.312875747680664,-26.252355575561523,-28.4118595123291,-27.673553466796875,-27.310714721679688,-30.021638870239258,-25.232114791870117,-29.83550262451172,-27.583023071289062,-27.861963272094727,-29.395198822021484,-29.57470703125,-27.718341827392578,-28.09288787841797,-30.316844940185547,-28.772842407226562,-30.75018882751465,-28.81464385986328,-28.529678344726562,-29.6528263092041,-29.618427276611328,-27.604419708251953,-25.726245880126953,-22.686126708984375,-27.512224197387695,-27.50852394104004,-27.696041107177734,-32.215457916259766,-32.04732131958008,-25.400760650634766,-31.223447799682617,-25.048992156982422,-28.2103214263916,-28.683570861816406,-27.72000503540039,-27.168046951293945,-30.6748046875,-26.077951431274414,-29.446605682373047,-31.54479217529297,-25.68828773498535,-31.99863624572754,-28.98000144958496,-28.14067268371582,-28.900911331176758,-30.646015167236328,-30.50232696533203,-30.927352905273438,-31.025882720947266,-28.365720748901367,-30.860807418823242,-31.36286735534668,-29.728595733642578,-29.8175106048584,-29.060991287231445,-23.956897735595703,-24.516084671020508,-27.825525283813477,-26.81167221069336,-27.312557220458984,-29.933609008789062,-25.270204544067383,-28.531633377075195,-27.22648048400879,-26.630380630493164,-31.36478614807129,-28.484390258789062,-27.74081039428711,-28.31574058532715,-26.071067810058594,-28.804800033569336,-26.31757164001465,-25.852022171020508,-25.886653900146484,-30.749074935913086,-30.350994110107422,-26.842615127563477,-29.34833335876465,-30.154848098754883,-29.82087516784668,-31.134145736694336,-34.633602142333984,-26.403047561645508,-29.826433181762695,-27.80544662475586,-30.34566307067871,-28.359270095825195,-28.178205490112305,-26.689130783081055,-34.38003921508789,-29.775415420532227,-28.883249282836914,-30.41360855102539,-29.668733596801758,-28.936614990234375,-27.57533073425293,-27.462566375732422,-28.22569465637207,-28.01352882385254,-28.511682510375977,-31.460168838500977,-27.07773208618164,-28.2685604095459,-30.80533790588379,-29.018760681152344,-27.95978546142578,-28.012292861938477,-30.937999725341797],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.285907745361328,20.79730796813965,17.1842098236084,17.530088424682617,22.114276885986328,21.224266052246094,20.020795822143555,14.8724365234375,24.704389572143555,21.13739585876465,18.702177047729492,18.792266845703125,18.643869400024414,16.03401756286621,22.449195861816406,17.934215545654297,18.73138427734375,19.272348403930664,18.451953887939453,16.485170364379883,20.92300033569336,14.866406440734863,15.106898307800293,17.726911544799805,18.86469268798828,19.690961837768555,20.837188720703125,21.72953987121582,15.416463851928711,17.630985260009766,16.862545013427734,18.76531410217285,18.82526206970215,22.656484603881836,23.568374633789062,19.596139907836914,18.80851936340332,18.663249969482422,18.77165985107422,22.054811477661133,17.666528701782227,19.300880432128906,16.047073364257812,21.56205940246582,15.830434799194336,20.371681213378906,21.5921630859375,15.514796257019043,19.55213737487793,18.390371322631836,26.898746490478516,19.914268493652344,16.61199188232422,19.533111572265625,16.40852928161621,18.65648078918457,20.971582412719727,22.689708709716797,19.2409610748291,16.04047203063965,15.055133819580078,15.226943969726562,17.601238250732422,19.69058609008789,20.979843139648438,18.250173568725586,17.544164657592773,17.28986930847168,18.633146286010742,17.5772762298584,20.41511344909668,17.256332397460938,19.839759826660156,14.76276683807373,13.951339721679688,13.569784164428711,19.831661224365234,17.9209041595459,17.080429077148438,16.31656837463379,16.932615280151367,17.511669158935547,15.450879096984863,17.715898513793945,16.341995239257812,18.15589141845703,18.1396541595459,20.288982391357422,15.750883102416992,18.8389892578125,17.769147872924805,19.434377670288086,20.52445411682129,16.095094680786133,17.322858810424805,18.679353713989258,17.533079147338867,17.640201568603516,20.267850875854492,15.81650161743164,17.364120483398438,20.37299346923828,15.63473129272461,21.850730895996094,14.726609230041504,20.915184020996094,19.197429656982422,15.555505752563477,16.891212463378906,18.69365119934082,20.060701370239258,15.732789039611816,18.13576889038086,18.797388076782227,18.25948715209961,17.53692054748535,16.875978469848633,18.693286895751953,18.38149070739746,22.246950149536133,17.974376678466797,19.922273635864258,21.475757598876953,18.350488662719727,21.047208786010742,23.865530014038086,18.39934730529785,19.990440368652344,22.33189582824707,11.368806838989258,18.428998947143555,17.9964656829834,19.698894500732422,18.817657470703125,16.28460121154785,19.352741241455078,14.888886451721191,14.288993835449219,17.679946899414062,18.64801025390625,17.24355125427246,18.962034225463867,19.223405838012695,17.017751693725586,19.932628631591797,14.636707305908203,17.708106994628906,19.428251266479492,19.068744659423828,23.207534790039062,17.78851318359375,19.224851608276367,17.71001434326172,23.529338836669922,19.45734405517578,17.588672637939453,15.998174667358398,14.496673583984375,14.456317901611328,18.55048179626465,15.665937423706055,19.813478469848633,18.41654396057129,18.342281341552734,13.745832443237305,15.779996871948242,16.436847686767578,20.352476119995117,17.190345764160156,22.926172256469727,21.2437686920166,20.55301284790039,18.71432113647461,18.52701187133789,17.08238983154297,18.85123062133789,18.6614990234375,15.867292404174805,18.305500030517578,16.103492736816406,17.103107452392578,18.22189712524414,20.91551399230957,20.000137329101562,18.631103515625,19.712915420532227,18.7369384765625,22.365671157836914,17.860729217529297,19.49117088317871,21.995403289794922,23.19469451904297,16.083406448364258,18.543041229248047,20.880332946777344,14.853985786437988,16.011058807373047,19.552581787109375,18.635080337524414,24.45953369140625,19.89056396484375,19.109867095947266,18.73686408996582,21.650571823120117,23.97255516052246,15.444473266601562,21.070125579833984,18.82577133178711,20.308700561523438,19.049758911132812,21.11652183532715,17.7515869140625,17.980010986328125,18.25163459777832,17.819499969482422,18.529132843017578,21.021656036376953,15.514059066772461,18.30569076538086,19.622093200683594,22.59380340576172,20.413806915283203,20.886690139770508,15.171564102172852,18.679607391357422,18.53107452392578,14.847296714782715,21.327430725097656,15.348832130432129,19.250690460205078,15.975162506103516,17.023046493530273,22.086414337158203,17.227558135986328,16.772428512573242,14.725050926208496,15.795086860656738,15.593132972717285,16.44536781311035,14.051198959350586,19.301485061645508,17.936670303344727,16.413143157958984,18.226226806640625,24.488990783691406,18.75320816040039,19.835208892822266,17.656503677368164,15.857093811035156,18.599315643310547],"y":[-2.7043209075927734,-6.509754180908203,0.10772943496704102,-6.171239852905273,-3.524801015853882,-4.109977722167969,-3.9810469150543213,-3.0426979064941406,-4.877400875091553,-3.196359872817993,-4.218727111816406,-7.716949462890625,-2.501232147216797,-2.3392739295959473,-6.965503692626953,-4.852914810180664,-5.269769191741943,0.6401042938232422,-7.980230808258057,0.1647968292236328,-9.481250762939453,-0.6962454319000244,-3.621338129043579,-3.8732447624206543,-4.000556945800781,-5.998170852661133,-3.602630138397217,-6.2851409912109375,-5.640164852142334,-2.2132859230041504,-1.6206212043762207,-5.713179588317871,-5.192222595214844,-1.6375646591186523,-2.9885497093200684,-1.2236747741699219,-3.304851770401001,-4.592470169067383,-3.335561752319336,-2.2755558490753174,-5.218547821044922,-1.417480707168579,-4.367788791656494,-6.531299591064453,2.026122570037842,-4.1139678955078125,-2.998929023742676,-5.617583751678467,-6.195955753326416,-2.7702388763427734,-1.9186731576919556,-5.377082824707031,-6.060332298278809,-4.623826026916504,-3.166316270828247,-0.5454671382904053,-1.863804817199707,-4.867537021636963,-5.658323764801025,-4.052438735961914,-3.2562546730041504,-3.9043540954589844,-4.773362636566162,-4.914124488830566,-1.450181484222412,-6.346890926361084,-5.7086334228515625,-3.58909273147583,-1.0209121704101562,0.0093231201171875,-0.905308723449707,-6.473879814147949,-3.917097568511963,-1.5587198734283447,-3.071938991546631,-2.888920783996582,-2.7852091789245605,-2.253837823867798,-4.838411808013916,-1.800037145614624,-3.939683198928833,-0.6961755752563477,-4.90866756439209,-2.7949814796447754,-6.738895416259766,-8.036633491516113,-4.805726528167725,-5.475495338439941,-3.7411482334136963,-1.1562025547027588,-3.1100802421569824,-3.6043334007263184,1.2808589935302734,-3.629106283187866,-3.889923095703125,-3.7333695888519287,-6.806085109710693,-5.8205671310424805,-5.128482818603516,-4.0107102394104,-4.09036922454834,-2.980588436126709,0.498568058013916,0.0031003952026367188,-1.2846779823303223,-1.6334819793701172,-2.5716793537139893,-8.118017196655273,-0.5494215488433838,-1.9748762845993042,-0.26900291442871094,-3.5758397579193115,-4.82087516784668,-2.970335006713867,-1.5021917819976807,-2.7392873764038086,-4.956005573272705,-3.3272387981414795,-2.2053232192993164,-4.835358619689941,-2.9242546558380127,-8.266316413879395,-3.5694403648376465,-2.321836471557617,-7.347557544708252,-5.546506881713867,0.9638981819152832,-2.259000062942505,-6.085452079772949,-4.532872200012207,-3.2601137161254883,-0.3713109493255615,-2.9808359146118164,-6.659450531005859,-2.3654940128326416,-3.8557751178741455,-5.325628280639648,-4.131223678588867,-7.263247489929199,-5.00927734375,-4.907634735107422,-3.329878330230713,-6.420282363891602,-4.471495151519775,-3.868802785873413,-3.4477405548095703,-7.645572185516357,-5.764829158782959,-1.9584074020385742,-3.9244496822357178,-0.6639175415039062,-2.607348680496216,-4.216252326965332,-0.7232744693756104,-2.982891082763672,-2.080137252807617,-2.8143386840820312,-5.916345596313477,-4.008955001831055,-4.793750762939453,-1.8198908567428589,-3.817965507507324,-5.170243740081787,-1.0879781246185303,-7.4145708084106445,-0.0548100471496582,0.17017674446105957,-5.223673343658447,-3.7200233936309814,-7.057165145874023,-6.392621040344238,-0.09973978996276855,0.26169800758361816,-5.56971549987793,-9.172874450683594,-6.467351913452148,-3.9755682945251465,-3.9636921882629395,-0.766258716583252,-4.885104179382324,-1.8571819067001343,-3.8930060863494873,-1.914812445640564,-1.7391928434371948,-4.4254326820373535,-5.248516082763672,-0.9376182556152344,-4.670827388763428,-3.927293300628662,0.7906813621520996,-3.635507583618164,-4.733575820922852,-7.6859846115112305,0.08954834938049316,-6.103554725646973,-5.123003005981445,-6.102663040161133,-5.29023551940918,-3.901334762573242,-4.80409049987793,-5.924502372741699,-4.235668182373047,-0.10431289672851562,-3.679736852645874,-5.7222700119018555,-1.1529746055603027,-6.837234973907471,-10.207952499389648,-3.3985257148742676,-0.6541595458984375,-6.354996681213379,-2.2060937881469727,-4.535785675048828,-5.4546966552734375,-1.9065525531768799,-2.727912425994873,-2.19783353805542,-3.9794557094573975,-1.3096957206726074,-6.270785331726074,-3.254026412963867,-0.026159286499023438,-3.0613555908203125,-6.355772972106934,-4.198906421661377,-1.1111929416656494,-0.49185729026794434,-5.250266075134277,-3.311692953109741,-1.5483345985412598,-3.674252986907959,-5.243827819824219,-3.5912892818450928,-3.8679404258728027,-6.431638717651367,-2.750701665878296,-4.8833088874816895,-2.7848410606384277,-4.069465160369873,-3.088862419128418,-4.8706207275390625,-1.2166154384613037,-5.237183094024658,-6.589001655578613,-3.629451036453247,-2.2973575592041016,-2.1324844360351562,-0.999638557434082,-3.615241527557373,-4.449435234069824],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-8.579100608825684,-14.010672569274902,-14.513997077941895,-15.05034065246582,-10.546951293945312,-8.86486530303955,-12.015640258789062,-10.1292085647583,-11.806747436523438,-8.698286056518555,-9.008814811706543,-10.674229621887207,-11.277036666870117,-12.262077331542969,-12.018115043640137,-8.263415336608887,-10.121085166931152,-5.30994176864624,-14.889737129211426,-11.259674072265625,-8.023612022399902,-14.069195747375488,-11.5695161819458,-18.34925079345703,-11.678018569946289,-8.612247467041016,-13.172802925109863,-12.407089233398438,-8.792895317077637,-6.425328731536865,-10.782958030700684,-5.683115482330322,-10.473514556884766,-10.929500579833984,-13.145326614379883,-7.997108459472656,-10.454900741577148,-12.228693962097168,-13.031203269958496,-10.17485237121582,-11.206878662109375,-10.747255325317383,-16.32989501953125,-14.766944885253906,-9.535654067993164,-7.845025539398193,-13.410931587219238,-14.541098594665527,-11.091876029968262,-13.486000061035156,-11.11856460571289,-11.103869438171387,-7.814505577087402,-12.761046409606934,-8.535818099975586,-9.560537338256836,-8.003549575805664,-10.495542526245117,-9.470699310302734,-11.129680633544922,-10.196456909179688,-14.469796180725098,-8.73503303527832,-11.43630313873291,-9.951140403747559,-10.646602630615234,-10.693506240844727,-12.884533882141113,-13.111177444458008,-11.674116134643555,-10.491535186767578,-9.4536714553833,-10.394414901733398,-5.976884841918945,-12.81216049194336,-8.700218200683594,-8.83251667022705,-9.277288436889648,-14.534629821777344,-13.159838676452637,-8.2501802444458,-13.979494094848633,-7.69365930557251,-13.975175857543945,-8.688097953796387,-9.187835693359375,-10.18696403503418,-12.265019416809082,-10.441424369812012,-12.797905921936035,-7.4091997146606445,-11.501553535461426,-11.511398315429688,-12.68610668182373,-8.08111572265625,-9.222166061401367,-13.489861488342285,-13.197281837463379,-10.057047843933105,-11.867032051086426,-8.768755912780762,-8.353048324584961,-13.836408615112305,-12.194673538208008,-9.63365650177002,-10.623037338256836,-16.568504333496094,-12.599166870117188,-9.693976402282715,-15.027666091918945,-9.357027053833008,-11.587748527526855,-16.095779418945312,-7.353463172912598,-11.70658016204834,-15.886924743652344,-9.86582088470459,-12.38827896118164,-8.525469779968262,-11.691880226135254,-11.018645286560059,-9.173951148986816,-10.892011642456055,-14.551121711730957,-10.090612411499023,-9.941912651062012,-10.800487518310547,-6.488488674163818,-17.684064865112305,-8.25571060180664,-7.884257793426514,-9.230748176574707,-14.27336311340332,-6.527972221374512,-8.942853927612305,-12.84288501739502,-11.504791259765625,-12.8230619430542,-11.953474044799805,-11.439977645874023,-12.161506652832031,-12.676198959350586,-12.84421157836914,-8.466421127319336,-10.02928638458252,-15.196163177490234,-13.270657539367676,-11.809050559997559,-13.238069534301758,-10.774357795715332,-13.11187744140625,-11.827685356140137,-11.208446502685547,-9.358530044555664,-8.390848159790039,-9.566508293151855,-10.056886672973633,-12.978875160217285,-6.733163356781006,-11.81070327758789,-9.520917892456055,-11.07801342010498,-10.623744010925293,-10.204333305358887,-8.742179870605469,-9.267026901245117,-9.723825454711914,-10.127391815185547,-11.12968635559082,-11.555424690246582,-10.689496994018555,-12.561797142028809,-6.911267280578613,-13.814241409301758,-6.106613636016846,-8.544097900390625,-13.208921432495117,-15.629257202148438,-11.55489730834961,-6.757113456726074,-9.691598892211914,-10.248163223266602,-5.443113327026367,-10.154929161071777,-9.293098449707031,-8.985886573791504,-12.611130714416504,-7.694052696228027,-11.935733795166016,-14.812773704528809,-13.496572494506836,-9.690009117126465,-8.743733406066895,-12.370203018188477,-13.763587951660156,-11.901032447814941,-4.670057773590088,-9.945587158203125,-11.442387580871582,-9.95588207244873,-13.887988090515137,-11.537931442260742,-8.262906074523926,-8.673343658447266,-14.847832679748535,-7.945804595947266,-12.744565963745117,-9.703649520874023,-9.8018159866333,-11.981284141540527,-8.29502010345459,-14.439075469970703,-8.556591033935547,-14.827993392944336,-10.283758163452148,-12.0502347946167,-10.731298446655273,-12.340343475341797,-11.376541137695312,-13.243505477905273,-9.012519836425781,-10.177419662475586,-14.337030410766602,-9.902543067932129,-11.152688026428223,-10.001517295837402,-5.549180030822754,-9.67077350616455,-12.813430786132812,-10.372093200683594,-12.902101516723633,-7.566817283630371,-9.946921348571777,-5.6056413650512695,-12.722561836242676,-11.385297775268555,-9.05480670928955,-12.55107593536377,-10.938796043395996,-12.469841957092285,-12.457233428955078,-12.033998489379883,-13.547700881958008,-10.890287399291992,-11.352169036865234,-11.798006057739258,-12.265260696411133,-8.367952346801758,-10.619942665100098,-11.750938415527344],"y":[24.166536331176758,24.21129608154297,23.915916442871094,23.46324348449707,26.648351669311523,22.24660301208496,24.89813804626465,24.031131744384766,19.86046028137207,24.026025772094727,26.82074737548828,22.338207244873047,20.5983943939209,25.4077091217041,25.503665924072266,24.059528350830078,23.425127029418945,20.14756202697754,24.82427215576172,20.79296112060547,28.39200210571289,26.836273193359375,24.189878463745117,20.579238891601562,23.625825881958008,28.48736000061035,20.152433395385742,23.5378475189209,25.189390182495117,24.095935821533203,27.848526000976562,25.813262939453125,25.658403396606445,24.111248016357422,25.42165184020996,26.032514572143555,22.899702072143555,23.18429946899414,23.16908073425293,25.081457138061523,19.344449996948242,25.079919815063477,22.78150177001953,21.08084487915039,20.106494903564453,26.322311401367188,20.55828857421875,28.7423095703125,20.156322479248047,27.59453582763672,24.78298568725586,25.730005264282227,21.698057174682617,24.61909294128418,23.875133514404297,23.3283634185791,20.567609786987305,23.409297943115234,21.9627685546875,25.24949073791504,23.938573837280273,28.386734008789062,20.046916961669922,18.482770919799805,27.214473724365234,23.317790985107422,24.13580894470215,25.694913864135742,26.681396484375,20.748817443847656,21.452476501464844,23.13495445251465,24.68809700012207,25.893529891967773,27.78632164001465,25.865711212158203,24.6231746673584,22.74492835998535,26.371034622192383,24.754962921142578,22.352519989013672,22.538957595825195,23.9776554107666,20.064350128173828,26.491668701171875,24.56884765625,25.294475555419922,26.268943786621094,20.834714889526367,21.845788955688477,22.221118927001953,21.367849349975586,23.17323112487793,21.49356460571289,23.30938720703125,25.95020294189453,24.534587860107422,19.093902587890625,27.985275268554688,24.581083297729492,27.381704330444336,23.545026779174805,27.24094009399414,22.74942398071289,22.777385711669922,20.850820541381836,22.905261993408203,26.333036422729492,22.81785011291504,20.720949172973633,18.307308197021484,26.165565490722656,23.546873092651367,25.428821563720703,26.351011276245117,25.419179916381836,20.960765838623047,18.17739486694336,21.1695499420166,25.409990310668945,24.69497299194336,26.40848731994629,19.911476135253906,25.295400619506836,21.246734619140625,22.84528160095215,22.382009506225586,21.727922439575195,22.453994750976562,19.77501106262207,23.742780685424805,25.356107711791992,22.212650299072266,22.42997932434082,24.777223587036133,23.575393676757812,25.612686157226562,23.020160675048828,21.359241485595703,26.301666259765625,24.841156005859375,29.153520584106445,24.658733367919922,26.526391983032227,26.066200256347656,23.264244079589844,24.016483306884766,22.765623092651367,25.738815307617188,25.503400802612305,24.530885696411133,25.301681518554688,24.087543487548828,20.937530517578125,25.285390853881836,26.232213973999023,22.042537689208984,27.336259841918945,23.748863220214844,20.518396377563477,19.037460327148438,25.98199462890625,28.02004623413086,21.916879653930664,21.755788803100586,25.216001510620117,27.85317611694336,23.071821212768555,23.82419776916504,21.560686111450195,18.87405776977539,25.42539405822754,23.261335372924805,26.449623107910156,20.07421875,25.180927276611328,24.641752243041992,23.278881072998047,23.918684005737305,24.27109718322754,25.34137725830078,20.50657844543457,21.21437644958496,22.152780532836914,26.15593719482422,22.48912239074707,22.050636291503906,22.308494567871094,23.04210662841797,21.55190658569336,23.77651596069336,23.085966110229492,20.795089721679688,24.10763931274414,24.983949661254883,21.158998489379883,19.99505043029785,23.174415588378906,18.87873077392578,25.063648223876953,19.15433120727539,18.174514770507812,20.72757911682129,23.278337478637695,26.75335121154785,22.914554595947266,22.007482528686523,25.811174392700195,24.630651473999023,24.262619018554688,23.68120765686035,18.042409896850586,22.256181716918945,26.868255615234375,28.66885757446289,23.297943115234375,21.409618377685547,25.655284881591797,22.636215209960938,20.862415313720703,20.5523624420166,24.430253982543945,26.663593292236328,21.059926986694336,25.795082092285156,19.12385368347168,21.722013473510742,24.95732307434082,22.832721710205078,22.681297302246094,22.04792594909668,24.684062957763672,23.065418243408203,27.771583557128906,25.500497817993164,22.881866455078125,27.203453063964844,19.437986373901367,25.092344284057617,20.588563919067383,24.666091918945312,22.112287521362305,21.54779815673828,26.44481658935547,24.808486938476562,22.220632553100586,25.37558364868164,25.50981903076172,21.999164581298828,24.52132225036621],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-22.754680633544922,-26.67397117614746,-29.0474910736084,-27.880598068237305,-26.793106079101562,-28.609851837158203,-25.550722122192383,-25.13289451599121,-30.861772537231445,-25.098453521728516,-27.027957916259766,-26.690332412719727,-27.978918075561523,-28.723445892333984,-26.617658615112305,-26.145647048950195,-27.301116943359375,-27.541017532348633,-26.28827476501465,-28.458303451538086,-30.348196029663086,-27.500713348388672,-25.45049285888672,-26.94854736328125,-26.681365966796875,-27.806488037109375,-29.25162696838379,-31.574357986450195,-27.206254959106445,-26.811689376831055,-27.541059494018555,-25.602140426635742,-31.249330520629883,-24.833192825317383,-30.38346290588379,-25.411306381225586,-25.21636962890625,-27.801950454711914,-30.520797729492188,-25.773983001708984,-25.538524627685547,-29.186670303344727,-30.3612060546875,-25.742422103881836,-23.975875854492188,-30.541736602783203,-29.402851104736328,-28.90102195739746,-27.1298828125,-26.172513961791992,-25.984153747558594,-32.941349029541016,-28.00428009033203,-31.53002166748047,-27.22295379638672,-25.487157821655273,-30.726882934570312,-22.723384857177734,-26.887983322143555,-27.746496200561523,-27.804460525512695,-27.74074363708496,-26.81143569946289,-28.115148544311523,-28.705944061279297,-29.7871150970459,-29.357318878173828,-30.013545989990234,-27.905405044555664,-29.438213348388672,-28.187253952026367,-25.844383239746094,-30.75335693359375,-31.506750106811523,-27.083555221557617,-25.347217559814453,-33.336952209472656,-23.204486846923828,-24.763843536376953,-28.468351364135742,-24.73185920715332,-30.933462142944336,-28.003822326660156,-28.626880645751953,-30.514076232910156,-30.1181640625,-31.100486755371094,-26.626611709594727,-26.92216682434082,-28.96826171875,-29.316287994384766,-31.121225357055664,-27.736385345458984,-28.736940383911133,-28.26252555847168,-28.540830612182617,-29.509498596191406,-23.790042877197266,-26.288719177246094,-30.238571166992188,-30.58972930908203,-28.273147583007812,-26.89614486694336,-27.07004165649414,-27.556142807006836,-33.44483947753906,-29.376150131225586,-28.735090255737305,-27.88039207458496,-30.662273406982422,-25.744230270385742,-29.801219940185547,-27.025203704833984,-32.16712951660156,-30.601572036743164,-26.80360221862793,-30.419612884521484,-30.228052139282227,-24.289575576782227,-31.258575439453125,-25.667268753051758,-29.139949798583984,-23.67588996887207,-27.540206909179688,-23.941303253173828,-27.0703125,-24.484819412231445,-30.2933349609375,-25.907682418823242,-31.037315368652344,-26.431734085083008,-30.35759162902832,-28.94367218017578,-27.52138328552246,-24.048282623291016,-27.59453010559082,-28.78435707092285,-30.013572692871094,-26.679346084594727,-30.852619171142578,-25.33120346069336,-29.84880828857422,-32.41050338745117,-30.91957664489746,-27.89949607849121,-31.37394905090332,-27.78607940673828,-28.942426681518555,-28.023456573486328,-22.64447784423828,-32.33750534057617,-24.355754852294922,-29.74238395690918,-29.677234649658203,-26.88715171813965,-34.063438415527344,-30.798377990722656,-27.25733184814453,-28.0034236907959,-27.49017906188965,-29.487289428710938,-28.821786880493164,-29.47444725036621,-29.598915100097656,-25.88768768310547,-24.316509246826172,-31.41981315612793,-24.85758399963379,-25.268436431884766,-27.426488876342773,-24.44681739807129,-29.432493209838867,-30.961801528930664,-26.627214431762695,-26.369293212890625,-28.78040885925293,-29.681901931762695,-27.468196868896484,-28.676626205444336,-25.083288192749023,-26.272363662719727,-32.66770553588867,-25.602249145507812,-24.342159271240234,-30.363662719726562,-28.409778594970703,-24.527889251708984,-28.48273468017578,-30.74571990966797,-26.438512802124023,-23.642589569091797,-26.825912475585938,-28.38922882080078,-25.76250648498535,-27.0788631439209,-24.123775482177734,-27.798097610473633,-28.888303756713867,-26.11708641052246,-30.044225692749023,-26.92670440673828,-27.682741165161133,-30.29030418395996,-30.143962860107422,-25.7814998626709,-27.33070945739746,-29.626174926757812,-31.687698364257812,-26.78034782409668,-29.642154693603516,-23.98433494567871,-29.507007598876953,-30.474620819091797,-28.50499725341797,-27.09157371520996,-28.344989776611328,-29.25116729736328,-29.99826431274414,-26.02523422241211,-28.341087341308594,-28.36322021484375,-23.735511779785156,-28.613725662231445,-25.77323341369629,-27.276193618774414,-28.632102966308594,-26.930585861206055,-27.52992057800293,-28.107290267944336,-27.864368438720703,-26.90290069580078,-32.541351318359375,-29.369150161743164,-29.612972259521484,-26.49330711364746,-27.838672637939453,-27.095779418945312,-27.673192977905273,-26.44364356994629,-29.402963638305664,-26.309940338134766,-30.71971321105957,-28.897794723510742,-28.562284469604492,-27.565837860107422,-28.9771728515625,-28.15221405029297,-28.61106300354004,-28.400178909301758,-26.955440521240234],"y":[-22.812103271484375,-27.13236427307129,-30.12288475036621,-23.22892951965332,-26.95492172241211,-27.767873764038086,-24.29842758178711,-26.32865333557129,-32.325828552246094,-25.85442352294922,-26.07243537902832,-29.594820022583008,-30.33013153076172,-28.49605369567871,-30.833694458007812,-27.133132934570312,-24.839204788208008,-29.640169143676758,-22.948753356933594,-26.832529067993164,-29.782766342163086,-25.440824508666992,-27.547670364379883,-24.00748062133789,-27.750194549560547,-26.78800392150879,-25.275381088256836,-22.818323135375977,-26.77277374267578,-25.86844825744629,-24.539634704589844,-26.120084762573242,-29.36851692199707,-28.94501495361328,-24.12368392944336,-26.861536026000977,-22.52953338623047,-29.340885162353516,-26.23798942565918,-26.9093074798584,-29.05398941040039,-25.62008285522461,-26.22440528869629,-29.793928146362305,-24.596940994262695,-28.849611282348633,-24.298254013061523,-23.73541259765625,-30.870174407958984,-25.706865310668945,-28.40962028503418,-28.69384002685547,-27.478240966796875,-26.72382164001465,-25.998355865478516,-27.39862823486328,-27.614625930786133,-24.433231353759766,-25.694704055786133,-26.1588077545166,-26.39619255065918,-28.042747497558594,-23.752553939819336,-27.230056762695312,-29.66582679748535,-24.43213653564453,-27.712116241455078,-25.192598342895508,-28.627573013305664,-25.295276641845703,-25.795513153076172,-27.768810272216797,-26.124309539794922,-22.983169555664062,-30.284440994262695,-27.032127380371094,-26.935131072998047,-23.94964599609375,-24.895145416259766,-25.512432098388672,-27.765756607055664,-27.21888542175293,-30.68604278564453,-27.37806510925293,-23.267929077148438,-23.979982376098633,-28.94563865661621,-24.804340362548828,-23.103893280029297,-28.53502082824707,-25.39186668395996,-24.94180679321289,-23.62557029724121,-26.843551635742188,-28.47794532775879,-26.14957046508789,-23.603208541870117,-25.961429595947266,-24.902748107910156,-26.010595321655273,-27.617000579833984,-23.748497009277344,-25.5210018157959,-24.33966827392578,-27.235315322875977,-26.091209411621094,-26.796483993530273,-23.456911087036133,-26.85331153869629,-30.371004104614258,-23.426525115966797,-22.801252365112305,-30.67855453491211,-26.28957748413086,-29.675235748291016,-25.459794998168945,-26.4066219329834,-29.043201446533203,-30.600997924804688,-29.935619354248047,-25.764385223388672,-23.734933853149414,-30.532398223876953,-26.06085968017578,-27.249935150146484,-24.619234085083008,-26.541170120239258,-29.15574073791504,-25.543310165405273,-28.71436309814453,-30.18498420715332,-28.04328727722168,-29.755693435668945,-24.0363712310791,-29.050451278686523,-27.295700073242188,-26.05672836303711,-28.50531578063965,-23.08432388305664,-25.2154483795166,-25.819570541381836,-24.11327362060547,-32.82190704345703,-30.080713272094727,-25.830141067504883,-25.874727249145508,-25.919281005859375,-29.838043212890625,-27.765350341796875,-29.000734329223633,-25.739810943603516,-25.697534561157227,-26.514646530151367,-24.295307159423828,-26.3797607421875,-24.72423553466797,-23.645631790161133,-30.055360794067383,-27.115310668945312,-28.98636245727539,-27.21289825439453,-26.691865921020508,-27.493494033813477,-24.23539924621582,-27.865760803222656,-28.025888442993164,-22.62710189819336,-23.639854431152344,-23.495662689208984,-29.700300216674805,-25.105648040771484,-26.705020904541016,-30.799789428710938,-29.46636390686035,-26.410633087158203,-26.069316864013672,-28.60173797607422,-26.768827438354492,-26.187341690063477,-21.773984909057617,-24.14080047607422,-24.99478530883789,-28.880271911621094,-28.924007415771484,-26.770061492919922,-21.238292694091797,-27.76487922668457,-23.971864700317383,-24.121994018554688,-31.39949607849121,-29.351900100708008,-26.869853973388672,-24.65330696105957,-25.55305290222168,-26.116046905517578,-27.18555450439453,-24.207828521728516,-22.391935348510742,-26.44062614440918,-27.19648551940918,-28.039995193481445,-23.797222137451172,-24.286928176879883,-25.12257957458496,-25.839004516601562,-25.04374885559082,-27.614763259887695,-27.204246520996094,-25.602169036865234,-24.208145141601562,-26.73737144470215,-29.862648010253906,-25.368635177612305,-27.78744888305664,-24.94830322265625,-23.02849769592285,-29.166662216186523,-26.704771041870117,-27.0417423248291,-27.758983612060547,-24.52991485595703,-23.647092819213867,-24.27936553955078,-26.17720603942871,-26.425167083740234,-26.522323608398438,-27.02530860900879,-27.949155807495117,-24.59185028076172,-27.995018005371094,-29.1949462890625,-27.857925415039062,-31.518260955810547,-27.18427848815918,-28.695398330688477,-29.322429656982422,-23.516319274902344,-27.847639083862305,-27.27460479736328,-28.960725784301758,-23.49502944946289,-26.29165267944336,-22.82915496826172,-26.957691192626953,-31.24008560180664,-28.578392028808594,-28.22464942932129,-26.956378936767578,-26.206178665161133,-28.07477378845215],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[22.68825912475586,17.128585815429688,19.72096824645996,19.0291690826416,21.440813064575195,20.61655616760254,14.668720245361328,24.837709426879883,21.418811798095703,18.72123908996582,14.635415077209473,23.25212860107422,20.91598129272461,23.931901931762695,19.541109085083008,20.646896362304688,21.6776180267334,23.45769500732422,19.41261863708496,21.793264389038086,20.056774139404297,19.193803787231445,17.846168518066406,17.28873062133789,19.207977294921875,22.016220092773438,23.63275718688965,24.071807861328125,24.227157592773438,19.53055763244629,23.601764678955078,14.044414520263672,22.557266235351562,19.133577346801758,21.7183895111084,20.773962020874023,19.58606719970703,20.631099700927734,18.89724349975586,21.23064422607422,22.684261322021484,26.613021850585938,19.557300567626953,23.01513671875,21.490537643432617,19.75992202758789,20.983943939208984,23.294492721557617,22.73154067993164,24.129610061645508,20.124008178710938,22.968915939331055,24.596433639526367,19.13637351989746,25.438079833984375,23.665069580078125,17.3256778717041,17.246990203857422,20.016691207885742,22.335464477539062,22.579708099365234,19.05389976501465,19.632814407348633,21.50729751586914,21.95848846435547,22.0111026763916,21.826152801513672,20.104310989379883,19.43295669555664,15.718362808227539,17.103418350219727,19.043973922729492,19.238021850585938,21.74604034423828,21.8992862701416,21.11932945251465,20.98802375793457,20.502134323120117,21.139867782592773,20.932126998901367,21.79482650756836,20.954391479492188,26.87238883972168,22.807310104370117,23.014253616333008,19.905527114868164,20.217426300048828,20.90314483642578,20.382944107055664,20.895111083984375,21.480796813964844,21.870342254638672,21.881898880004883,17.91309928894043,24.1691837310791,21.54463005065918,22.216541290283203,23.882022857666016,22.845317840576172,22.06817626953125,13.23406982421875,21.110370635986328,18.1212158203125,18.798641204833984,20.58648681640625,21.790639877319336,18.426517486572266,20.557579040527344,22.26994514465332,19.490943908691406,20.698808670043945,21.55074691772461,16.52289581298828,20.270530700683594,18.858898162841797,18.349958419799805,23.71995735168457,22.44707489013672,21.35320281982422,22.21122932434082,20.984392166137695,23.750164031982422,18.874828338623047,19.841455459594727,18.971139907836914,22.201276779174805,24.511762619018555,17.868179321289062,20.568044662475586,14.937501907348633,23.528261184692383,19.91049575805664,18.91318130493164,21.0638484954834,16.798057556152344,16.23456382751465,18.122785568237305,17.982131958007812,19.849891662597656,22.230854034423828,23.24770736694336,23.199735641479492,19.761192321777344,20.099605560302734,18.563091278076172,24.20151710510254,20.205686569213867,20.866987228393555,24.211320877075195,20.058542251586914,20.178089141845703,16.94730567932129,23.131927490234375,21.710241317749023,15.883949279785156,16.335689544677734,22.60865592956543,22.246517181396484,21.534076690673828,21.95850944519043,19.288562774658203,20.244558334350586,21.002704620361328,19.126075744628906,25.284860610961914,21.531282424926758,26.180551528930664,18.447546005249023,20.36402130126953,16.33159637451172,19.364521026611328,21.08424949645996,23.08587646484375,21.425758361816406,25.775569915771484,19.77846908569336,19.485872268676758,17.723670959472656,22.807140350341797,19.31439971923828,22.443918228149414,18.728843688964844,16.764406204223633,23.75753402709961,17.737796783447266,22.015411376953125,20.3143367767334,18.708768844604492,20.318479537963867,21.419401168823242,20.266935348510742,18.31571388244629,22.107555389404297,21.739728927612305,23.50608253479004,22.863468170166016,19.511802673339844,20.99846076965332,22.784387588500977,21.726102828979492,19.727270126342773,20.297361373901367,21.8659725189209,21.483863830566406,19.444881439208984,20.790868759155273,18.302000045776367,19.996477127075195,19.334936141967773,17.994842529296875,20.446840286254883,23.260305404663086,21.033950805664062,19.845705032348633,25.994192123413086,18.969867706298828,21.441890716552734,20.892311096191406,22.966564178466797,22.80535316467285,20.18839454650879,20.877695083618164,19.865478515625,23.763141632080078,17.628477096557617,21.85353660583496,22.32240104675293,22.090795516967773,20.137548446655273,21.898235321044922,17.44066619873047,23.31387710571289,19.143285751342773,24.04416275024414,20.707073211669922,21.398487091064453,18.980052947998047,20.477210998535156,18.367643356323242,19.068035125732422,19.5159854888916,23.447284698486328,19.346601486206055,20.674190521240234,19.840129852294922,21.034839630126953,24.986467361450195,20.969926834106445,18.824251174926758,22.168678283691406],"y":[15.466756820678711,16.262550354003906,17.28451919555664,15.622554779052734,20.02674102783203,23.027767181396484,20.00188446044922,14.361998558044434,19.860614776611328,16.302326202392578,19.305105209350586,17.764877319335938,16.92913246154785,15.14468765258789,18.56190299987793,19.52238655090332,18.18653678894043,17.34645652770996,18.11683464050293,17.243215560913086,13.030884742736816,16.000524520874023,12.801233291625977,17.91886329650879,17.805017471313477,18.39486312866211,17.253795623779297,15.065544128417969,17.907697677612305,16.2225341796875,13.731605529785156,18.19330406188965,17.621965408325195,15.245977401733398,20.033967971801758,17.50638771057129,20.2559814453125,16.654205322265625,19.30339241027832,16.45628547668457,16.213211059570312,15.914449691772461,17.944791793823242,15.161856651306152,20.758934020996094,18.660747528076172,15.151981353759766,16.99028205871582,17.604576110839844,20.602569580078125,17.514888763427734,16.451570510864258,16.343862533569336,18.900859832763672,20.07329559326172,17.74210548400879,17.609195709228516,16.26103973388672,16.699615478515625,17.50763702392578,21.146743774414062,19.906442642211914,16.25141716003418,16.515302658081055,17.18448829650879,18.945964813232422,19.194965362548828,16.34311866760254,15.850971221923828,16.22774887084961,17.22256088256836,19.44672966003418,17.333036422729492,16.037857055664062,17.11711883544922,18.152076721191406,17.07600212097168,12.014978408813477,17.72388458251953,18.940298080444336,17.928558349609375,14.60434627532959,20.961044311523438,17.120838165283203,14.985398292541504,17.6035213470459,16.680408477783203,15.85981273651123,17.279611587524414,14.574183464050293,17.57388687133789,15.639575958251953,18.111249923706055,21.13006019592285,18.042491912841797,16.40350914001465,16.26378059387207,17.341686248779297,16.376924514770508,16.564300537109375,17.77366065979004,16.309885025024414,13.891131401062012,14.597448348999023,18.83154296875,20.474308013916016,21.094423294067383,19.54987144470215,17.721683502197266,21.4456844329834,17.52791976928711,18.244842529296875,17.824905395507812,18.924257278442383,18.209131240844727,17.904048919677734,18.177751541137695,18.23710823059082,17.44098472595215,17.856159210205078,16.590734481811523,16.383737564086914,22.539112091064453,18.25209617614746,15.619260787963867,13.171451568603516,14.995284080505371,15.457746505737305,15.74722671508789,15.95506763458252,12.54230785369873,19.682628631591797,20.244661331176758,18.41229820251465,14.936967849731445,17.877897262573242,19.974750518798828,18.571361541748047,17.881540298461914,16.686542510986328,16.437461853027344,17.196857452392578,18.467288970947266,19.0017147064209,18.729265213012695,14.258886337280273,16.32211685180664,18.819618225097656,17.054765701293945,15.276723861694336,17.20743751525879,18.473289489746094,14.323864936828613,14.043643951416016,18.571186065673828,14.937100410461426,17.129297256469727,15.869782447814941,14.966029167175293,15.7826566696167,18.19264030456543,15.11573600769043,17.757137298583984,18.17030906677246,18.208620071411133,17.551891326904297,18.942594528198242,20.854263305664062,15.9744234085083,20.480051040649414,17.414831161499023,17.28360939025879,19.077407836914062,15.848388671875,17.747657775878906,16.319894790649414,16.79958152770996,20.350887298583984,20.113330841064453,20.50737762451172,17.5639591217041,18.895307540893555,15.967818260192871,16.397985458374023,18.879854202270508,17.832122802734375,16.634004592895508,19.76674461364746,15.578773498535156,21.19713020324707,11.7936372756958,16.5728702545166,15.755303382873535,19.137605667114258,16.870622634887695,15.857865333557129,16.553422927856445,17.93630027770996,17.178306579589844,17.088266372680664,14.077119827270508,16.344280242919922,16.150440216064453,15.471964836120605,18.082901000976562,19.313552856445312,15.627999305725098,16.623794555664062,20.307065963745117,15.317383766174316,15.54086685180664,15.435260772705078,17.794321060180664,13.037073135375977,17.918153762817383,19.1793155670166,20.888002395629883,21.486604690551758,18.47738265991211,22.128093719482422,21.125503540039062,18.784833908081055,17.01515769958496,19.243650436401367,18.448013305664062,17.339698791503906,16.461048126220703,19.85207176208496,17.523456573486328,16.24659538269043,17.835494995117188,15.179210662841797,16.619041442871094,13.704568862915039,18.07297706604004,12.245382308959961,13.80820369720459,19.725160598754883,16.593265533447266,16.94959259033203,16.117557525634766,19.13555908203125,15.828376770019531,16.592565536499023,18.340681076049805,16.00701141357422,16.75788688659668,17.018070220947266,13.340511322021484,20.625343322753906],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-34.786277770996094,-32.98551559448242,-33.58727264404297,-37.28303527832031,-33.38277053833008,-33.271270751953125,-31.684288024902344,-35.299171447753906,-34.974403381347656,-31.43840217590332,-32.84543228149414,-34.08871078491211,-35.29766845703125,-30.418907165527344,-34.27478790283203,-33.36149597167969,-31.7674503326416,-33.34291458129883,-34.788612365722656,-38.50030517578125,-32.88014602661133,-35.28175354003906,-32.88725662231445,-31.204431533813477,-32.49185562133789,-34.02119445800781,-37.217838287353516,-36.17397689819336,-34.91342544555664,-34.141902923583984,-31.602235794067383,-32.8997802734375,-35.456417083740234,-35.421199798583984,-31.533687591552734,-34.049903869628906,-38.188629150390625,-29.703857421875,-30.142560958862305,-35.08719253540039,-36.222469329833984,-34.48225784301758,-37.310401916503906,-35.574649810791016,-33.69162368774414,-31.13685417175293,-29.61040687561035,-38.26445770263672,-32.438690185546875,-36.72296905517578,-35.173458099365234,-34.52485656738281,-30.378671646118164,-32.780120849609375,-34.232994079589844,-34.55628967285156,-33.46833801269531,-30.450965881347656,-33.79840850830078,-27.791980743408203,-33.9351692199707,-35.799049377441406,-29.29617691040039,-33.73920822143555,-35.19481658935547,-36.58304214477539,-29.361204147338867,-35.440433502197266,-32.2940559387207,-32.68912887573242,-34.96353530883789,-32.41054153442383,-33.39219284057617,-38.0408935546875,-34.32146453857422,-33.998958587646484,-33.03433609008789,-35.48695755004883,-33.647918701171875,-30.24983787536621,-27.458309173583984,-32.6208610534668,-32.14482879638672,-37.90208053588867,-33.12397384643555,-35.48960876464844,-33.141395568847656,-35.204132080078125,-32.59781265258789,-33.40555953979492,-29.193933486938477,-37.29500198364258,-31.702800750732422,-33.75777053833008,-31.9945011138916,-33.33823013305664,-33.82190704345703,-30.72000503540039,-32.33026885986328,-31.763364791870117,-31.485013961791992,-32.739837646484375,-33.248661041259766,-31.202646255493164,-30.945985794067383,-35.889320373535156,-33.4879035949707,-34.814308166503906,-32.57730484008789,-30.632579803466797,-32.53888702392578,-33.30049133300781,-34.517921447753906,-33.733421325683594,-32.375858306884766,-32.33277893066406,-32.110069274902344,-35.4594841003418,-29.849374771118164,-30.483699798583984,-34.05622100830078,-33.54214096069336,-34.39543151855469,-30.638376235961914,-36.15119171142578,-35.58393478393555,-35.437015533447266,-37.20899963378906,-31.641277313232422,-36.26168441772461,-34.41654586791992,-31.433635711669922,-33.732845306396484,-34.75202941894531,-37.491004943847656,-36.272953033447266,-33.23356628417969,-35.070472717285156,-33.84282684326172,-33.24551010131836,-35.690059661865234,-33.66445541381836,-32.67445373535156,-35.715152740478516,-34.331390380859375,-35.909942626953125,-31.832311630249023,-35.075260162353516,-35.961273193359375,-34.492095947265625,-35.405517578125,-34.78856658935547,-31.94954490661621,-35.32503128051758,-32.70454406738281,-32.44330978393555,-35.65006637573242,-33.0042610168457,-36.37570571899414,-39.180702209472656,-34.010467529296875,-30.172147750854492,-30.388469696044922,-33.86698532104492,-31.09158706665039,-35.091957092285156,-32.23052215576172,-32.230552673339844,-33.65658187866211,-36.60489273071289,-32.6712760925293,-31.787094116210938,-39.72444534301758,-32.18280029296875,-32.173954010009766,-35.30138397216797,-32.24757766723633,-38.44367980957031,-34.00872802734375,-36.07270050048828,-32.56061553955078,-31.198057174682617,-38.06668472290039,-32.08266830444336,-34.10511016845703,-32.27848434448242,-33.53029251098633,-35.75688171386719,-37.00090789794922,-37.43157958984375,-35.256370544433594,-35.74262237548828,-33.57838821411133,-33.9820556640625,-34.93687438964844,-30.481857299804688,-30.772396087646484,-34.984046936035156,-36.77357482910156,-32.43996810913086,-37.18902587890625,-31.849388122558594,-33.893592834472656,-34.385475158691406,-31.908845901489258,-34.40327453613281,-35.20296096801758,-32.897308349609375,-33.468353271484375,-32.69287109375,-32.62487030029297,-29.013643264770508,-32.9890022277832,-35.06705856323242,-33.12605285644531,-35.269203186035156,-34.974239349365234,-35.4029541015625,-32.846031188964844,-35.755279541015625,-30.473220825195312,-36.41853713989258,-38.344486236572266,-38.17719650268555,-33.39777755737305,-32.47884750366211,-31.982189178466797,-31.989604949951172,-34.37651062011719,-30.552669525146484,-36.7627067565918,-34.26247787475586,-36.41085433959961,-35.82783126831055,-37.29932403564453,-31.85589027404785,-29.23617935180664,-35.68738555908203,-36.75481033325195,-35.989112854003906,-29.04294204711914,-34.76285171508789,-33.49700927734375,-32.40103530883789,-32.32304000854492,-33.52954864501953,-37.26081466674805,-29.07168960571289,-32.086753845214844,-31.10124969482422],"y":[-1.3079537153244019,-1.5687673091888428,-5.015208721160889,0.37808191776275635,0.08640837669372559,-1.205498218536377,-0.23822057247161865,-2.8604302406311035,0.08255338668823242,-3.4534318447113037,0.5474429130554199,-1.5044759511947632,-2.4305291175842285,0.2408963441848755,-4.642973899841309,-1.716383457183838,0.8878538608551025,-0.702662467956543,-1.6856334209442139,-0.057710886001586914,-1.6463559865951538,1.5958967208862305,-2.926636219024658,-0.7453574538230896,-2.6665797233581543,1.6881499290466309,1.697415828704834,1.3063700199127197,-2.780424118041992,-1.8838708400726318,-1.9565043449401855,1.3191134929656982,2.052807569503784,-0.8651090860366821,-3.1164839267730713,-0.5312391519546509,-0.5047979354858398,-0.5590869188308716,-0.3738064765930176,-4.1491498947143555,0.23831665515899658,-0.290813684463501,-4.313520431518555,0.19596946239471436,-4.235535621643066,0.38339054584503174,-3.7878639698028564,1.1655545234680176,2.4589951038360596,0.8747231960296631,-1.6290003061294556,-5.405876159667969,-4.860082626342773,0.19045615196228027,-3.5267229080200195,-2.6222219467163086,1.0459091663360596,-2.485255718231201,-0.5097628831863403,0.5758223533630371,-4.8714752197265625,2.531646728515625,0.9231863021850586,-0.4080582857131958,0.6768913269042969,-2.487992763519287,-7.095523357391357,-0.4914283752441406,-1.4958784580230713,2.6121230125427246,0.4405151605606079,-1.8684362173080444,-1.8774712085723877,-0.7313384413719177,2.054952621459961,-4.108464241027832,1.465702772140503,-2.130704402923584,-5.371101379394531,-2.226217746734619,0.4791533946990967,-4.600157260894775,-0.5742153525352478,1.7084503173828125,-1.1896709203720093,-1.931398868560791,-2.3991036415100098,-1.1595830917358398,-0.8953620195388794,-3.7781591415405273,-1.5868693590164185,-4.069796562194824,-7.2422285079956055,-3.0357391834259033,-0.1505817174911499,-2.2281394004821777,-2.1901841163635254,-2.231431722640991,-2.723644733428955,-3.596595048904419,-1.0045478343963623,2.7403039932250977,-3.0648016929626465,0.7356681823730469,1.164578914642334,-0.16411042213439941,0.880206823348999,0.33174729347229004,0.8971118927001953,1.1774938106536865,-3.1678466796875,-2.829467535018921,-1.0820974111557007,1.8266475200653076,2.130237579345703,-3.415058135986328,-2.110994338989258,0.37157702445983887,-0.006573319435119629,1.680156946182251,1.8811981678009033,-3.700756788253784,-5.228647232055664,-0.2259230613708496,-3.3380284309387207,-2.4042131900787354,0.3517463207244873,-1.1191811561584473,-1.2734150886535645,-3.3897242546081543,-0.5914851427078247,-1.345471978187561,0.12841904163360596,-1.1998852491378784,-2.7191357612609863,-0.559424102306366,-1.6853903532028198,-0.5660925507545471,-0.8014736175537109,-0.03222167491912842,-1.2246586084365845,-6.486256122589111,-4.273756980895996,2.909043788909912,-3.4486255645751953,0.058191537857055664,3.4782629013061523,-2.324270725250244,-0.6814618110656738,-1.7507152557373047,1.1072652339935303,-4.672080039978027,-2.457566499710083,-1.3932610750198364,-0.08560097217559814,-1.619522213935852,-3.8886544704437256,-0.004502654075622559,-2.695192575454712,-1.9960553646087646,0.2785458564758301,-1.0178179740905762,-3.2211780548095703,0.4344754219055176,-1.0448927879333496,-0.7436995506286621,3.558774948120117,-6.4076924324035645,3.9666824340820312,2.0238850116729736,0.08738267421722412,-3.6296193599700928,-0.6219260096549988,-1.1914854049682617,-3.99352765083313,-5.24586296081543,-1.7896080017089844,-0.3870319128036499,-1.1105537414550781,-1.2487242221832275,0.42590105533599854,-7.296867370605469,-2.5229814052581787,-2.7447023391723633,-3.060511350631714,-0.3849477767944336,-0.21444380283355713,-0.7106090188026428,-1.9749436378479004,-1.8415688276290894,-3.6787853240966797,-3.060153007507324,0.2663658857345581,-1.5226943492889404,-4.5513596534729,-1.4911593198776245,-2.366349935531616,0.6045627593994141,1.3657903671264648,-5.274683475494385,-2.3139519691467285,-3.0115299224853516,-1.3747377395629883,-4.709768295288086,-5.919867515563965,-1.9845699071884155,-1.6104366779327393,-1.5923974514007568,-3.7274768352508545,-1.5101288557052612,2.482415199279785,-0.872113049030304,-0.14150989055633545,-0.9163210988044739,-0.1650829315185547,-1.8043817281723022,-1.8429034948349,-0.7156722545623779,-5.331514358520508,1.6370668411254883,-0.18635833263397217,-0.890454113483429,-0.9139787554740906,-6.096468925476074,2.098078489303589,0.1454155445098877,-2.941251039505005,-8.594369888305664,-1.2922152280807495,-1.2021934986114502,-0.6776652336120605,-3.4323456287384033,-2.3471410274505615,-3.332916736602783,-3.2646942138671875,-7.615720748901367,-4.08339786529541,-5.473243713378906,-1.8892383575439453,-1.722118854522705,0.17733514308929443,-3.5523600578308105,-3.657548666000366,-0.34082555770874023,2.0679662227630615,-1.8558177947998047,-2.3761096000671387,-3.269364356994629,-1.8960355520248413,-2.1909849643707275],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}},"xaxis":{"zeroline":false,"range":[-40,40]},"yaxis":{"zeroline":false,"range":[-40,40]},"updatemenus":[{"buttons":[{"args":[null],"label":"Play","method":"animate"},{"args":[[null],{"frame_duration":0,"frame_redraw":"False","mode":"immediate","transition_duration":0}],"label":"Pause","method":"animate"}],"type":"buttons"}]},                        {"responsive": true}                    ).then(function(){
                            Plotly.addFrames('da1905ce-daae-44fb-a7c9-5e15f048904c', [{"data":[{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-18.425283432006836,-19.442867279052734,-19.854276657104492,-17.30156898498535,-19.117082595825195,-15.677632331848145,-16.907806396484375,-17.445497512817383,-11.341974258422852,-18.200695037841797,-17.12497329711914,-14.913961410522461,-16.144580841064453,-18.372589111328125,-19.294767379760742,-19.257606506347656,-18.581594467163086,-14.373680114746094,-19.242040634155273,-19.5387020111084,-16.264314651489258,-12.42320442199707,-18.451215744018555,-14.812079429626465,-19.69365692138672,-18.194053649902344,-17.762645721435547,-16.024280548095703,-17.579368591308594,-14.169445037841797,-17.940326690673828,-19.92470932006836,-16.432634353637695,-13.702322006225586,-18.81943702697754,-19.135713577270508,-18.676517486572266,-16.721593856811523,-15.12582015991211,-16.347347259521484,-19.844532012939453,-18.49294662475586,-16.823806762695312,-16.128559112548828,-20.409557342529297,-10.699813842773438,-15.691268920898438,-17.062101364135742,-18.343050003051758,-16.38997459411621,-14.201020240783691,-14.336832046508789,-17.710176467895508,-16.444183349609375,-17.2982120513916,-17.644861221313477,-19.40289306640625,-17.765161514282227,-19.959674835205078,-17.096742630004883,-17.082073211669922,-17.194229125976562,-15.314300537109375,-18.716243743896484,-16.28208351135254,-20.57084083557129,-17.447330474853516,-18.80275535583496,-17.124345779418945,-17.731937408447266,-12.793999671936035,-14.34986686706543,-18.603578567504883,-15.424489974975586,-17.606447219848633,-19.777353286743164,-19.87086296081543,-13.475830078125,-15.691652297973633,-20.595218658447266,-21.184223175048828,-17.003326416015625,-15.569633483886719,-17.106281280517578,-19.069355010986328,-16.60281753540039,-15.861335754394531,-19.614273071289062,-17.604625701904297,-18.2739200592041,-16.98937225341797,-20.406129837036133,-19.54855728149414,-13.558757781982422,-17.915620803833008,-17.965360641479492,-13.702252388000488,-16.256093978881836,-19.1097412109375,-15.704054832458496,-14.714237213134766,-16.749597549438477,-16.89400863647461,-16.529354095458984,-13.133790016174316,-16.091548919677734,-16.132667541503906,-17.34357261657715,-20.753503799438477,-18.887680053710938,-17.931848526000977,-14.335396766662598,-17.152362823486328,-16.733449935913086,-15.771133422851562,-18.076326370239258,-14.912118911743164,-16.72152328491211,-16.40565299987793,-17.783065795898438,-16.552995681762695,-20.175418853759766,-18.91767120361328,-14.851733207702637,-22.456077575683594,-22.31831932067871,-20.516998291015625,-18.038631439208984,-19.38145637512207,-16.016443252563477,-16.660627365112305,-18.12176513671875,-20.253890991210938,-14.825736999511719,-16.7254638671875,-20.110719680786133,-17.36981964111328,-21.927078247070312,-20.48758888244629,-14.93463134765625,-18.991792678833008,-18.725482940673828,-16.87033462524414,-14.785836219787598,-16.712627410888672,-14.988848686218262,-16.716533660888672,-15.422408103942871,-18.487947463989258,-17.83020782470703,-13.686074256896973,-19.089563369750977,-13.958005905151367,-18.330406188964844,-20.033981323242188,-17.421554565429688,-16.61069679260254,-21.204364776611328,-14.315523147583008,-16.56385040283203,-19.71274757385254,-17.46829605102539,-19.984617233276367,-17.815505981445312,-15.037534713745117,-15.395480155944824,-16.31277084350586,-19.262632369995117,-18.33284568786621,-14.347151756286621,-14.941446304321289,-21.142486572265625,-16.67853355407715,-14.444382667541504,-16.91511344909668,-16.327878952026367,-18.10141372680664,-15.081724166870117,-15.674304962158203,-18.1227970123291,-13.228094100952148,-22.18153190612793,-13.028053283691406,-21.443737030029297,-18.890525817871094,-21.532024383544922,-20.775909423828125,-20.798927307128906,-13.409114837646484,-18.51154327392578,-16.45906639099121,-20.22492218017578,-17.61229705810547,-16.918779373168945,-16.7662353515625,-17.566591262817383,-15.448262214660645,-20.296810150146484,-15.499092102050781,-17.182064056396484,-21.81060791015625,-13.5812349319458,-17.904890060424805,-16.715087890625,-18.669212341308594,-13.934989929199219,-12.094585418701172,-18.873226165771484,-18.156755447387695,-19.48307228088379,-17.80398941040039,-15.29049301147461,-19.86734390258789,-18.07574462890625,-20.173376083374023,-20.776090621948242,-22.112022399902344,-16.130434036254883,-19.273752212524414,-17.132108688354492,-14.767446517944336,-20.230281829833984,-16.91587257385254,-17.539005279541016,-15.170931816101074,-15.86638355255127,-21.568635940551758,-19.26389503479004,-14.286490440368652,-12.985215187072754,-16.15493392944336,-14.671684265136719,-16.989303588867188,-16.81963539123535,-14.954002380371094,-22.385000228881836,-15.516860961914062,-19.535491943359375,-22.129812240600586,-16.47366714477539,-15.84201431274414,-13.77514934539795,-16.683500289916992,-20.418292999267578,-17.364913940429688,-18.948177337646484,-18.144851684570312,-19.285493850708008,-17.751375198364258,-15.398202896118164],"y":[-32.0471305847168,-25.79459571838379,-28.21319580078125,-29.61461067199707,-26.414121627807617,-25.571475982666016,-26.669921875,-28.512489318847656,-24.65479278564453,-29.242782592773438,-27.07906723022461,-28.532981872558594,-28.21306037902832,-27.536712646484375,-28.805612564086914,-26.684741973876953,-31.968212127685547,-28.123043060302734,-30.623197555541992,-31.188819885253906,-29.770784378051758,-27.890092849731445,-28.920513153076172,-30.594266891479492,-28.868934631347656,-29.73366355895996,-31.046531677246094,-27.099119186401367,-27.822858810424805,-31.817283630371094,-28.85376739501953,-28.674978256225586,-27.691761016845703,-27.07562828063965,-26.55228042602539,-28.963993072509766,-29.280261993408203,-25.576885223388672,-27.616357803344727,-28.410961151123047,-28.432437896728516,-24.772382736206055,-26.533042907714844,-29.083641052246094,-28.417675018310547,-33.15908432006836,-26.761632919311523,-31.91179847717285,-27.873918533325195,-24.95347023010254,-28.84813117980957,-27.899263381958008,-27.130008697509766,-24.683143615722656,-28.07090187072754,-26.792179107666016,-28.365877151489258,-27.99596405029297,-26.80953025817871,-25.778608322143555,-29.421741485595703,-26.749692916870117,-25.46530532836914,-29.185876846313477,-28.248350143432617,-27.35129165649414,-26.6688289642334,-27.777109146118164,-26.50042724609375,-25.034025192260742,-24.580745697021484,-25.654388427734375,-30.404144287109375,-27.516550064086914,-31.38884162902832,-30.42477798461914,-26.350528717041016,-29.308488845825195,-27.44247055053711,-30.167499542236328,-27.037939071655273,-26.606548309326172,-31.066612243652344,-26.774595260620117,-25.593381881713867,-29.70121192932129,-24.696298599243164,-26.036550521850586,-23.817855834960938,-30.95263671875,-26.585054397583008,-25.31855010986328,-26.76004409790039,-28.909452438354492,-32.46820068359375,-28.658334732055664,-30.2910213470459,-29.46282386779785,-27.420970916748047,-29.28928565979004,-29.56557846069336,-28.417875289916992,-25.40730094909668,-31.34650993347168,-24.860137939453125,-25.334754943847656,-28.422603607177734,-26.8785457611084,-27.0628719329834,-26.893936157226562,-31.189964294433594,-29.768596649169922,-30.777780532836914,-28.05354881286621,-28.36737632751465,-23.168020248413086,-24.432273864746094,-28.65330696105957,-28.32551383972168,-27.96194839477539,-26.629575729370117,-34.019630432128906,-28.46030044555664,-32.65538787841797,-29.861289978027344,-31.152997970581055,-30.107206344604492,-27.85457420349121,-28.851152420043945,-26.050661087036133,-28.99776268005371,-23.90937042236328,-31.035280227661133,-29.26023292541504,-29.384498596191406,-27.294466018676758,-23.9848690032959,-31.028064727783203,-30.093748092651367,-30.33407974243164,-24.873268127441406,-27.408409118652344,-30.312875747680664,-26.252355575561523,-28.4118595123291,-27.673553466796875,-27.310714721679688,-30.021638870239258,-25.232114791870117,-29.83550262451172,-27.583023071289062,-27.861963272094727,-29.395198822021484,-29.57470703125,-27.718341827392578,-28.09288787841797,-30.316844940185547,-28.772842407226562,-30.75018882751465,-28.81464385986328,-28.529678344726562,-29.6528263092041,-29.618427276611328,-27.604419708251953,-25.726245880126953,-22.686126708984375,-27.512224197387695,-27.50852394104004,-27.696041107177734,-32.215457916259766,-32.04732131958008,-25.400760650634766,-31.223447799682617,-25.048992156982422,-28.2103214263916,-28.683570861816406,-27.72000503540039,-27.168046951293945,-30.6748046875,-26.077951431274414,-29.446605682373047,-31.54479217529297,-25.68828773498535,-31.99863624572754,-28.98000144958496,-28.14067268371582,-28.900911331176758,-30.646015167236328,-30.50232696533203,-30.927352905273438,-31.025882720947266,-28.365720748901367,-30.860807418823242,-31.36286735534668,-29.728595733642578,-29.8175106048584,-29.060991287231445,-23.956897735595703,-24.516084671020508,-27.825525283813477,-26.81167221069336,-27.312557220458984,-29.933609008789062,-25.270204544067383,-28.531633377075195,-27.22648048400879,-26.630380630493164,-31.36478614807129,-28.484390258789062,-27.74081039428711,-28.31574058532715,-26.071067810058594,-28.804800033569336,-26.31757164001465,-25.852022171020508,-25.886653900146484,-30.749074935913086,-30.350994110107422,-26.842615127563477,-29.34833335876465,-30.154848098754883,-29.82087516784668,-31.134145736694336,-34.633602142333984,-26.403047561645508,-29.826433181762695,-27.80544662475586,-30.34566307067871,-28.359270095825195,-28.178205490112305,-26.689130783081055,-34.38003921508789,-29.775415420532227,-28.883249282836914,-30.41360855102539,-29.668733596801758,-28.936614990234375,-27.57533073425293,-27.462566375732422,-28.22569465637207,-28.01352882385254,-28.511682510375977,-31.460168838500977,-27.07773208618164,-28.2685604095459,-30.80533790588379,-29.018760681152344,-27.95978546142578,-28.012292861938477,-30.937999725341797],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.285907745361328,20.79730796813965,17.1842098236084,17.530088424682617,22.114276885986328,21.224266052246094,20.020795822143555,14.8724365234375,24.704389572143555,21.13739585876465,18.702177047729492,18.792266845703125,18.643869400024414,16.03401756286621,22.449195861816406,17.934215545654297,18.73138427734375,19.272348403930664,18.451953887939453,16.485170364379883,20.92300033569336,14.866406440734863,15.106898307800293,17.726911544799805,18.86469268798828,19.690961837768555,20.837188720703125,21.72953987121582,15.416463851928711,17.630985260009766,16.862545013427734,18.76531410217285,18.82526206970215,22.656484603881836,23.568374633789062,19.596139907836914,18.80851936340332,18.663249969482422,18.77165985107422,22.054811477661133,17.666528701782227,19.300880432128906,16.047073364257812,21.56205940246582,15.830434799194336,20.371681213378906,21.5921630859375,15.514796257019043,19.55213737487793,18.390371322631836,26.898746490478516,19.914268493652344,16.61199188232422,19.533111572265625,16.40852928161621,18.65648078918457,20.971582412719727,22.689708709716797,19.2409610748291,16.04047203063965,15.055133819580078,15.226943969726562,17.601238250732422,19.69058609008789,20.979843139648438,18.250173568725586,17.544164657592773,17.28986930847168,18.633146286010742,17.5772762298584,20.41511344909668,17.256332397460938,19.839759826660156,14.76276683807373,13.951339721679688,13.569784164428711,19.831661224365234,17.9209041595459,17.080429077148438,16.31656837463379,16.932615280151367,17.511669158935547,15.450879096984863,17.715898513793945,16.341995239257812,18.15589141845703,18.1396541595459,20.288982391357422,15.750883102416992,18.8389892578125,17.769147872924805,19.434377670288086,20.52445411682129,16.095094680786133,17.322858810424805,18.679353713989258,17.533079147338867,17.640201568603516,20.267850875854492,15.81650161743164,17.364120483398438,20.37299346923828,15.63473129272461,21.850730895996094,14.726609230041504,20.915184020996094,19.197429656982422,15.555505752563477,16.891212463378906,18.69365119934082,20.060701370239258,15.732789039611816,18.13576889038086,18.797388076782227,18.25948715209961,17.53692054748535,16.875978469848633,18.693286895751953,18.38149070739746,22.246950149536133,17.974376678466797,19.922273635864258,21.475757598876953,18.350488662719727,21.047208786010742,23.865530014038086,18.39934730529785,19.990440368652344,22.33189582824707,11.368806838989258,18.428998947143555,17.9964656829834,19.698894500732422,18.817657470703125,16.28460121154785,19.352741241455078,14.888886451721191,14.288993835449219,17.679946899414062,18.64801025390625,17.24355125427246,18.962034225463867,19.223405838012695,17.017751693725586,19.932628631591797,14.636707305908203,17.708106994628906,19.428251266479492,19.068744659423828,23.207534790039062,17.78851318359375,19.224851608276367,17.71001434326172,23.529338836669922,19.45734405517578,17.588672637939453,15.998174667358398,14.496673583984375,14.456317901611328,18.55048179626465,15.665937423706055,19.813478469848633,18.41654396057129,18.342281341552734,13.745832443237305,15.779996871948242,16.436847686767578,20.352476119995117,17.190345764160156,22.926172256469727,21.2437686920166,20.55301284790039,18.71432113647461,18.52701187133789,17.08238983154297,18.85123062133789,18.6614990234375,15.867292404174805,18.305500030517578,16.103492736816406,17.103107452392578,18.22189712524414,20.91551399230957,20.000137329101562,18.631103515625,19.712915420532227,18.7369384765625,22.365671157836914,17.860729217529297,19.49117088317871,21.995403289794922,23.19469451904297,16.083406448364258,18.543041229248047,20.880332946777344,14.853985786437988,16.011058807373047,19.552581787109375,18.635080337524414,24.45953369140625,19.89056396484375,19.109867095947266,18.73686408996582,21.650571823120117,23.97255516052246,15.444473266601562,21.070125579833984,18.82577133178711,20.308700561523438,19.049758911132812,21.11652183532715,17.7515869140625,17.980010986328125,18.25163459777832,17.819499969482422,18.529132843017578,21.021656036376953,15.514059066772461,18.30569076538086,19.622093200683594,22.59380340576172,20.413806915283203,20.886690139770508,15.171564102172852,18.679607391357422,18.53107452392578,14.847296714782715,21.327430725097656,15.348832130432129,19.250690460205078,15.975162506103516,17.023046493530273,22.086414337158203,17.227558135986328,16.772428512573242,14.725050926208496,15.795086860656738,15.593132972717285,16.44536781311035,14.051198959350586,19.301485061645508,17.936670303344727,16.413143157958984,18.226226806640625,24.488990783691406,18.75320816040039,19.835208892822266,17.656503677368164,15.857093811035156,18.599315643310547],"y":[-2.7043209075927734,-6.509754180908203,0.10772943496704102,-6.171239852905273,-3.524801015853882,-4.109977722167969,-3.9810469150543213,-3.0426979064941406,-4.877400875091553,-3.196359872817993,-4.218727111816406,-7.716949462890625,-2.501232147216797,-2.3392739295959473,-6.965503692626953,-4.852914810180664,-5.269769191741943,0.6401042938232422,-7.980230808258057,0.1647968292236328,-9.481250762939453,-0.6962454319000244,-3.621338129043579,-3.8732447624206543,-4.000556945800781,-5.998170852661133,-3.602630138397217,-6.2851409912109375,-5.640164852142334,-2.2132859230041504,-1.6206212043762207,-5.713179588317871,-5.192222595214844,-1.6375646591186523,-2.9885497093200684,-1.2236747741699219,-3.304851770401001,-4.592470169067383,-3.335561752319336,-2.2755558490753174,-5.218547821044922,-1.417480707168579,-4.367788791656494,-6.531299591064453,2.026122570037842,-4.1139678955078125,-2.998929023742676,-5.617583751678467,-6.195955753326416,-2.7702388763427734,-1.9186731576919556,-5.377082824707031,-6.060332298278809,-4.623826026916504,-3.166316270828247,-0.5454671382904053,-1.863804817199707,-4.867537021636963,-5.658323764801025,-4.052438735961914,-3.2562546730041504,-3.9043540954589844,-4.773362636566162,-4.914124488830566,-1.450181484222412,-6.346890926361084,-5.7086334228515625,-3.58909273147583,-1.0209121704101562,0.0093231201171875,-0.905308723449707,-6.473879814147949,-3.917097568511963,-1.5587198734283447,-3.071938991546631,-2.888920783996582,-2.7852091789245605,-2.253837823867798,-4.838411808013916,-1.800037145614624,-3.939683198928833,-0.6961755752563477,-4.90866756439209,-2.7949814796447754,-6.738895416259766,-8.036633491516113,-4.805726528167725,-5.475495338439941,-3.7411482334136963,-1.1562025547027588,-3.1100802421569824,-3.6043334007263184,1.2808589935302734,-3.629106283187866,-3.889923095703125,-3.7333695888519287,-6.806085109710693,-5.8205671310424805,-5.128482818603516,-4.0107102394104,-4.09036922454834,-2.980588436126709,0.498568058013916,0.0031003952026367188,-1.2846779823303223,-1.6334819793701172,-2.5716793537139893,-8.118017196655273,-0.5494215488433838,-1.9748762845993042,-0.26900291442871094,-3.5758397579193115,-4.82087516784668,-2.970335006713867,-1.5021917819976807,-2.7392873764038086,-4.956005573272705,-3.3272387981414795,-2.2053232192993164,-4.835358619689941,-2.9242546558380127,-8.266316413879395,-3.5694403648376465,-2.321836471557617,-7.347557544708252,-5.546506881713867,0.9638981819152832,-2.259000062942505,-6.085452079772949,-4.532872200012207,-3.2601137161254883,-0.3713109493255615,-2.9808359146118164,-6.659450531005859,-2.3654940128326416,-3.8557751178741455,-5.325628280639648,-4.131223678588867,-7.263247489929199,-5.00927734375,-4.907634735107422,-3.329878330230713,-6.420282363891602,-4.471495151519775,-3.868802785873413,-3.4477405548095703,-7.645572185516357,-5.764829158782959,-1.9584074020385742,-3.9244496822357178,-0.6639175415039062,-2.607348680496216,-4.216252326965332,-0.7232744693756104,-2.982891082763672,-2.080137252807617,-2.8143386840820312,-5.916345596313477,-4.008955001831055,-4.793750762939453,-1.8198908567428589,-3.817965507507324,-5.170243740081787,-1.0879781246185303,-7.4145708084106445,-0.0548100471496582,0.17017674446105957,-5.223673343658447,-3.7200233936309814,-7.057165145874023,-6.392621040344238,-0.09973978996276855,0.26169800758361816,-5.56971549987793,-9.172874450683594,-6.467351913452148,-3.9755682945251465,-3.9636921882629395,-0.766258716583252,-4.885104179382324,-1.8571819067001343,-3.8930060863494873,-1.914812445640564,-1.7391928434371948,-4.4254326820373535,-5.248516082763672,-0.9376182556152344,-4.670827388763428,-3.927293300628662,0.7906813621520996,-3.635507583618164,-4.733575820922852,-7.6859846115112305,0.08954834938049316,-6.103554725646973,-5.123003005981445,-6.102663040161133,-5.29023551940918,-3.901334762573242,-4.80409049987793,-5.924502372741699,-4.235668182373047,-0.10431289672851562,-3.679736852645874,-5.7222700119018555,-1.1529746055603027,-6.837234973907471,-10.207952499389648,-3.3985257148742676,-0.6541595458984375,-6.354996681213379,-2.2060937881469727,-4.535785675048828,-5.4546966552734375,-1.9065525531768799,-2.727912425994873,-2.19783353805542,-3.9794557094573975,-1.3096957206726074,-6.270785331726074,-3.254026412963867,-0.026159286499023438,-3.0613555908203125,-6.355772972106934,-4.198906421661377,-1.1111929416656494,-0.49185729026794434,-5.250266075134277,-3.311692953109741,-1.5483345985412598,-3.674252986907959,-5.243827819824219,-3.5912892818450928,-3.8679404258728027,-6.431638717651367,-2.750701665878296,-4.8833088874816895,-2.7848410606384277,-4.069465160369873,-3.088862419128418,-4.8706207275390625,-1.2166154384613037,-5.237183094024658,-6.589001655578613,-3.629451036453247,-2.2973575592041016,-2.1324844360351562,-0.999638557434082,-3.615241527557373,-4.449435234069824],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-8.579100608825684,-14.010672569274902,-14.513997077941895,-15.05034065246582,-10.546951293945312,-8.86486530303955,-12.015640258789062,-10.1292085647583,-11.806747436523438,-8.698286056518555,-9.008814811706543,-10.674229621887207,-11.277036666870117,-12.262077331542969,-12.018115043640137,-8.263415336608887,-10.121085166931152,-5.30994176864624,-14.889737129211426,-11.259674072265625,-8.023612022399902,-14.069195747375488,-11.5695161819458,-18.34925079345703,-11.678018569946289,-8.612247467041016,-13.172802925109863,-12.407089233398438,-8.792895317077637,-6.425328731536865,-10.782958030700684,-5.683115482330322,-10.473514556884766,-10.929500579833984,-13.145326614379883,-7.997108459472656,-10.454900741577148,-12.228693962097168,-13.031203269958496,-10.17485237121582,-11.206878662109375,-10.747255325317383,-16.32989501953125,-14.766944885253906,-9.535654067993164,-7.845025539398193,-13.410931587219238,-14.541098594665527,-11.091876029968262,-13.486000061035156,-11.11856460571289,-11.103869438171387,-7.814505577087402,-12.761046409606934,-8.535818099975586,-9.560537338256836,-8.003549575805664,-10.495542526245117,-9.470699310302734,-11.129680633544922,-10.196456909179688,-14.469796180725098,-8.73503303527832,-11.43630313873291,-9.951140403747559,-10.646602630615234,-10.693506240844727,-12.884533882141113,-13.111177444458008,-11.674116134643555,-10.491535186767578,-9.4536714553833,-10.394414901733398,-5.976884841918945,-12.81216049194336,-8.700218200683594,-8.83251667022705,-9.277288436889648,-14.534629821777344,-13.159838676452637,-8.2501802444458,-13.979494094848633,-7.69365930557251,-13.975175857543945,-8.688097953796387,-9.187835693359375,-10.18696403503418,-12.265019416809082,-10.441424369812012,-12.797905921936035,-7.4091997146606445,-11.501553535461426,-11.511398315429688,-12.68610668182373,-8.08111572265625,-9.222166061401367,-13.489861488342285,-13.197281837463379,-10.057047843933105,-11.867032051086426,-8.768755912780762,-8.353048324584961,-13.836408615112305,-12.194673538208008,-9.63365650177002,-10.623037338256836,-16.568504333496094,-12.599166870117188,-9.693976402282715,-15.027666091918945,-9.357027053833008,-11.587748527526855,-16.095779418945312,-7.353463172912598,-11.70658016204834,-15.886924743652344,-9.86582088470459,-12.38827896118164,-8.525469779968262,-11.691880226135254,-11.018645286560059,-9.173951148986816,-10.892011642456055,-14.551121711730957,-10.090612411499023,-9.941912651062012,-10.800487518310547,-6.488488674163818,-17.684064865112305,-8.25571060180664,-7.884257793426514,-9.230748176574707,-14.27336311340332,-6.527972221374512,-8.942853927612305,-12.84288501739502,-11.504791259765625,-12.8230619430542,-11.953474044799805,-11.439977645874023,-12.161506652832031,-12.676198959350586,-12.84421157836914,-8.466421127319336,-10.02928638458252,-15.196163177490234,-13.270657539367676,-11.809050559997559,-13.238069534301758,-10.774357795715332,-13.11187744140625,-11.827685356140137,-11.208446502685547,-9.358530044555664,-8.390848159790039,-9.566508293151855,-10.056886672973633,-12.978875160217285,-6.733163356781006,-11.81070327758789,-9.520917892456055,-11.07801342010498,-10.623744010925293,-10.204333305358887,-8.742179870605469,-9.267026901245117,-9.723825454711914,-10.127391815185547,-11.12968635559082,-11.555424690246582,-10.689496994018555,-12.561797142028809,-6.911267280578613,-13.814241409301758,-6.106613636016846,-8.544097900390625,-13.208921432495117,-15.629257202148438,-11.55489730834961,-6.757113456726074,-9.691598892211914,-10.248163223266602,-5.443113327026367,-10.154929161071777,-9.293098449707031,-8.985886573791504,-12.611130714416504,-7.694052696228027,-11.935733795166016,-14.812773704528809,-13.496572494506836,-9.690009117126465,-8.743733406066895,-12.370203018188477,-13.763587951660156,-11.901032447814941,-4.670057773590088,-9.945587158203125,-11.442387580871582,-9.95588207244873,-13.887988090515137,-11.537931442260742,-8.262906074523926,-8.673343658447266,-14.847832679748535,-7.945804595947266,-12.744565963745117,-9.703649520874023,-9.8018159866333,-11.981284141540527,-8.29502010345459,-14.439075469970703,-8.556591033935547,-14.827993392944336,-10.283758163452148,-12.0502347946167,-10.731298446655273,-12.340343475341797,-11.376541137695312,-13.243505477905273,-9.012519836425781,-10.177419662475586,-14.337030410766602,-9.902543067932129,-11.152688026428223,-10.001517295837402,-5.549180030822754,-9.67077350616455,-12.813430786132812,-10.372093200683594,-12.902101516723633,-7.566817283630371,-9.946921348571777,-5.6056413650512695,-12.722561836242676,-11.385297775268555,-9.05480670928955,-12.55107593536377,-10.938796043395996,-12.469841957092285,-12.457233428955078,-12.033998489379883,-13.547700881958008,-10.890287399291992,-11.352169036865234,-11.798006057739258,-12.265260696411133,-8.367952346801758,-10.619942665100098,-11.750938415527344],"y":[24.166536331176758,24.21129608154297,23.915916442871094,23.46324348449707,26.648351669311523,22.24660301208496,24.89813804626465,24.031131744384766,19.86046028137207,24.026025772094727,26.82074737548828,22.338207244873047,20.5983943939209,25.4077091217041,25.503665924072266,24.059528350830078,23.425127029418945,20.14756202697754,24.82427215576172,20.79296112060547,28.39200210571289,26.836273193359375,24.189878463745117,20.579238891601562,23.625825881958008,28.48736000061035,20.152433395385742,23.5378475189209,25.189390182495117,24.095935821533203,27.848526000976562,25.813262939453125,25.658403396606445,24.111248016357422,25.42165184020996,26.032514572143555,22.899702072143555,23.18429946899414,23.16908073425293,25.081457138061523,19.344449996948242,25.079919815063477,22.78150177001953,21.08084487915039,20.106494903564453,26.322311401367188,20.55828857421875,28.7423095703125,20.156322479248047,27.59453582763672,24.78298568725586,25.730005264282227,21.698057174682617,24.61909294128418,23.875133514404297,23.3283634185791,20.567609786987305,23.409297943115234,21.9627685546875,25.24949073791504,23.938573837280273,28.386734008789062,20.046916961669922,18.482770919799805,27.214473724365234,23.317790985107422,24.13580894470215,25.694913864135742,26.681396484375,20.748817443847656,21.452476501464844,23.13495445251465,24.68809700012207,25.893529891967773,27.78632164001465,25.865711212158203,24.6231746673584,22.74492835998535,26.371034622192383,24.754962921142578,22.352519989013672,22.538957595825195,23.9776554107666,20.064350128173828,26.491668701171875,24.56884765625,25.294475555419922,26.268943786621094,20.834714889526367,21.845788955688477,22.221118927001953,21.367849349975586,23.17323112487793,21.49356460571289,23.30938720703125,25.95020294189453,24.534587860107422,19.093902587890625,27.985275268554688,24.581083297729492,27.381704330444336,23.545026779174805,27.24094009399414,22.74942398071289,22.777385711669922,20.850820541381836,22.905261993408203,26.333036422729492,22.81785011291504,20.720949172973633,18.307308197021484,26.165565490722656,23.546873092651367,25.428821563720703,26.351011276245117,25.419179916381836,20.960765838623047,18.17739486694336,21.1695499420166,25.409990310668945,24.69497299194336,26.40848731994629,19.911476135253906,25.295400619506836,21.246734619140625,22.84528160095215,22.382009506225586,21.727922439575195,22.453994750976562,19.77501106262207,23.742780685424805,25.356107711791992,22.212650299072266,22.42997932434082,24.777223587036133,23.575393676757812,25.612686157226562,23.020160675048828,21.359241485595703,26.301666259765625,24.841156005859375,29.153520584106445,24.658733367919922,26.526391983032227,26.066200256347656,23.264244079589844,24.016483306884766,22.765623092651367,25.738815307617188,25.503400802612305,24.530885696411133,25.301681518554688,24.087543487548828,20.937530517578125,25.285390853881836,26.232213973999023,22.042537689208984,27.336259841918945,23.748863220214844,20.518396377563477,19.037460327148438,25.98199462890625,28.02004623413086,21.916879653930664,21.755788803100586,25.216001510620117,27.85317611694336,23.071821212768555,23.82419776916504,21.560686111450195,18.87405776977539,25.42539405822754,23.261335372924805,26.449623107910156,20.07421875,25.180927276611328,24.641752243041992,23.278881072998047,23.918684005737305,24.27109718322754,25.34137725830078,20.50657844543457,21.21437644958496,22.152780532836914,26.15593719482422,22.48912239074707,22.050636291503906,22.308494567871094,23.04210662841797,21.55190658569336,23.77651596069336,23.085966110229492,20.795089721679688,24.10763931274414,24.983949661254883,21.158998489379883,19.99505043029785,23.174415588378906,18.87873077392578,25.063648223876953,19.15433120727539,18.174514770507812,20.72757911682129,23.278337478637695,26.75335121154785,22.914554595947266,22.007482528686523,25.811174392700195,24.630651473999023,24.262619018554688,23.68120765686035,18.042409896850586,22.256181716918945,26.868255615234375,28.66885757446289,23.297943115234375,21.409618377685547,25.655284881591797,22.636215209960938,20.862415313720703,20.5523624420166,24.430253982543945,26.663593292236328,21.059926986694336,25.795082092285156,19.12385368347168,21.722013473510742,24.95732307434082,22.832721710205078,22.681297302246094,22.04792594909668,24.684062957763672,23.065418243408203,27.771583557128906,25.500497817993164,22.881866455078125,27.203453063964844,19.437986373901367,25.092344284057617,20.588563919067383,24.666091918945312,22.112287521362305,21.54779815673828,26.44481658935547,24.808486938476562,22.220632553100586,25.37558364868164,25.50981903076172,21.999164581298828,24.52132225036621],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-22.754680633544922,-26.67397117614746,-29.0474910736084,-27.880598068237305,-26.793106079101562,-28.609851837158203,-25.550722122192383,-25.13289451599121,-30.861772537231445,-25.098453521728516,-27.027957916259766,-26.690332412719727,-27.978918075561523,-28.723445892333984,-26.617658615112305,-26.145647048950195,-27.301116943359375,-27.541017532348633,-26.28827476501465,-28.458303451538086,-30.348196029663086,-27.500713348388672,-25.45049285888672,-26.94854736328125,-26.681365966796875,-27.806488037109375,-29.25162696838379,-31.574357986450195,-27.206254959106445,-26.811689376831055,-27.541059494018555,-25.602140426635742,-31.249330520629883,-24.833192825317383,-30.38346290588379,-25.411306381225586,-25.21636962890625,-27.801950454711914,-30.520797729492188,-25.773983001708984,-25.538524627685547,-29.186670303344727,-30.3612060546875,-25.742422103881836,-23.975875854492188,-30.541736602783203,-29.402851104736328,-28.90102195739746,-27.1298828125,-26.172513961791992,-25.984153747558594,-32.941349029541016,-28.00428009033203,-31.53002166748047,-27.22295379638672,-25.487157821655273,-30.726882934570312,-22.723384857177734,-26.887983322143555,-27.746496200561523,-27.804460525512695,-27.74074363708496,-26.81143569946289,-28.115148544311523,-28.705944061279297,-29.7871150970459,-29.357318878173828,-30.013545989990234,-27.905405044555664,-29.438213348388672,-28.187253952026367,-25.844383239746094,-30.75335693359375,-31.506750106811523,-27.083555221557617,-25.347217559814453,-33.336952209472656,-23.204486846923828,-24.763843536376953,-28.468351364135742,-24.73185920715332,-30.933462142944336,-28.003822326660156,-28.626880645751953,-30.514076232910156,-30.1181640625,-31.100486755371094,-26.626611709594727,-26.92216682434082,-28.96826171875,-29.316287994384766,-31.121225357055664,-27.736385345458984,-28.736940383911133,-28.26252555847168,-28.540830612182617,-29.509498596191406,-23.790042877197266,-26.288719177246094,-30.238571166992188,-30.58972930908203,-28.273147583007812,-26.89614486694336,-27.07004165649414,-27.556142807006836,-33.44483947753906,-29.376150131225586,-28.735090255737305,-27.88039207458496,-30.662273406982422,-25.744230270385742,-29.801219940185547,-27.025203704833984,-32.16712951660156,-30.601572036743164,-26.80360221862793,-30.419612884521484,-30.228052139282227,-24.289575576782227,-31.258575439453125,-25.667268753051758,-29.139949798583984,-23.67588996887207,-27.540206909179688,-23.941303253173828,-27.0703125,-24.484819412231445,-30.2933349609375,-25.907682418823242,-31.037315368652344,-26.431734085083008,-30.35759162902832,-28.94367218017578,-27.52138328552246,-24.048282623291016,-27.59453010559082,-28.78435707092285,-30.013572692871094,-26.679346084594727,-30.852619171142578,-25.33120346069336,-29.84880828857422,-32.41050338745117,-30.91957664489746,-27.89949607849121,-31.37394905090332,-27.78607940673828,-28.942426681518555,-28.023456573486328,-22.64447784423828,-32.33750534057617,-24.355754852294922,-29.74238395690918,-29.677234649658203,-26.88715171813965,-34.063438415527344,-30.798377990722656,-27.25733184814453,-28.0034236907959,-27.49017906188965,-29.487289428710938,-28.821786880493164,-29.47444725036621,-29.598915100097656,-25.88768768310547,-24.316509246826172,-31.41981315612793,-24.85758399963379,-25.268436431884766,-27.426488876342773,-24.44681739807129,-29.432493209838867,-30.961801528930664,-26.627214431762695,-26.369293212890625,-28.78040885925293,-29.681901931762695,-27.468196868896484,-28.676626205444336,-25.083288192749023,-26.272363662719727,-32.66770553588867,-25.602249145507812,-24.342159271240234,-30.363662719726562,-28.409778594970703,-24.527889251708984,-28.48273468017578,-30.74571990966797,-26.438512802124023,-23.642589569091797,-26.825912475585938,-28.38922882080078,-25.76250648498535,-27.0788631439209,-24.123775482177734,-27.798097610473633,-28.888303756713867,-26.11708641052246,-30.044225692749023,-26.92670440673828,-27.682741165161133,-30.29030418395996,-30.143962860107422,-25.7814998626709,-27.33070945739746,-29.626174926757812,-31.687698364257812,-26.78034782409668,-29.642154693603516,-23.98433494567871,-29.507007598876953,-30.474620819091797,-28.50499725341797,-27.09157371520996,-28.344989776611328,-29.25116729736328,-29.99826431274414,-26.02523422241211,-28.341087341308594,-28.36322021484375,-23.735511779785156,-28.613725662231445,-25.77323341369629,-27.276193618774414,-28.632102966308594,-26.930585861206055,-27.52992057800293,-28.107290267944336,-27.864368438720703,-26.90290069580078,-32.541351318359375,-29.369150161743164,-29.612972259521484,-26.49330711364746,-27.838672637939453,-27.095779418945312,-27.673192977905273,-26.44364356994629,-29.402963638305664,-26.309940338134766,-30.71971321105957,-28.897794723510742,-28.562284469604492,-27.565837860107422,-28.9771728515625,-28.15221405029297,-28.61106300354004,-28.400178909301758,-26.955440521240234],"y":[-22.812103271484375,-27.13236427307129,-30.12288475036621,-23.22892951965332,-26.95492172241211,-27.767873764038086,-24.29842758178711,-26.32865333557129,-32.325828552246094,-25.85442352294922,-26.07243537902832,-29.594820022583008,-30.33013153076172,-28.49605369567871,-30.833694458007812,-27.133132934570312,-24.839204788208008,-29.640169143676758,-22.948753356933594,-26.832529067993164,-29.782766342163086,-25.440824508666992,-27.547670364379883,-24.00748062133789,-27.750194549560547,-26.78800392150879,-25.275381088256836,-22.818323135375977,-26.77277374267578,-25.86844825744629,-24.539634704589844,-26.120084762573242,-29.36851692199707,-28.94501495361328,-24.12368392944336,-26.861536026000977,-22.52953338623047,-29.340885162353516,-26.23798942565918,-26.9093074798584,-29.05398941040039,-25.62008285522461,-26.22440528869629,-29.793928146362305,-24.596940994262695,-28.849611282348633,-24.298254013061523,-23.73541259765625,-30.870174407958984,-25.706865310668945,-28.40962028503418,-28.69384002685547,-27.478240966796875,-26.72382164001465,-25.998355865478516,-27.39862823486328,-27.614625930786133,-24.433231353759766,-25.694704055786133,-26.1588077545166,-26.39619255065918,-28.042747497558594,-23.752553939819336,-27.230056762695312,-29.66582679748535,-24.43213653564453,-27.712116241455078,-25.192598342895508,-28.627573013305664,-25.295276641845703,-25.795513153076172,-27.768810272216797,-26.124309539794922,-22.983169555664062,-30.284440994262695,-27.032127380371094,-26.935131072998047,-23.94964599609375,-24.895145416259766,-25.512432098388672,-27.765756607055664,-27.21888542175293,-30.68604278564453,-27.37806510925293,-23.267929077148438,-23.979982376098633,-28.94563865661621,-24.804340362548828,-23.103893280029297,-28.53502082824707,-25.39186668395996,-24.94180679321289,-23.62557029724121,-26.843551635742188,-28.47794532775879,-26.14957046508789,-23.603208541870117,-25.961429595947266,-24.902748107910156,-26.010595321655273,-27.617000579833984,-23.748497009277344,-25.5210018157959,-24.33966827392578,-27.235315322875977,-26.091209411621094,-26.796483993530273,-23.456911087036133,-26.85331153869629,-30.371004104614258,-23.426525115966797,-22.801252365112305,-30.67855453491211,-26.28957748413086,-29.675235748291016,-25.459794998168945,-26.4066219329834,-29.043201446533203,-30.600997924804688,-29.935619354248047,-25.764385223388672,-23.734933853149414,-30.532398223876953,-26.06085968017578,-27.249935150146484,-24.619234085083008,-26.541170120239258,-29.15574073791504,-25.543310165405273,-28.71436309814453,-30.18498420715332,-28.04328727722168,-29.755693435668945,-24.0363712310791,-29.050451278686523,-27.295700073242188,-26.05672836303711,-28.50531578063965,-23.08432388305664,-25.2154483795166,-25.819570541381836,-24.11327362060547,-32.82190704345703,-30.080713272094727,-25.830141067504883,-25.874727249145508,-25.919281005859375,-29.838043212890625,-27.765350341796875,-29.000734329223633,-25.739810943603516,-25.697534561157227,-26.514646530151367,-24.295307159423828,-26.3797607421875,-24.72423553466797,-23.645631790161133,-30.055360794067383,-27.115310668945312,-28.98636245727539,-27.21289825439453,-26.691865921020508,-27.493494033813477,-24.23539924621582,-27.865760803222656,-28.025888442993164,-22.62710189819336,-23.639854431152344,-23.495662689208984,-29.700300216674805,-25.105648040771484,-26.705020904541016,-30.799789428710938,-29.46636390686035,-26.410633087158203,-26.069316864013672,-28.60173797607422,-26.768827438354492,-26.187341690063477,-21.773984909057617,-24.14080047607422,-24.99478530883789,-28.880271911621094,-28.924007415771484,-26.770061492919922,-21.238292694091797,-27.76487922668457,-23.971864700317383,-24.121994018554688,-31.39949607849121,-29.351900100708008,-26.869853973388672,-24.65330696105957,-25.55305290222168,-26.116046905517578,-27.18555450439453,-24.207828521728516,-22.391935348510742,-26.44062614440918,-27.19648551940918,-28.039995193481445,-23.797222137451172,-24.286928176879883,-25.12257957458496,-25.839004516601562,-25.04374885559082,-27.614763259887695,-27.204246520996094,-25.602169036865234,-24.208145141601562,-26.73737144470215,-29.862648010253906,-25.368635177612305,-27.78744888305664,-24.94830322265625,-23.02849769592285,-29.166662216186523,-26.704771041870117,-27.0417423248291,-27.758983612060547,-24.52991485595703,-23.647092819213867,-24.27936553955078,-26.17720603942871,-26.425167083740234,-26.522323608398438,-27.02530860900879,-27.949155807495117,-24.59185028076172,-27.995018005371094,-29.1949462890625,-27.857925415039062,-31.518260955810547,-27.18427848815918,-28.695398330688477,-29.322429656982422,-23.516319274902344,-27.847639083862305,-27.27460479736328,-28.960725784301758,-23.49502944946289,-26.29165267944336,-22.82915496826172,-26.957691192626953,-31.24008560180664,-28.578392028808594,-28.22464942932129,-26.956378936767578,-26.206178665161133,-28.07477378845215],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[22.68825912475586,17.128585815429688,19.72096824645996,19.0291690826416,21.440813064575195,20.61655616760254,14.668720245361328,24.837709426879883,21.418811798095703,18.72123908996582,14.635415077209473,23.25212860107422,20.91598129272461,23.931901931762695,19.541109085083008,20.646896362304688,21.6776180267334,23.45769500732422,19.41261863708496,21.793264389038086,20.056774139404297,19.193803787231445,17.846168518066406,17.28873062133789,19.207977294921875,22.016220092773438,23.63275718688965,24.071807861328125,24.227157592773438,19.53055763244629,23.601764678955078,14.044414520263672,22.557266235351562,19.133577346801758,21.7183895111084,20.773962020874023,19.58606719970703,20.631099700927734,18.89724349975586,21.23064422607422,22.684261322021484,26.613021850585938,19.557300567626953,23.01513671875,21.490537643432617,19.75992202758789,20.983943939208984,23.294492721557617,22.73154067993164,24.129610061645508,20.124008178710938,22.968915939331055,24.596433639526367,19.13637351989746,25.438079833984375,23.665069580078125,17.3256778717041,17.246990203857422,20.016691207885742,22.335464477539062,22.579708099365234,19.05389976501465,19.632814407348633,21.50729751586914,21.95848846435547,22.0111026763916,21.826152801513672,20.104310989379883,19.43295669555664,15.718362808227539,17.103418350219727,19.043973922729492,19.238021850585938,21.74604034423828,21.8992862701416,21.11932945251465,20.98802375793457,20.502134323120117,21.139867782592773,20.932126998901367,21.79482650756836,20.954391479492188,26.87238883972168,22.807310104370117,23.014253616333008,19.905527114868164,20.217426300048828,20.90314483642578,20.382944107055664,20.895111083984375,21.480796813964844,21.870342254638672,21.881898880004883,17.91309928894043,24.1691837310791,21.54463005065918,22.216541290283203,23.882022857666016,22.845317840576172,22.06817626953125,13.23406982421875,21.110370635986328,18.1212158203125,18.798641204833984,20.58648681640625,21.790639877319336,18.426517486572266,20.557579040527344,22.26994514465332,19.490943908691406,20.698808670043945,21.55074691772461,16.52289581298828,20.270530700683594,18.858898162841797,18.349958419799805,23.71995735168457,22.44707489013672,21.35320281982422,22.21122932434082,20.984392166137695,23.750164031982422,18.874828338623047,19.841455459594727,18.971139907836914,22.201276779174805,24.511762619018555,17.868179321289062,20.568044662475586,14.937501907348633,23.528261184692383,19.91049575805664,18.91318130493164,21.0638484954834,16.798057556152344,16.23456382751465,18.122785568237305,17.982131958007812,19.849891662597656,22.230854034423828,23.24770736694336,23.199735641479492,19.761192321777344,20.099605560302734,18.563091278076172,24.20151710510254,20.205686569213867,20.866987228393555,24.211320877075195,20.058542251586914,20.178089141845703,16.94730567932129,23.131927490234375,21.710241317749023,15.883949279785156,16.335689544677734,22.60865592956543,22.246517181396484,21.534076690673828,21.95850944519043,19.288562774658203,20.244558334350586,21.002704620361328,19.126075744628906,25.284860610961914,21.531282424926758,26.180551528930664,18.447546005249023,20.36402130126953,16.33159637451172,19.364521026611328,21.08424949645996,23.08587646484375,21.425758361816406,25.775569915771484,19.77846908569336,19.485872268676758,17.723670959472656,22.807140350341797,19.31439971923828,22.443918228149414,18.728843688964844,16.764406204223633,23.75753402709961,17.737796783447266,22.015411376953125,20.3143367767334,18.708768844604492,20.318479537963867,21.419401168823242,20.266935348510742,18.31571388244629,22.107555389404297,21.739728927612305,23.50608253479004,22.863468170166016,19.511802673339844,20.99846076965332,22.784387588500977,21.726102828979492,19.727270126342773,20.297361373901367,21.8659725189209,21.483863830566406,19.444881439208984,20.790868759155273,18.302000045776367,19.996477127075195,19.334936141967773,17.994842529296875,20.446840286254883,23.260305404663086,21.033950805664062,19.845705032348633,25.994192123413086,18.969867706298828,21.441890716552734,20.892311096191406,22.966564178466797,22.80535316467285,20.18839454650879,20.877695083618164,19.865478515625,23.763141632080078,17.628477096557617,21.85353660583496,22.32240104675293,22.090795516967773,20.137548446655273,21.898235321044922,17.44066619873047,23.31387710571289,19.143285751342773,24.04416275024414,20.707073211669922,21.398487091064453,18.980052947998047,20.477210998535156,18.367643356323242,19.068035125732422,19.5159854888916,23.447284698486328,19.346601486206055,20.674190521240234,19.840129852294922,21.034839630126953,24.986467361450195,20.969926834106445,18.824251174926758,22.168678283691406],"y":[15.466756820678711,16.262550354003906,17.28451919555664,15.622554779052734,20.02674102783203,23.027767181396484,20.00188446044922,14.361998558044434,19.860614776611328,16.302326202392578,19.305105209350586,17.764877319335938,16.92913246154785,15.14468765258789,18.56190299987793,19.52238655090332,18.18653678894043,17.34645652770996,18.11683464050293,17.243215560913086,13.030884742736816,16.000524520874023,12.801233291625977,17.91886329650879,17.805017471313477,18.39486312866211,17.253795623779297,15.065544128417969,17.907697677612305,16.2225341796875,13.731605529785156,18.19330406188965,17.621965408325195,15.245977401733398,20.033967971801758,17.50638771057129,20.2559814453125,16.654205322265625,19.30339241027832,16.45628547668457,16.213211059570312,15.914449691772461,17.944791793823242,15.161856651306152,20.758934020996094,18.660747528076172,15.151981353759766,16.99028205871582,17.604576110839844,20.602569580078125,17.514888763427734,16.451570510864258,16.343862533569336,18.900859832763672,20.07329559326172,17.74210548400879,17.609195709228516,16.26103973388672,16.699615478515625,17.50763702392578,21.146743774414062,19.906442642211914,16.25141716003418,16.515302658081055,17.18448829650879,18.945964813232422,19.194965362548828,16.34311866760254,15.850971221923828,16.22774887084961,17.22256088256836,19.44672966003418,17.333036422729492,16.037857055664062,17.11711883544922,18.152076721191406,17.07600212097168,12.014978408813477,17.72388458251953,18.940298080444336,17.928558349609375,14.60434627532959,20.961044311523438,17.120838165283203,14.985398292541504,17.6035213470459,16.680408477783203,15.85981273651123,17.279611587524414,14.574183464050293,17.57388687133789,15.639575958251953,18.111249923706055,21.13006019592285,18.042491912841797,16.40350914001465,16.26378059387207,17.341686248779297,16.376924514770508,16.564300537109375,17.77366065979004,16.309885025024414,13.891131401062012,14.597448348999023,18.83154296875,20.474308013916016,21.094423294067383,19.54987144470215,17.721683502197266,21.4456844329834,17.52791976928711,18.244842529296875,17.824905395507812,18.924257278442383,18.209131240844727,17.904048919677734,18.177751541137695,18.23710823059082,17.44098472595215,17.856159210205078,16.590734481811523,16.383737564086914,22.539112091064453,18.25209617614746,15.619260787963867,13.171451568603516,14.995284080505371,15.457746505737305,15.74722671508789,15.95506763458252,12.54230785369873,19.682628631591797,20.244661331176758,18.41229820251465,14.936967849731445,17.877897262573242,19.974750518798828,18.571361541748047,17.881540298461914,16.686542510986328,16.437461853027344,17.196857452392578,18.467288970947266,19.0017147064209,18.729265213012695,14.258886337280273,16.32211685180664,18.819618225097656,17.054765701293945,15.276723861694336,17.20743751525879,18.473289489746094,14.323864936828613,14.043643951416016,18.571186065673828,14.937100410461426,17.129297256469727,15.869782447814941,14.966029167175293,15.7826566696167,18.19264030456543,15.11573600769043,17.757137298583984,18.17030906677246,18.208620071411133,17.551891326904297,18.942594528198242,20.854263305664062,15.9744234085083,20.480051040649414,17.414831161499023,17.28360939025879,19.077407836914062,15.848388671875,17.747657775878906,16.319894790649414,16.79958152770996,20.350887298583984,20.113330841064453,20.50737762451172,17.5639591217041,18.895307540893555,15.967818260192871,16.397985458374023,18.879854202270508,17.832122802734375,16.634004592895508,19.76674461364746,15.578773498535156,21.19713020324707,11.7936372756958,16.5728702545166,15.755303382873535,19.137605667114258,16.870622634887695,15.857865333557129,16.553422927856445,17.93630027770996,17.178306579589844,17.088266372680664,14.077119827270508,16.344280242919922,16.150440216064453,15.471964836120605,18.082901000976562,19.313552856445312,15.627999305725098,16.623794555664062,20.307065963745117,15.317383766174316,15.54086685180664,15.435260772705078,17.794321060180664,13.037073135375977,17.918153762817383,19.1793155670166,20.888002395629883,21.486604690551758,18.47738265991211,22.128093719482422,21.125503540039062,18.784833908081055,17.01515769958496,19.243650436401367,18.448013305664062,17.339698791503906,16.461048126220703,19.85207176208496,17.523456573486328,16.24659538269043,17.835494995117188,15.179210662841797,16.619041442871094,13.704568862915039,18.07297706604004,12.245382308959961,13.80820369720459,19.725160598754883,16.593265533447266,16.94959259033203,16.117557525634766,19.13555908203125,15.828376770019531,16.592565536499023,18.340681076049805,16.00701141357422,16.75788688659668,17.018070220947266,13.340511322021484,20.625343322753906],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-34.786277770996094,-32.98551559448242,-33.58727264404297,-37.28303527832031,-33.38277053833008,-33.271270751953125,-31.684288024902344,-35.299171447753906,-34.974403381347656,-31.43840217590332,-32.84543228149414,-34.08871078491211,-35.29766845703125,-30.418907165527344,-34.27478790283203,-33.36149597167969,-31.7674503326416,-33.34291458129883,-34.788612365722656,-38.50030517578125,-32.88014602661133,-35.28175354003906,-32.88725662231445,-31.204431533813477,-32.49185562133789,-34.02119445800781,-37.217838287353516,-36.17397689819336,-34.91342544555664,-34.141902923583984,-31.602235794067383,-32.8997802734375,-35.456417083740234,-35.421199798583984,-31.533687591552734,-34.049903869628906,-38.188629150390625,-29.703857421875,-30.142560958862305,-35.08719253540039,-36.222469329833984,-34.48225784301758,-37.310401916503906,-35.574649810791016,-33.69162368774414,-31.13685417175293,-29.61040687561035,-38.26445770263672,-32.438690185546875,-36.72296905517578,-35.173458099365234,-34.52485656738281,-30.378671646118164,-32.780120849609375,-34.232994079589844,-34.55628967285156,-33.46833801269531,-30.450965881347656,-33.79840850830078,-27.791980743408203,-33.9351692199707,-35.799049377441406,-29.29617691040039,-33.73920822143555,-35.19481658935547,-36.58304214477539,-29.361204147338867,-35.440433502197266,-32.2940559387207,-32.68912887573242,-34.96353530883789,-32.41054153442383,-33.39219284057617,-38.0408935546875,-34.32146453857422,-33.998958587646484,-33.03433609008789,-35.48695755004883,-33.647918701171875,-30.24983787536621,-27.458309173583984,-32.6208610534668,-32.14482879638672,-37.90208053588867,-33.12397384643555,-35.48960876464844,-33.141395568847656,-35.204132080078125,-32.59781265258789,-33.40555953979492,-29.193933486938477,-37.29500198364258,-31.702800750732422,-33.75777053833008,-31.9945011138916,-33.33823013305664,-33.82190704345703,-30.72000503540039,-32.33026885986328,-31.763364791870117,-31.485013961791992,-32.739837646484375,-33.248661041259766,-31.202646255493164,-30.945985794067383,-35.889320373535156,-33.4879035949707,-34.814308166503906,-32.57730484008789,-30.632579803466797,-32.53888702392578,-33.30049133300781,-34.517921447753906,-33.733421325683594,-32.375858306884766,-32.33277893066406,-32.110069274902344,-35.4594841003418,-29.849374771118164,-30.483699798583984,-34.05622100830078,-33.54214096069336,-34.39543151855469,-30.638376235961914,-36.15119171142578,-35.58393478393555,-35.437015533447266,-37.20899963378906,-31.641277313232422,-36.26168441772461,-34.41654586791992,-31.433635711669922,-33.732845306396484,-34.75202941894531,-37.491004943847656,-36.272953033447266,-33.23356628417969,-35.070472717285156,-33.84282684326172,-33.24551010131836,-35.690059661865234,-33.66445541381836,-32.67445373535156,-35.715152740478516,-34.331390380859375,-35.909942626953125,-31.832311630249023,-35.075260162353516,-35.961273193359375,-34.492095947265625,-35.405517578125,-34.78856658935547,-31.94954490661621,-35.32503128051758,-32.70454406738281,-32.44330978393555,-35.65006637573242,-33.0042610168457,-36.37570571899414,-39.180702209472656,-34.010467529296875,-30.172147750854492,-30.388469696044922,-33.86698532104492,-31.09158706665039,-35.091957092285156,-32.23052215576172,-32.230552673339844,-33.65658187866211,-36.60489273071289,-32.6712760925293,-31.787094116210938,-39.72444534301758,-32.18280029296875,-32.173954010009766,-35.30138397216797,-32.24757766723633,-38.44367980957031,-34.00872802734375,-36.07270050048828,-32.56061553955078,-31.198057174682617,-38.06668472290039,-32.08266830444336,-34.10511016845703,-32.27848434448242,-33.53029251098633,-35.75688171386719,-37.00090789794922,-37.43157958984375,-35.256370544433594,-35.74262237548828,-33.57838821411133,-33.9820556640625,-34.93687438964844,-30.481857299804688,-30.772396087646484,-34.984046936035156,-36.77357482910156,-32.43996810913086,-37.18902587890625,-31.849388122558594,-33.893592834472656,-34.385475158691406,-31.908845901489258,-34.40327453613281,-35.20296096801758,-32.897308349609375,-33.468353271484375,-32.69287109375,-32.62487030029297,-29.013643264770508,-32.9890022277832,-35.06705856323242,-33.12605285644531,-35.269203186035156,-34.974239349365234,-35.4029541015625,-32.846031188964844,-35.755279541015625,-30.473220825195312,-36.41853713989258,-38.344486236572266,-38.17719650268555,-33.39777755737305,-32.47884750366211,-31.982189178466797,-31.989604949951172,-34.37651062011719,-30.552669525146484,-36.7627067565918,-34.26247787475586,-36.41085433959961,-35.82783126831055,-37.29932403564453,-31.85589027404785,-29.23617935180664,-35.68738555908203,-36.75481033325195,-35.989112854003906,-29.04294204711914,-34.76285171508789,-33.49700927734375,-32.40103530883789,-32.32304000854492,-33.52954864501953,-37.26081466674805,-29.07168960571289,-32.086753845214844,-31.10124969482422],"y":[-1.3079537153244019,-1.5687673091888428,-5.015208721160889,0.37808191776275635,0.08640837669372559,-1.205498218536377,-0.23822057247161865,-2.8604302406311035,0.08255338668823242,-3.4534318447113037,0.5474429130554199,-1.5044759511947632,-2.4305291175842285,0.2408963441848755,-4.642973899841309,-1.716383457183838,0.8878538608551025,-0.702662467956543,-1.6856334209442139,-0.057710886001586914,-1.6463559865951538,1.5958967208862305,-2.926636219024658,-0.7453574538230896,-2.6665797233581543,1.6881499290466309,1.697415828704834,1.3063700199127197,-2.780424118041992,-1.8838708400726318,-1.9565043449401855,1.3191134929656982,2.052807569503784,-0.8651090860366821,-3.1164839267730713,-0.5312391519546509,-0.5047979354858398,-0.5590869188308716,-0.3738064765930176,-4.1491498947143555,0.23831665515899658,-0.290813684463501,-4.313520431518555,0.19596946239471436,-4.235535621643066,0.38339054584503174,-3.7878639698028564,1.1655545234680176,2.4589951038360596,0.8747231960296631,-1.6290003061294556,-5.405876159667969,-4.860082626342773,0.19045615196228027,-3.5267229080200195,-2.6222219467163086,1.0459091663360596,-2.485255718231201,-0.5097628831863403,0.5758223533630371,-4.8714752197265625,2.531646728515625,0.9231863021850586,-0.4080582857131958,0.6768913269042969,-2.487992763519287,-7.095523357391357,-0.4914283752441406,-1.4958784580230713,2.6121230125427246,0.4405151605606079,-1.8684362173080444,-1.8774712085723877,-0.7313384413719177,2.054952621459961,-4.108464241027832,1.465702772140503,-2.130704402923584,-5.371101379394531,-2.226217746734619,0.4791533946990967,-4.600157260894775,-0.5742153525352478,1.7084503173828125,-1.1896709203720093,-1.931398868560791,-2.3991036415100098,-1.1595830917358398,-0.8953620195388794,-3.7781591415405273,-1.5868693590164185,-4.069796562194824,-7.2422285079956055,-3.0357391834259033,-0.1505817174911499,-2.2281394004821777,-2.1901841163635254,-2.231431722640991,-2.723644733428955,-3.596595048904419,-1.0045478343963623,2.7403039932250977,-3.0648016929626465,0.7356681823730469,1.164578914642334,-0.16411042213439941,0.880206823348999,0.33174729347229004,0.8971118927001953,1.1774938106536865,-3.1678466796875,-2.829467535018921,-1.0820974111557007,1.8266475200653076,2.130237579345703,-3.415058135986328,-2.110994338989258,0.37157702445983887,-0.006573319435119629,1.680156946182251,1.8811981678009033,-3.700756788253784,-5.228647232055664,-0.2259230613708496,-3.3380284309387207,-2.4042131900787354,0.3517463207244873,-1.1191811561584473,-1.2734150886535645,-3.3897242546081543,-0.5914851427078247,-1.345471978187561,0.12841904163360596,-1.1998852491378784,-2.7191357612609863,-0.559424102306366,-1.6853903532028198,-0.5660925507545471,-0.8014736175537109,-0.03222167491912842,-1.2246586084365845,-6.486256122589111,-4.273756980895996,2.909043788909912,-3.4486255645751953,0.058191537857055664,3.4782629013061523,-2.324270725250244,-0.6814618110656738,-1.7507152557373047,1.1072652339935303,-4.672080039978027,-2.457566499710083,-1.3932610750198364,-0.08560097217559814,-1.619522213935852,-3.8886544704437256,-0.004502654075622559,-2.695192575454712,-1.9960553646087646,0.2785458564758301,-1.0178179740905762,-3.2211780548095703,0.4344754219055176,-1.0448927879333496,-0.7436995506286621,3.558774948120117,-6.4076924324035645,3.9666824340820312,2.0238850116729736,0.08738267421722412,-3.6296193599700928,-0.6219260096549988,-1.1914854049682617,-3.99352765083313,-5.24586296081543,-1.7896080017089844,-0.3870319128036499,-1.1105537414550781,-1.2487242221832275,0.42590105533599854,-7.296867370605469,-2.5229814052581787,-2.7447023391723633,-3.060511350631714,-0.3849477767944336,-0.21444380283355713,-0.7106090188026428,-1.9749436378479004,-1.8415688276290894,-3.6787853240966797,-3.060153007507324,0.2663658857345581,-1.5226943492889404,-4.5513596534729,-1.4911593198776245,-2.366349935531616,0.6045627593994141,1.3657903671264648,-5.274683475494385,-2.3139519691467285,-3.0115299224853516,-1.3747377395629883,-4.709768295288086,-5.919867515563965,-1.9845699071884155,-1.6104366779327393,-1.5923974514007568,-3.7274768352508545,-1.5101288557052612,2.482415199279785,-0.872113049030304,-0.14150989055633545,-0.9163210988044739,-0.1650829315185547,-1.8043817281723022,-1.8429034948349,-0.7156722545623779,-5.331514358520508,1.6370668411254883,-0.18635833263397217,-0.890454113483429,-0.9139787554740906,-6.096468925476074,2.098078489303589,0.1454155445098877,-2.941251039505005,-8.594369888305664,-1.2922152280807495,-1.2021934986114502,-0.6776652336120605,-3.4323456287384033,-2.3471410274505615,-3.332916736602783,-3.2646942138671875,-7.615720748901367,-4.08339786529541,-5.473243713378906,-1.8892383575439453,-1.722118854522705,0.17733514308929443,-3.5523600578308105,-3.657548666000366,-0.34082555770874023,2.0679662227630615,-1.8558177947998047,-2.3761096000671387,-3.269364356994629,-1.8960355520248413,-2.1909849643707275],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}]},{"data":[{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-17.93345069885254,-18.672956466674805,-18.87554168701172,-17.391448974609375,-18.410518646240234,-16.605117797851562,-17.218339920043945,-17.476564407348633,-14.472488403320312,-17.8407039642334,-17.316455841064453,-16.292034149169922,-16.865018844604492,-17.948312759399414,-18.454017639160156,-18.474454879760742,-18.00103759765625,-16.074743270874023,-18.382627487182617,-18.55415916442871,-16.91604232788086,-15.244893074035645,-17.94951820373535,-16.267900466918945,-18.669349670410156,-17.797882080078125,-17.560890197753906,-16.83671760559082,-17.53059196472168,-15.961772918701172,-17.681848526000977,-18.81679916381836,-17.02103614807129,-15.849772453308105,-18.159515380859375,-18.280488967895508,-18.019315719604492,-17.126646041870117,-16.489713668823242,-16.99738311767578,-18.731733322143555,-18.00418472290039,-17.199201583862305,-16.90850257873535,-19.1691837310791,-14.256765365600586,-16.735475540161133,-17.20042610168457,-17.861865997314453,-16.988012313842773,-16.143762588500977,-16.22237205505371,-17.586223602294922,-17.017948150634766,-17.40336036682129,-17.56263542175293,-18.393787384033203,-17.591869354248047,-18.857650756835938,-17.322853088378906,-17.290185928344727,-17.369625091552734,-16.575206756591797,-17.98999786376953,-17.010387420654297,-19.340627670288086,-17.479625701904297,-18.05548667907715,-17.346755981445312,-17.61469078063965,-15.401942253112793,-16.222063064575195,-17.9050350189209,-16.709407806396484,-17.442842483520508,-18.55061149597168,-18.777090072631836,-15.952781677246094,-16.831796646118164,-19.158226013183594,-20.054349899291992,-17.31753158569336,-16.684738159179688,-17.356403350830078,-18.273239135742188,-17.128137588500977,-16.845399856567383,-18.58141326904297,-17.568769454956055,-17.732309341430664,-17.317419052124023,-19.40077781677246,-18.455087661743164,-16.072799682617188,-17.549072265625,-17.642398834228516,-16.11077308654785,-17.041587829589844,-18.150238037109375,-16.87252426147461,-16.54407501220703,-17.23980712890625,-17.272306442260742,-17.082740783691406,-15.783092498779297,-16.99578285217285,-17.05095863342285,-17.449695587158203,-19.40622329711914,-18.042131423950195,-17.598587036132812,-16.44927215576172,-17.33185577392578,-17.252620697021484,-16.962709426879883,-17.81957244873047,-16.545286178588867,-17.254043579101562,-17.167293548583984,-17.59521484375,-17.214754104614258,-18.974763870239258,-18.01205825805664,-16.447269439697266,-21.53748893737793,-21.206308364868164,-18.949708938598633,-17.688060760498047,-18.21295928955078,-17.046979904174805,-17.246286392211914,-17.84295654296875,-18.73354148864746,-16.702789306640625,-17.27138900756836,-18.710498809814453,-17.493684768676758,-20.526987075805664,-18.85688018798828,-16.723800659179688,-18.22001838684082,-17.93875503540039,-17.304397583007812,-16.69280242919922,-17.303457260131836,-16.821149826049805,-17.320199966430664,-16.926584243774414,-17.929445266723633,-17.60738754272461,-16.416893005371094,-18.064477920532227,-16.537883758544922,-17.75608253479004,-18.56281852722168,-17.508243560791016,-17.263036727905273,-19.54575538635254,-16.620220184326172,-17.295360565185547,-18.309009552001953,-17.50843620300293,-18.430185317993164,-17.61665153503418,-16.843257904052734,-16.70153045654297,-17.244417190551758,-18.105562210083008,-17.757396697998047,-16.55284881591797,-16.787572860717773,-20.190898895263672,-17.28972625732422,-16.651630401611328,-17.388263702392578,-17.256025314331055,-17.689125061035156,-16.9613094329834,-17.084514617919922,-17.7273006439209,-16.46013832092285,-20.81535530090332,-16.284650802612305,-19.69078826904297,-17.914894104003906,-19.96660614013672,-18.959808349609375,-18.90993881225586,-16.569318771362305,-17.76008415222168,-17.283655166625977,-18.524736404418945,-17.533876419067383,-17.375221252441406,-17.374357223510742,-17.54176139831543,-17.1226749420166,-19.468900680541992,-17.068490982055664,-17.484661102294922,-20.695425033569336,-16.69091033935547,-17.62763214111328,-17.400163650512695,-17.83158302307129,-16.82742691040039,-16.311124801635742,-17.860008239746094,-17.688663482666016,-18.119394302368164,-17.6047420501709,-17.14929962158203,-18.248106002807617,-17.70142364501953,-18.707134246826172,-19.311094284057617,-20.550716400146484,-17.26909637451172,-18.049772262573242,-17.4688777923584,-17.043922424316406,-18.397476196289062,-17.40957260131836,-17.364994049072266,-17.162384033203125,-17.265621185302734,-19.88526725769043,-17.952392578125,-17.03742790222168,-16.833314895629883,-17.361536026000977,-16.70001792907715,-17.463722229003906,-17.450136184692383,-17.16475486755371,-21.037080764770508,-17.281068801879883,-18.096054077148438,-20.94745635986328,-17.42332649230957,-17.344350814819336,-17.084896087646484,-17.44031524658203,-18.616968154907227,-17.5672550201416,-17.854639053344727,-17.688631057739258,-17.973222732543945,-17.62203598022461,-17.284921646118164],"y":[-29.82018280029297,-27.252962112426758,-28.24264907836914,-28.84381866455078,-27.535568237304688,-27.156702041625977,-27.660043716430664,-28.403989791870117,-26.54819679260254,-28.676164627075195,-27.82912826538086,-28.423824310302734,-28.288593292236328,-28.01381492614746,-28.493797302246094,-27.666330337524414,-29.727039337158203,-28.25453758239746,-29.174270629882812,-29.370197296142578,-28.89134407043457,-28.125530242919922,-28.52867889404297,-29.243791580200195,-28.485424041748047,-28.819215774536133,-29.301605224609375,-27.849151611328125,-28.130769729614258,-29.737943649291992,-28.499160766601562,-28.395612716674805,-28.08953857421875,-27.80547332763672,-27.65271759033203,-28.518497467041016,-28.63184356689453,-27.2771053314209,-28.069812774658203,-28.363372802734375,-28.307104110717773,-26.972370147705078,-27.68634796142578,-28.60478401184082,-28.279090881347656,-30.71819305419922,-27.768577575683594,-29.591672897338867,-28.163297653198242,-27.07356834411621,-28.5618896484375,-28.203763961791992,-27.93286895751953,-26.996320724487305,-28.256311416625977,-27.833194732666016,-28.312101364135742,-28.231576919555664,-27.753986358642578,-27.48889923095703,-28.69884490966797,-27.84437370300293,-27.336318969726562,-28.591455459594727,-28.343740463256836,-27.905794143676758,-27.833507537841797,-28.16132164001465,-27.790376663208008,-27.270109176635742,-26.811613082885742,-27.439573287963867,-28.968324661254883,-28.13803482055664,-29.29633903503418,-28.951513290405273,-27.655012130737305,-28.75788688659668,-28.12044334411621,-28.858455657958984,-27.723772048950195,-27.871856689453125,-29.242145538330078,-27.9326229095459,-27.504150390625,-28.75847625732422,-27.208274841308594,-27.63625717163086,-26.921899795532227,-29.065031051635742,-27.918851852416992,-27.29453468322754,-27.909589767456055,-28.60574722290039,-29.56396484375,-28.43793296813965,-29.038793563842773,-28.67259979248047,-28.117286682128906,-28.63887596130371,-28.74171257019043,-28.392744064331055,-27.608104705810547,-29.174121856689453,-27.175273895263672,-27.596025466918945,-28.401596069335938,-28.04241943359375,-27.906917572021484,-28.02680206298828,-29.052579879760742,-28.787525177001953,-28.935014724731445,-28.312097549438477,-28.38812828063965,-26.823884963989258,-27.29998016357422,-28.435546875,-28.369102478027344,-28.2828426361084,-28.011960983276367,-30.150163650512695,-28.38235092163086,-29.678861618041992,-28.63614273071289,-29.085861206054688,-28.736772537231445,-28.272302627563477,-28.450359344482422,-27.892499923706055,-28.520036697387695,-27.291391372680664,-28.944705963134766,-28.61179542541504,-28.58624267578125,-28.077192306518555,-27.413789749145508,-28.952369689941406,-28.673980712890625,-28.854206085205078,-27.633956909179688,-28.191843032836914,-28.756023406982422,-27.942358016967773,-28.389415740966797,-28.255537033081055,-28.204370498657227,-28.739490509033203,-27.812223434448242,-28.62491798400879,-28.216270446777344,-28.269893646240234,-28.636455535888672,-28.564088821411133,-28.200349807739258,-28.331811904907227,-28.733022689819336,-28.327800750732422,-28.9379940032959,-28.445322036743164,-28.358001708984375,-28.5703067779541,-28.53862953186035,-28.244308471679688,-27.884395599365234,-27.07375717163086,-28.24193000793457,-28.202707290649414,-28.260421752929688,-29.35333824157715,-29.18290901184082,-27.376506805419922,-28.854103088378906,-27.787357330322266,-28.348134994506836,-28.416860580444336,-28.27450180053711,-28.199331283569336,-28.751672744750977,-28.061254501342773,-28.564640045166016,-29.010940551757812,-27.864398956298828,-29.039831161499023,-28.435880661010742,-28.12364959716797,-28.364013671875,-28.6677188873291,-28.762405395507812,-28.70552635192871,-28.74207305908203,-28.287731170654297,-28.67350196838379,-28.750757217407227,-28.50192642211914,-28.49774742126465,-28.420095443725586,-27.255178451538086,-27.869312286376953,-28.28159523010254,-27.68055534362793,-28.196985244750977,-28.496000289916992,-28.033660888671875,-28.337520599365234,-28.217741012573242,-28.10299301147461,-28.66118049621582,-28.33313751220703,-28.230138778686523,-28.323637008666992,-28.138586044311523,-28.333280563354492,-28.148738861083984,-27.92496681213379,-27.810365676879883,-28.57619285583496,-28.552003860473633,-28.179344177246094,-28.424991607666016,-28.547014236450195,-28.430330276489258,-28.59770965576172,-29.571104049682617,-28.192691802978516,-28.46324348449707,-28.03916358947754,-28.462507247924805,-28.34943199157715,-28.345685958862305,-28.223663330078125,-29.54801368713379,-28.434078216552734,-28.368135452270508,-28.50812530517578,-28.272388458251953,-28.37278175354004,-28.230518341064453,-27.801164627075195,-28.31940269470215,-28.30918312072754,-28.35401153564453,-28.54264259338379,-28.121706008911133,-28.315176010131836,-28.457670211791992,-28.345537185668945,-28.265836715698242,-28.292570114135742,-28.484949111938477],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.31194496154785,19.60264778137207,17.852184295654297,18.00135612487793,20.19584846496582,19.719310760498047,19.108762741088867,16.78489875793457,21.780879974365234,19.6170654296875,18.508777618408203,18.61858558654785,18.467782974243164,17.340219497680664,20.435272216796875,18.184322357177734,18.54207420349121,18.720035552978516,18.45891761779785,17.5909423828125,19.64946746826172,16.896514892578125,16.961639404296875,18.09926414489746,18.579195022583008,18.977893829345703,19.433731079101562,19.96000862121582,17.11467742919922,18.07077980041504,17.774110794067383,18.55094337463379,18.567256927490234,20.24831771850586,20.7992000579834,18.842082977294922,18.54688262939453,18.499130249023438,18.529848098754883,19.88465118408203,18.09912872314453,18.71331024169922,17.432117462158203,19.821372985839844,17.408079147338867,19.169708251953125,19.64541244506836,17.22052001953125,18.870948791503906,18.371437072753906,23.148460388183594,19.001707077026367,17.69402503967285,18.825654983520508,17.626564025878906,18.4725284576416,19.320629119873047,20.268217086791992,18.722747802734375,17.495338439941406,17.102191925048828,17.19304084777832,18.118022918701172,18.874116897583008,19.27398109436035,18.356971740722656,18.09990119934082,18.011653900146484,18.451642990112305,18.104434967041016,19.039112091064453,18.000314712524414,18.8885555267334,17.05986785888672,16.730243682861328,16.61931800842285,18.836519241333008,18.21787452697754,17.953847885131836,17.714893341064453,17.919252395629883,18.11064910888672,17.39457130432129,18.180578231811523,17.700796127319336,18.366392135620117,18.33197021484375,19.082202911376953,17.5579776763916,18.513221740722656,18.20884895324707,18.715253829956055,19.062658309936523,17.696992874145508,18.09080696105957,18.491195678710938,18.158897399902344,18.200767517089844,19.043949127197266,17.62574005126953,18.120203018188477,18.994211196899414,17.551727294921875,19.47199821472168,17.29815673828125,19.11261558532715,18.6041316986084,17.402381896972656,17.993608474731445,18.46124839782715,18.805118560791016,17.65644073486328,18.35255241394043,18.498632431030273,18.346036911010742,18.176729202270508,18.006332397460938,18.482406616210938,18.38773536682129,19.81353759765625,18.296838760375977,19.040212631225586,19.3450927734375,18.383525848388672,19.402273178100586,20.75014877319336,18.381845474243164,18.797496795654297,19.827003479003906,15.676347732543945,18.41238021850586,18.28046226501465,18.722427368164062,18.56415557861328,17.86656951904297,18.646739959716797,17.403303146362305,17.265779495239258,18.251953125,18.489501953125,18.145002365112305,18.53607940673828,18.674497604370117,18.091806411743164,18.786663055419922,17.45075798034668,18.267728805541992,18.703977584838867,18.533048629760742,20.054611206054688,18.24629783630371,18.574678421020508,18.26358985900879,20.04035186767578,18.634061813354492,18.220775604248047,17.87328338623047,17.390666961669922,17.491527557373047,18.468608856201172,17.824542999267578,18.72773551940918,18.442089080810547,18.383262634277344,17.114809036254883,17.837066650390625,18.018835067749023,18.89638328552246,18.179397583007812,20.051149368286133,19.2031192779541,18.850427627563477,18.470056533813477,18.462236404418945,18.097915649414062,18.545814514160156,18.46795654296875,17.93093490600586,18.391782760620117,17.989574432373047,18.188133239746094,18.398168563842773,18.923795700073242,18.699871063232422,18.472949981689453,18.70380210876465,18.45541763305664,19.466259002685547,18.32801628112793,18.58493995666504,19.235652923583984,19.76487159729004,17.959352493286133,18.41038703918457,18.960155487060547,17.76902198791504,18.030807495117188,18.63864517211914,18.457782745361328,20.395639419555664,18.713274002075195,18.53799057006836,18.441261291503906,19.022859573364258,19.935054779052734,17.902402877807617,18.93545150756836,18.570220947265625,18.707599639892578,18.48879623413086,18.8892879486084,18.31317138671875,18.359743118286133,18.403701782226562,18.325721740722656,18.430381774902344,18.80904769897461,17.985042572021484,18.388418197631836,18.607749938964844,19.145883560180664,18.65987777709961,18.744604110717773,17.939104080200195,18.449031829833984,18.39680290222168,17.830690383911133,18.828414916992188,18.005773544311523,18.489160537719727,18.11813735961914,18.265769958496094,18.917072296142578,18.28925895690918,18.253190994262695,17.967348098754883,18.155057907104492,18.134143829345703,18.250659942626953,17.986671447753906,18.537799835205078,18.37718391418457,18.27678680419922,18.45863151550293,19.576265335083008,18.464618682861328,18.55844497680664,18.353790283203125,18.23674964904785,18.474628448486328],"y":[-3.2253570556640625,-4.980579853057861,-1.9378918409347534,-4.7480974197387695,-3.7079365253448486,-3.9322264194488525,-3.8352179527282715,-3.411043643951416,-4.406094074249268,-3.5163931846618652,-3.9162557125091553,-5.403076171875,-3.15657901763916,-3.1055238246917725,-5.159969329833984,-4.174549579620361,-4.350169658660889,-1.7642484903335571,-5.450778961181641,-2.0071864128112793,-6.100213527679443,-2.4488401412963867,-3.6727139949798584,-3.7566511631011963,-3.81669020652771,-4.625809669494629,-3.6865038871765137,-4.779524326324463,-4.441735744476318,-3.0714902877807617,-2.8377060890197754,-4.473483085632324,-4.267498016357422,-2.899198293685913,-3.555734157562256,-2.6661643981933594,-3.5316827297210693,-4.02793550491333,-3.5419371128082275,-3.1910793781280518,-4.249509811401367,-2.767648696899414,-3.931091785430908,-4.8095703125,-1.330065369606018,-3.8679237365722656,-3.4805972576141357,-4.380720138549805,-4.602298736572266,-3.321652889251709,-3.2234718799591064,-4.301663875579834,-4.515533924102783,-4.01350212097168,-3.4688398838043213,-2.4453632831573486,-3.014688014984131,-4.229975700378418,-4.360228538513184,-3.7846341133117676,-3.510321855545044,-3.7379956245422363,-4.026822566986084,-4.094428062438965,-2.862868309020996,-4.563020706176758,-4.322591781616211,-3.604454755783081,-2.688918113708496,-2.3002285957336426,-2.68359637260437,-4.573750972747803,-3.7487850189208984,-2.9199018478393555,-3.4677114486694336,-3.4219110012054443,-3.3768768310546875,-3.1806812286376953,-4.002139568328857,-3.0303027629852295,-3.722689390182495,-2.6463406085968018,-4.044424057006836,-3.372593641281128,-4.640075206756592,-5.106696605682373,-3.976959228515625,-4.233634948730469,-3.6614797115325928,-2.8445966243743896,-3.478219509124756,-3.6451568603515625,-1.869956612586975,-3.626356840133667,-3.6981101036071777,-3.66375470161438,-4.5737199783325195,-4.238084316253662,-4.095329284667969,-3.721956968307495,-3.7360341548919678,-3.4701881408691406,-2.2535059452056885,-2.474231481552124,-2.920705795288086,-3.0799672603607178,-3.3364431858062744,-5.092688083648682,-2.712639093399048,-3.174604892730713,-2.649034023284912,-3.6143922805786133,-3.929793119430542,-3.4626026153564453,-3.05537748336792,-3.3998053073883057,-3.9580419063568115,-3.5627834796905518,-3.2687675952911377,-4.13264799118042,-3.459958553314209,-5.055666923522949,-3.7266123294830322,-3.317023992538452,-4.740174293518066,-4.431121349334717,-2.2854413986206055,-3.3422248363494873,-4.421267986297607,-4.093379020690918,-3.572600841522217,-2.7976231575012207,-3.534785270690918,-4.390549182891846,-3.3538787364959717,-3.729994535446167,-4.085515022277832,-3.791597604751587,-4.524293899536133,-3.958314895629883,-3.9157605171203613,-3.5970029830932617,-4.2774553298950195,-3.8114116191864014,-3.72868275642395,-3.5973758697509766,-4.563242435455322,-4.097799777984619,-3.2841053009033203,-3.8824095726013184,-2.948845386505127,-3.453277349472046,-3.757582902908325,-3.0158183574676514,-3.5397894382476807,-3.324805498123169,-3.476311206817627,-4.180341720581055,-3.7244513034820557,-3.8753631114959717,-3.2520031929016113,-3.7184128761291504,-3.9359652996063232,-3.115755081176758,-4.650813102722168,-2.8292078971862793,-2.822126626968384,-3.9930403232574463,-3.6667702198028564,-4.584473133087158,-4.2449846267700195,-2.8932647705078125,-2.8469655513763428,-3.980858325958252,-4.9653520584106445,-4.125097274780273,-3.7096731662750244,-3.7022323608398438,-3.1391613483428955,-3.8440299034118652,-3.3633627891540527,-3.6962647438049316,-3.403735637664795,-3.3712785243988037,-3.7825002670288086,-3.9217684268951416,-3.2202370166778564,-3.9368975162506104,-3.6999192237854004,-2.8508410453796387,-3.7485735416412354,-3.989741086959839,-4.322898864746094,-3.0780527591705322,-4.071644306182861,-3.8597006797790527,-3.9732699394226074,-3.888094902038574,-3.690866231918335,-4.031498908996582,-3.9717040061950684,-3.730921983718872,-3.160763740539551,-3.709254026412964,-4.105042457580566,-3.302617311477661,-4.1161885261535645,-4.9849348068237305,-3.6484124660491943,-3.2966384887695312,-4.000332832336426,-3.502383232116699,-3.7582643032073975,-3.8501765727996826,-3.470968246459961,-3.572129011154175,-3.5330753326416016,-3.6926543712615967,-3.424786329269409,-3.937267541885376,-3.6690633296966553,-3.2964284420013428,-3.6483213901519775,-3.941934585571289,-3.724984884262085,-3.438201904296875,-3.3088161945343018,-3.847193479537964,-3.632012128829956,-3.507751703262329,-3.6718952655792236,-3.805764675140381,-3.715233564376831,-3.6875765323638916,-3.8958826065063477,-3.570549726486206,-3.749922513961792,-3.5816333293914795,-3.689645290374756,-3.5981342792510986,-3.7715601921081543,-3.4799749851226807,-3.7731058597564697,-3.8757271766662598,-3.735161304473877,-3.5787768363952637,-3.585528612136841,-3.490229845046997,-3.657270669937134,-3.7306253910064697],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-9.789095878601074,-12.362283706665039,-12.585768699645996,-12.828444480895996,-10.75062084197998,-9.920994758605957,-11.40302848815918,-10.528397560119629,-11.290746688842773,-9.883021354675293,-10.044102668762207,-10.764655113220215,-11.036927223205566,-11.521190643310547,-11.407833099365234,-9.70959186553955,-10.536728858947754,-8.04806900024414,-12.680559158325195,-11.018533706665039,-9.60473346710205,-12.353851318359375,-11.16597843170166,-14.921163558959961,-11.210343360900879,-9.908323287963867,-11.891547203063965,-11.511687278747559,-9.992476463317871,-8.937873840332031,-10.90017318725586,-8.702479362487793,-10.717360496520996,-10.880701065063477,-11.84139347076416,-9.71937084197998,-10.667430877685547,-11.402710914611816,-11.738048553466797,-10.588273048400879,-10.993817329406738,-10.819095611572266,-13.36093521118164,-12.53370189666748,-10.265341758728027,-9.698494911193848,-11.892742156982422,-12.652471542358398,-10.920615196228027,-12.053348541259766,-10.977462768554688,-10.990866661071777,-9.564226150512695,-11.606375694274902,-9.963486671447754,-10.359207153320312,-9.644524574279785,-10.719406127929688,-10.310683250427246,-10.987314224243164,-10.620890617370605,-12.487377166748047,-9.995197296142578,-11.147343635559082,-10.571634292602539,-10.787886619567871,-10.816810607910156,-11.667088508605957,-11.780511856079102,-11.166909217834473,-10.717363357543945,-10.353935241699219,-10.719281196594238,-9.037405014038086,-11.682791709899902,-10.128437995910645,-10.174494743347168,-10.30439567565918,-12.298747062683105,-11.696255683898926,-9.91281509399414,-12.00465202331543,-9.777507781982422,-12.06704330444336,-10.186394691467285,-10.356671333312988,-10.699182510375977,-11.39316177368164,-10.727703094482422,-11.526259422302246,-9.623666763305664,-11.080554962158203,-11.087416648864746,-11.47153091430664,-9.973274230957031,-10.40908432006836,-11.745697975158691,-11.722234725952148,-10.67536735534668,-11.20340633392334,-10.269994735717773,-10.114912033081055,-11.95181655883789,-11.274659156799316,-10.516800880432129,-10.783034324645996,-13.137325286865234,-11.456426620483398,-10.550223350524902,-12.338860511779785,-10.314030647277832,-11.139427185058594,-12.70394515991211,-9.861783027648926,-11.176132202148438,-12.549424171447754,-10.579172134399414,-11.421287536621094,-10.143562316894531,-11.151921272277832,-10.963699340820312,-10.463582992553711,-10.89553451538086,-11.974753379821777,-10.677350044250488,-10.667930603027344,-10.89699935913086,-9.336453437805176,-13.344924926757812,-10.02199649810791,-10.096763610839844,-10.519549369812012,-11.831743240356445,-9.542383193969727,-10.460620880126953,-11.410981178283691,-11.101222038269043,-11.392091751098633,-11.176243782043457,-11.087210655212402,-11.23570728302002,-11.516810417175293,-11.391351699829102,-10.331501007080078,-10.74176025390625,-11.99860668182373,-11.458206176757812,-11.110790252685547,-11.47612190246582,-10.902559280395508,-11.400425910949707,-11.119588851928711,-10.973801612854004,-10.513717651367188,-10.352911949157715,-10.642792701721191,-10.720237731933594,-11.445245742797852,-9.860758781433105,-11.123234748840332,-10.534562110900879,-10.966736793518066,-10.868577003479004,-10.761655807495117,-10.420315742492676,-10.604784965515137,-10.685188293457031,-10.77191162109375,-10.971671104431152,-11.05780029296875,-10.907073020935059,-11.265007972717285,-9.987434387207031,-11.571605682373047,-9.236966133117676,-10.48198127746582,-11.356206893920898,-11.922248840332031,-11.030082702636719,-10.0689058303833,-10.723233222961426,-10.79261589050293,-9.270634651184082,-10.78127670288086,-10.661654472351074,-10.580376625061035,-11.228937149047852,-10.324755668640137,-11.09002685546875,-11.693111419677734,-11.340631484985352,-10.727446556091309,-10.53073501586914,-11.143949508666992,-11.381168365478516,-11.087671279907227,-8.76567268371582,-10.764653205871582,-11.098657608032227,-10.782291412353516,-11.618733406066895,-11.11782169342041,-10.464008331298828,-10.594635963439941,-11.666902542114258,-10.491697311401367,-11.187479019165039,-10.771236419677734,-10.789454460144043,-11.070845603942871,-10.582647323608398,-11.828587532043457,-10.626897811889648,-11.578701972961426,-10.848298072814941,-11.076336860656738,-10.916592597961426,-11.118430137634277,-10.989631652832031,-11.258846282958984,-10.684499740600586,-10.850818634033203,-11.389147758483887,-10.82116985321045,-10.963916778564453,-10.854416847229004,-10.087437629699707,-10.797329902648926,-11.151338577270508,-10.878084182739258,-11.162416458129883,-10.556023597717285,-10.839323043823242,-9.856878280639648,-11.124115943908691,-10.978493690490723,-10.741665840148926,-11.165657997131348,-10.938053131103516,-11.106034278869629,-11.080567359924316,-11.031280517578125,-11.19306755065918,-10.932517051696777,-10.963388442993164,-10.990910530090332,-11.04703140258789,-10.690226554870605,-10.88012981414795,-10.991724014282227],"y":[23.966825485229492,24.079408645629883,23.927120208740234,23.680309295654297,25.12744903564453,22.98078727722168,24.366191864013672,23.915252685546875,21.675291061401367,23.891653060913086,25.173736572265625,23.054506301879883,22.119115829467773,24.58823013305664,24.616098403930664,23.89458656311035,23.611711502075195,21.829103469848633,24.37544059753418,22.254005432128906,25.79536247253418,25.269495010375977,24.002445220947266,22.0123348236084,23.733118057250977,25.751739501953125,21.897531509399414,23.702119827270508,24.40319061279297,23.84770393371582,25.476619720458984,24.622182846069336,24.598737716674805,23.94852638244629,24.563732147216797,24.70409393310547,23.383995056152344,23.53704071044922,23.53309440612793,24.342609405517578,21.556840896606445,24.342391967773438,23.267868041992188,22.431703567504883,22.014244079589844,24.77771759033203,22.21570587158203,26.02638816833496,22.070016860961914,25.404361724853516,24.207670211791992,24.571840286254883,22.779897689819336,24.164575576782227,23.773754119873047,23.567142486572266,22.282093048095703,23.61897087097168,22.976146697998047,24.367605209350586,23.833812713623047,25.710939407348633,22.0891056060791,21.27623176574707,25.06484603881836,23.583925247192383,23.913393020629883,24.557098388671875,24.91767692565918,22.460657119750977,22.804672241210938,23.506183624267578,24.1158447265625,24.532955169677734,25.26508331298828,24.521255493164062,24.06011962890625,23.34864616394043,24.793806076049805,24.16074562072754,23.16758918762207,23.274608612060547,23.794538497924805,22.105234146118164,24.718236923217773,24.03252410888672,24.29155731201172,24.641401290893555,22.590879440307617,23.03078269958496,23.08011245727539,22.85118293762207,23.566009521484375,22.909164428710938,23.54930305480957,24.48246192932129,24.072052001953125,21.72920799255371,25.148672103881836,24.045717239379883,24.910242080688477,23.63298988342285,24.958690643310547,23.43285369873047,23.409442901611328,22.689380645751953,23.423812866210938,24.58147621154785,23.43828773498535,22.566383361816406,21.485721588134766,24.48480987548828,23.722278594970703,24.235212326049805,24.520029067993164,24.37144660949707,22.773481369018555,21.45241928100586,22.819618225097656,24.227937698364258,24.014646530151367,24.494020462036133,22.410667419433594,24.24073600769043,22.94179916381836,23.469039916992188,23.341468811035156,22.911588668823242,23.17357635498047,22.343544006347656,23.704757690429688,24.16924285888672,23.266633987426758,23.206890106201172,24.00045394897461,23.701011657714844,24.2308406829834,23.538782119750977,23.032991409301758,24.402019500732422,24.023332595825195,25.317520141601562,23.983413696289062,24.447933197021484,24.291202545166016,23.610727310180664,23.81656265258789,23.475004196166992,24.253753662109375,24.138269424438477,23.931896209716797,24.090864181518555,23.79489517211914,22.91057014465332,24.064544677734375,24.27914810180664,23.27219009399414,24.59073829650879,23.620887756347656,22.80710220336914,22.259008407592773,24.191417694091797,24.662626266479492,23.27168083190918,23.20813751220703,24.00381088256836,24.565887451171875,23.55835723876953,23.72522735595703,23.19597816467285,22.290111541748047,24.05689811706543,23.514673233032227,24.298227310180664,22.45409393310547,23.964967727661133,23.8855037689209,23.554920196533203,23.73101806640625,23.743728637695312,23.980674743652344,22.951364517211914,22.786474227905273,23.37244415283203,24.11642837524414,23.431930541992188,23.338552474975586,23.365758895874023,23.568143844604492,23.122859954833984,23.719024658203125,23.57242774963379,23.072673797607422,23.77391242980957,23.955429077148438,23.166112899780273,22.358612060546875,23.59843635559082,22.472204208374023,23.908300399780273,22.409210205078125,22.32253074645996,23.119184494018555,23.604801177978516,24.351654052734375,23.542322158813477,23.38577651977539,24.014402389526367,23.82103729248047,23.775148391723633,23.66321563720703,22.079805374145508,23.43280792236328,24.297590255737305,24.507535934448242,23.618318557739258,23.31307029724121,23.972917556762695,23.522058486938477,23.1903076171875,23.179664611816406,23.787126541137695,24.141904830932617,23.298398971557617,23.962221145629883,22.96798324584961,23.36862564086914,23.844449996948242,23.55883026123047,23.555030822753906,23.453218460083008,23.826007843017578,23.60999298095703,24.636383056640625,23.919857025146484,23.588985443115234,24.11513900756836,23.05638313293457,23.84822654724121,23.291458129882812,23.80386734008789,23.507061004638672,23.437393188476562,23.983081817626953,23.805416107177734,23.531335830688477,23.866973876953125,23.855100631713867,23.50722885131836,23.77183723449707],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-24.567899703979492,-27.297517776489258,-28.491470336914062,-27.935680389404297,-27.370088577270508,-28.245206832885742,-26.779512405395508,-26.392580032348633,-29.422422409057617,-26.422744750976562,-27.517749786376953,-27.322221755981445,-27.987916946411133,-28.304533004760742,-27.281522750854492,-27.058034896850586,-27.6694278717041,-27.776065826416016,-27.23577308654785,-28.16780662536621,-29.05293846130371,-27.757509231567383,-26.611888885498047,-27.539588928222656,-27.361032485961914,-27.88942527770996,-28.522260665893555,-29.581050872802734,-27.627946853637695,-27.460630416870117,-27.806602478027344,-26.828678131103516,-29.40070152282715,-25.957786560058594,-29.01288414001465,-26.684825897216797,-26.75334930419922,-27.912811279296875,-29.019197463989258,-26.93934440612793,-26.676895141601562,-28.458776473999023,-28.928184509277344,-26.820104598999023,-25.713424682617188,-29.021469116210938,-28.545568466186523,-28.353775024414062,-27.637052536010742,-27.215656280517578,-27.05596923828125,-30.02147102355957,-27.98442268371582,-29.3592472076416,-27.679203033447266,-26.797842025756836,-29.00535011291504,-23.813919067382812,-27.552021026611328,-27.883943557739258,-27.90589714050293,-27.891244888305664,-27.550477981567383,-28.024372100830078,-28.287874221801758,-28.666969299316406,-28.4713191986084,-28.717464447021484,-27.952669143676758,-28.489639282226562,-28.03304100036621,-27.03251838684082,-28.963214874267578,-29.359806060791016,-27.64179801940918,-26.769298553466797,-30.04457664489746,-24.987646102905273,-26.53946304321289,-28.12785530090332,-26.16693687438965,-28.976404190063477,-28.04770278930664,-28.177692413330078,-28.881593704223633,-28.692581176757812,-29.058210372924805,-27.496845245361328,-27.620866775512695,-28.30196189880371,-28.38141632080078,-29.00391387939453,-27.888322830200195,-28.18653678894043,-28.060083389282227,-28.118684768676758,-28.453128814697266,-25.348976135253906,-27.382841110229492,-28.639867782592773,-28.759626388549805,-28.042692184448242,-27.598838806152344,-27.667362213134766,-27.811843872070312,-29.891958236694336,-28.352415084838867,-28.19750213623047,-27.91277313232422,-28.91101837158203,-27.2081298828125,-28.55121421813965,-27.6107120513916,-29.225759506225586,-28.789823532104492,-27.5969295501709,-28.615188598632812,-28.604427337646484,-25.14820098876953,-28.950206756591797,-27.158201217651367,-28.289810180664062,-23.892690658569336,-27.816667556762695,-25.327863693237305,-27.689868927001953,-26.256887435913086,-28.574771881103516,-27.295223236083984,-28.746109008789062,-27.37464141845703,-28.527008056640625,-28.185001373291016,-27.841917037963867,-25.10735321044922,-27.82244873046875,-28.13540267944336,-28.418296813964844,-27.597335815429688,-28.682470321655273,-27.04189109802246,-28.435983657836914,-29.68808364868164,-28.655546188354492,-27.915307998657227,-28.766557693481445,-27.884422302246094,-28.14261817932129,-27.923322677612305,-21.697010040283203,-29.037723541259766,-26.350727081298828,-28.303749084472656,-28.3326358795166,-27.64985466003418,-29.756324768066406,-28.604127883911133,-27.708913803100586,-27.926128387451172,-27.789634704589844,-28.23297691345215,-28.094160079956055,-28.218460083007812,-28.272214889526367,-27.27002716064453,-25.919647216796875,-28.73795509338379,-26.957916259765625,-27.183948516845703,-27.767087936401367,-26.62787628173828,-28.189260482788086,-28.584787368774414,-27.527992248535156,-27.53451919555664,-28.0666561126709,-28.23104476928711,-27.801149368286133,-28.04048728942871,-27.19641876220703,-27.568025588989258,-28.865882873535156,-27.114151000976562,-25.842805862426758,-28.3187313079834,-28.088706970214844,-26.36945343017578,-28.015869140625,-28.38758659362793,-27.467832565307617,-24.305578231811523,-27.659215927124023,-27.97580337524414,-27.39250946044922,-27.732154846191406,-25.99289321899414,-27.886947631835938,-28.095632553100586,-27.501949310302734,-28.233884811401367,-27.69152069091797,-27.87120819091797,-28.268993377685547,-28.22380828857422,-27.425390243530273,-27.79781150817871,-28.15054702758789,-28.454803466796875,-27.69318962097168,-28.132627487182617,-25.961393356323242,-28.145402908325195,-28.219295501708984,-27.959938049316406,-27.753854751586914,-27.947412490844727,-28.07257080078125,-28.141403198242188,-27.492177963256836,-27.92739486694336,-27.935503005981445,-26.342288970947266,-27.963163375854492,-27.452037811279297,-27.776395797729492,-27.96174430847168,-27.712451934814453,-27.808551788330078,-27.903095245361328,-27.859834671020508,-27.685794830322266,-28.479461669921875,-28.117389678955078,-28.06864356994629,-27.59918975830078,-27.85634994506836,-27.775100708007812,-27.833723068237305,-27.625919342041016,-28.054058074951172,-27.665796279907227,-28.165687561035156,-28.001955032348633,-27.9389705657959,-27.80472755432129,-27.983003616333008,-27.884206771850586,-27.936227798461914,-27.913530349731445,-27.708532333374023],"y":[-25.290395736694336,-26.824071884155273,-28.276113510131836,-25.078330993652344,-26.736873626708984,-27.121156692504883,-25.58614158630371,-26.517196655273438,-29.32086944580078,-26.31177520751953,-26.340208053588867,-27.962785720825195,-28.282684326171875,-27.44583511352539,-28.456310272216797,-26.827051162719727,-25.809555053710938,-27.914201736450195,-25.058547973632812,-26.6747989654541,-28.02735137939453,-26.083335876464844,-27.0306453704834,-25.50469398498535,-27.072246551513672,-26.656234741210938,-25.997821807861328,-24.92127799987793,-26.649255752563477,-26.278852462768555,-25.730091094970703,-26.423961639404297,-27.827268600463867,-27.652252197265625,-25.5200138092041,-26.737504959106445,-24.988910675048828,-27.712085723876953,-26.420745849609375,-26.729965209960938,-27.608478546142578,-26.176605224609375,-26.423254013061523,-27.883188247680664,-25.980581283569336,-27.540939331054688,-25.650968551635742,-25.45500373840332,-28.27558135986328,-26.264387130737305,-27.27712631225586,-27.500850677490234,-26.916122436523438,-26.63211441040039,-26.363752365112305,-26.91047477722168,-26.997896194458008,-26.38995361328125,-26.259681701660156,-26.427703857421875,-26.515926361083984,-27.118276596069336,-25.550153732299805,-26.817062377929688,-27.748079299926758,-25.75467300415039,-26.99848747253418,-26.04961395263672,-27.306333541870117,-26.1061954498291,-26.304658889770508,-27.00740623474121,-26.408178329467773,-25.147979736328125,-27.909271240234375,-26.764671325683594,-26.70431137084961,-25.999462127685547,-26.081335067749023,-26.215795516967773,-27.08349609375,-26.829479217529297,-28.034297943115234,-26.84642219543457,-25.35309410095215,-25.661327362060547,-27.482711791992188,-26.008285522460938,-25.4251651763916,-27.22408103942871,-26.197525024414062,-26.016368865966797,-25.637540817260742,-26.67024040222168,-27.174304962158203,-26.451658248901367,-25.613849639892578,-26.674945831298828,-26.094379425048828,-26.419763565063477,-26.947542190551758,-25.722867965698242,-26.292715072631836,-25.946544647216797,-26.78369903564453,-26.387147903442383,-26.665630340576172,-25.654319763183594,-26.67415428161621,-27.964384078979492,-25.693761825561523,-25.43251609802246,-27.88033676147461,-26.511533737182617,-27.619937896728516,-26.315540313720703,-26.558914184570312,-27.350412368774414,-28.021533966064453,-27.714513778686523,-26.431779861450195,-25.820720672607422,-28.052804946899414,-26.486886978149414,-27.072200775146484,-26.12295150756836,-26.762069702148438,-27.342342376708984,-26.393348693847656,-27.205196380615234,-27.591495513916016,-26.979825973510742,-27.434627532958984,-25.989307403564453,-27.50461769104004,-26.785526275634766,-26.489248275756836,-27.075122833251953,-25.734722137451172,-26.22608757019043,-26.510910034179688,-25.98964500427246,-29.30217170715332,-27.550539016723633,-26.47120475769043,-26.40778160095215,-26.496301651000977,-27.39670181274414,-26.8837890625,-27.916709899902344,-26.32978057861328,-26.584468841552734,-26.60011100769043,-26.08462905883789,-26.6070613861084,-25.913833618164062,-25.88052749633789,-27.41106414794922,-26.737398147583008,-27.123027801513672,-26.744140625,-26.640766143798828,-26.797035217285156,-26.105382919311523,-26.912761688232422,-27.12228775024414,-25.594501495361328,-25.995012283325195,-25.983613967895508,-27.247055053710938,-26.465240478515625,-26.63617515563965,-27.61652374267578,-27.17640495300293,-26.60959815979004,-26.523822784423828,-26.98194694519043,-26.65260124206543,-26.543142318725586,-25.496623992919922,-26.19875717163086,-26.25902557373047,-27.078025817871094,-27.2502384185791,-26.640625,-25.379867553710938,-26.97014045715332,-26.158220291137695,-26.16280746459961,-27.571239471435547,-27.484718322753906,-26.668798446655273,-26.311988830566406,-26.499818801879883,-26.564268112182617,-26.937219619750977,-26.259885787963867,-25.899818420410156,-26.635318756103516,-26.730266571044922,-26.845224380493164,-26.227685928344727,-26.29410743713379,-26.43816566467285,-26.568157196044922,-26.445411682128906,-26.798233032226562,-26.75946617126465,-26.53047752380371,-26.327146530151367,-26.910184860229492,-27.16205406188965,-26.499914169311523,-26.806007385253906,-26.4575138092041,-26.196134567260742,-27.00251579284668,-26.671001434326172,-26.732755661010742,-26.79030990600586,-26.42131996154785,-26.456396102905273,-26.40774917602539,-26.65337371826172,-26.653196334838867,-26.658531188964844,-26.72106170654297,-26.816003799438477,-26.45838737487793,-26.817358016967773,-26.962400436401367,-26.84772300720215,-27.396629333496094,-26.716781616210938,-26.882152557373047,-26.928956985473633,-26.363039016723633,-26.76445198059082,-26.720718383789062,-26.87340545654297,-26.39309310913086,-26.615760803222656,-26.333087921142578,-26.677522659301758,-27.12212371826172,-26.803646087646484,-26.76323699951172,-26.661182403564453,-26.607742309570312,-26.752553939819336],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[21.702043533325195,19.209863662719727,20.402679443359375,20.136873245239258,21.020463943481445,20.545520782470703,17.67682647705078,22.605239868164062,21.007795333862305,20.005273818969727,17.7930965423584,21.838729858398438,20.907285690307617,22.169885635375977,20.286916732788086,20.69813346862793,21.169837951660156,21.90694236755371,20.258100509643555,21.238466262817383,20.582582473754883,20.2355899810791,19.634729385375977,19.355083465576172,20.207969665527344,21.278470993041992,21.942581176757812,22.14996337890625,22.15140151977539,20.397117614746094,21.969919204711914,17.55742645263672,21.474782943725586,20.255361557006836,21.073650360107422,20.82221221923828,20.240184783935547,20.800039291381836,20.03453826904297,21.020822525024414,21.539987564086914,23.11471939086914,20.369115829467773,21.668718338012695,20.972078323364258,20.420387268066406,20.956239700317383,21.718786239624023,21.49827003479004,22.043304443359375,20.603288650512695,21.590641021728516,22.15505599975586,20.191320419311523,22.58964729309082,21.77264976501465,19.51311492919922,19.522850036621094,20.60936737060547,21.323060989379883,21.300565719604492,20.133424758911133,20.493803024291992,21.0869083404541,21.204423904418945,21.165054321289062,21.09200096130371,20.646678924560547,20.43608283996582,18.800395965576172,19.532047271728516,20.18128204345703,20.359729766845703,21.158323287963867,21.171316146850586,20.907556533813477,20.901981353759766,20.790395736694336,20.925798416137695,20.818449020385742,21.108190536499023,20.936717987060547,23.367895126342773,21.434947967529297,21.54805564880371,20.565631866455078,20.686534881591797,20.9017391204834,20.722789764404297,20.915924072265625,21.02842140197754,21.181293487548828,21.122085571289062,19.669029235839844,21.826045989990234,21.0568790435791,21.243534088134766,21.707304000854492,21.399187088012695,21.170148849487305,17.387659072875977,20.90929412841797,19.965944290161133,20.247961044311523,20.699329376220703,20.979053497314453,19.887531280517578,20.662330627441406,21.17765998840332,20.237590789794922,20.764944076538086,20.96727180480957,19.39455223083496,20.604841232299805,20.238136291503906,20.103940963745117,21.569284439086914,21.188432693481445,20.926116943359375,21.12542724609375,20.85068130493164,21.580047607421875,19.994823455810547,20.52097511291504,20.347551345825195,21.270944595336914,21.846708297729492,20.024097442626953,20.772798538208008,18.799232482910156,21.653522491455078,20.495452880859375,20.19554901123047,20.825042724609375,19.716230392456055,19.47904396057129,20.005950927734375,20.067567825317383,20.571775436401367,21.117708206176758,21.359535217285156,21.320823669433594,20.534360885620117,20.599302291870117,20.248855590820312,21.647790908813477,20.684263229370117,20.781557083129883,21.566614151000977,20.664993286132812,20.6697998046875,19.82581901550293,21.311565399169922,20.995492935180664,19.51365089416504,19.770723342895508,21.13519287109375,21.06499671936035,20.93023681640625,20.99966812133789,20.479684829711914,20.688217163085938,20.811077117919922,20.456119537353516,21.86306381225586,20.908302307128906,22.19599151611328,20.21554946899414,20.718284606933594,19.673553466796875,20.534120559692383,20.83536148071289,21.1867733001709,20.8980712890625,21.847076416015625,20.620134353637695,20.571800231933594,20.153785705566406,21.11227035522461,20.501169204711914,21.043182373046875,20.427227020263672,20.051856994628906,21.273080825805664,20.269018173217773,20.95821189880371,20.719024658203125,20.454347610473633,20.725975036621094,20.88750648498535,20.65053367614746,20.4240665435791,20.989824295043945,20.909931182861328,21.1790714263916,21.076534271240234,20.61173439025879,20.80436897277832,21.04065704345703,20.89278793334961,20.625831604003906,20.7169189453125,20.916784286499023,20.868854522705078,20.595718383789062,20.766496658325195,20.444223403930664,20.686262130737305,20.578542709350586,20.421415328979492,20.75779151916504,21.111421585083008,20.8075008392334,20.6682071685791,21.6026554107666,20.554601669311523,20.87495231628418,20.812000274658203,21.021263122558594,21.076641082763672,20.695507049560547,20.782550811767578,20.685447692871094,21.101787567138672,20.3907470703125,20.887449264526367,20.937646865844727,20.889291763305664,20.71009635925293,20.890565872192383,20.397783279418945,21.047821044921875,20.62407684326172,21.157129287719727,20.767349243164062,20.81517219543457,20.59541893005371,20.7391300201416,20.56178092956543,20.641279220581055,20.693918228149414,21.007814407348633,20.687166213989258,20.79237174987793,20.710813522338867,20.82704734802246,21.152250289916992,20.809722900390625,20.651371002197266,20.871131896972656],"y":[16.617189407348633,16.99505043029785,17.33669662475586,16.737882614135742,18.32146453857422,19.630573272705078,18.54253578186035,16.182933807373047,18.227075576782227,17.017017364501953,18.226181030273438,17.394681930541992,17.189682006835938,16.51311492919922,17.812700271606445,18.108400344848633,17.578582763671875,17.24732208251953,17.64034652709961,17.25701332092285,15.748921394348145,16.91305160522461,15.660053253173828,17.64255714416504,17.529781341552734,17.620492935180664,17.2040958404541,16.503259658813477,17.41338348388672,16.989179611206055,16.075763702392578,17.764738082885742,17.347139358520508,16.684734344482422,18.197057723999023,17.363737106323242,18.37114906311035,17.108264923095703,18.041677474975586,17.03494644165039,16.930522918701172,16.82039451599121,17.543060302734375,16.62359046936035,18.433719635009766,17.753372192382812,16.670440673828125,17.159025192260742,17.339250564575195,18.317110061645508,17.384492874145508,17.016489028930664,16.96968650817871,17.850021362304688,18.131052017211914,17.358577728271484,17.495996475219727,17.05775260925293,17.156169891357422,17.319250106811523,18.460376739501953,18.176746368408203,17.04179573059082,17.081836700439453,17.247055053710938,17.714906692504883,17.783432006835938,17.064512252807617,16.942256927490234,17.080854415893555,17.405298233032227,17.99527931213379,17.362396240234375,16.96133804321289,17.231983184814453,17.51410675048828,17.244495391845703,15.538435935974121,17.396793365478516,17.721363067626953,17.41887664794922,16.592233657836914,18.43243408203125,17.203893661499023,16.670093536376953,17.40381622314453,17.167240142822266,16.95830726623535,17.316064834594727,16.626949310302734,17.359210968017578,16.90545654296875,17.476213455200195,18.63785743713379,17.412965774536133,17.0976619720459,17.054637908935547,17.260009765625,17.068775177001953,17.13429069519043,17.616147994995117,17.102001190185547,16.421180725097656,16.69832420349121,17.693174362182617,18.101987838745117,18.49143409729004,17.850915908813477,17.37229347229004,18.48222541809082,17.3702335357666,17.49410629272461,17.575817108154297,17.677461624145508,17.56450843811035,17.510452270507812,17.42876434326172,17.45536994934082,17.3182315826416,17.37775421142578,17.15898895263672,17.03940200805664,18.856691360473633,17.526670455932617,16.992206573486328,16.26041603088379,16.71247673034668,16.967411041259766,17.02515983581543,17.08441925048828,16.03302764892578,17.827072143554688,18.001697540283203,17.500469207763672,16.85477066040039,17.60211181640625,17.951248168945312,17.627647399902344,17.422687530517578,17.16753387451172,17.107418060302734,17.246469497680664,17.528627395629883,17.614696502685547,17.604629516601562,16.639734268188477,17.13957405090332,17.5505313873291,17.219572067260742,16.959651947021484,17.29033851623535,17.62150764465332,16.741086959838867,16.727624893188477,17.691728591918945,16.866605758666992,17.25912857055664,17.077302932739258,16.947078704833984,17.086639404296875,17.471996307373047,16.99431610107422,17.38109016418457,17.470022201538086,17.48491096496582,17.343364715576172,17.65127944946289,18.039100646972656,17.138072967529297,18.042869567871094,17.348234176635742,17.31548309326172,17.577621459960938,17.12301254272461,17.361141204833984,17.201730728149414,17.27201271057129,17.878746032714844,17.763086318969727,17.833179473876953,17.336273193359375,17.545963287353516,17.139307022094727,17.17229461669922,17.55111312866211,17.371185302734375,17.239770889282227,17.65629768371582,17.110326766967773,17.927505493164062,16.154640197753906,17.241455078125,17.13549041748047,17.526689529418945,17.244476318359375,17.144107818603516,17.246501922607422,17.385517120361328,17.294212341308594,17.292734146118164,16.923372268676758,17.234243392944336,17.208330154418945,17.14756965637207,17.420330047607422,17.545522689819336,17.165042877197266,17.276430130004883,17.674972534179688,17.141733169555664,17.180286407470703,17.14375877380371,17.38277244567871,16.833749771118164,17.410518646240234,17.518287658691406,17.742019653320312,17.80024528503418,17.419418334960938,17.93463706970215,17.644540786743164,17.422473907470703,17.30970573425293,17.453350067138672,17.424232482910156,17.31258773803711,17.25029945373535,17.480989456176758,17.334068298339844,17.24028778076172,17.375463485717773,17.143680572509766,17.28766632080078,16.98453712463379,17.366724014282227,16.838119506835938,17.08017349243164,17.455516815185547,17.297950744628906,17.315940856933594,17.273847579956055,17.40574836730957,17.265884399414062,17.29840087890625,17.38568687438965,17.27043914794922,17.27317237854004,17.3194580078125,17.13003158569336,17.478487014770508],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-34.27167510986328,-33.436885833740234,-33.67157745361328,-35.42924880981445,-33.6185302734375,-33.575958251953125,-32.83479309082031,-34.47975158691406,-34.351097106933594,-32.76370620727539,-33.37736511230469,-33.94854736328125,-34.47283935546875,-32.25503158569336,-33.97500228881836,-33.622501373291016,-32.904842376708984,-33.62049102783203,-34.24639129638672,-35.92761993408203,-33.4228401184082,-34.468772888183594,-33.426082611083984,-32.68428039550781,-33.26957702636719,-33.913299560546875,-35.30644226074219,-34.824562072753906,-34.29085922241211,-33.973873138427734,-32.900482177734375,-33.43743133544922,-34.49182891845703,-34.49750518798828,-32.886138916015625,-33.93254852294922,-35.6706428527832,-32.03490447998047,-32.2762451171875,-34.32441329956055,-34.787025451660156,-34.08979797363281,-35.23066711425781,-34.51014709472656,-33.757232666015625,-32.748233795166016,-32.100502014160156,-35.614994049072266,-33.245941162109375,-34.921321868896484,-34.34077072143555,-34.02733612060547,-32.45103073120117,-33.43674850463867,-33.97217559814453,-34.09820556640625,-33.681678771972656,-32.55179977416992,-33.82107925415039,-31.14276695251465,-33.81962203979492,-34.501014709472656,-32.01334762573242,-33.78696060180664,-34.2928352355957,-34.845157623291016,-31.950281143188477,-34.3811149597168,-33.27903366088867,-33.343441009521484,-34.193756103515625,-33.327632904052734,-33.668907165527344,-35.39052963256836,-33.93120574951172,-33.85635757446289,-33.50675582885742,-34.38510513305664,-33.67814254760742,-32.56126022338867,-31.261581420898438,-33.367862701416016,-33.25043869018555,-35.248016357421875,-33.588863372802734,-34.36772155761719,-33.59404373168945,-34.258689880371094,-33.417518615722656,-33.66694259643555,-32.21548843383789,-35.055015563964844,-32.85704040527344,-33.786170959472656,-33.229461669921875,-33.66560745239258,-33.81630325317383,-32.83315658569336,-33.36359786987305,-33.182220458984375,-33.113155364990234,-33.402278900146484,-33.659149169921875,-32.99982833862305,-32.9214973449707,-34.447086334228516,-33.71620559692383,-34.10477828979492,-33.451656341552734,-32.848323822021484,-33.45805358886719,-33.68470001220703,-34.02739715576172,-33.7822151184082,-33.391754150390625,-33.40453338623047,-33.363800048828125,-34.28951644897461,-32.66130447387695,-32.884239196777344,-33.884307861328125,-33.75777053833008,-33.98991012573242,-32.985557556152344,-34.53352355957031,-34.32420349121094,-34.255802154541016,-34.8285026550293,-33.284236907958984,-34.526206970214844,-33.971458435058594,-33.2424201965332,-33.80799865722656,-34.05721664428711,-34.91712951660156,-34.45640182495117,-33.686946868896484,-34.11933135986328,-33.82475280761719,-33.688323974609375,-34.27741622924805,-33.64559555053711,-33.51026916503906,-34.28962326049805,-33.93864059448242,-34.31269836425781,-33.280052185058594,-34.105308532714844,-34.310489654541016,-33.95145034790039,-34.14643859863281,-34.031700134277344,-33.38157653808594,-34.1347541809082,-33.56144714355469,-33.512550354003906,-34.24869155883789,-33.6333122253418,-34.41741943359375,-35.483238220214844,-33.838680267333984,-32.9748420715332,-33.00198745727539,-33.81071472167969,-33.2594108581543,-34.061622619628906,-33.43306350708008,-33.25465774536133,-33.751800537109375,-34.433677673339844,-33.5931510925293,-33.38970947265625,-35.589996337890625,-33.52055740356445,-33.484893798828125,-34.14595413208008,-33.54468536376953,-34.91039276123047,-33.86124038696289,-34.24863052368164,-33.599891662597656,-32.880279541015625,-34.768226623535156,-33.5197639465332,-33.87849426269531,-33.56965637207031,-33.78291320800781,-34.15882873535156,-34.41487503051758,-34.484161376953125,-34.05845260620117,-34.129844665527344,-33.777610778808594,-33.839473724365234,-33.979923248291016,-33.224586486816406,-33.303184509277344,-33.98952102661133,-34.28582000732422,-33.5259895324707,-34.361324310302734,-33.521026611328125,-33.827571868896484,-33.88479232788086,-33.399051666259766,-33.8939094543457,-33.99850845336914,-33.68947982788086,-33.76087951660156,-33.666908264160156,-33.61012268066406,-32.92774963378906,-33.7101936340332,-33.976802825927734,-33.72754669189453,-34.00192642211914,-33.95659637451172,-34.005218505859375,-33.633888244628906,-34.04145431518555,-33.3445930480957,-34.13026428222656,-34.45111846923828,-34.786842346191406,-33.72952651977539,-33.651275634765625,-33.5921630859375,-33.00328826904297,-33.86701583862305,-33.412837982177734,-34.12955856323242,-33.85353088378906,-34.08280944824219,-34.00770568847656,-34.1708984375,-33.30230712890625,-33.08598709106445,-33.95659637451172,-34.05536651611328,-33.965126037597656,-33.19945526123047,-33.83991622924805,-33.73253631591797,-33.66507339477539,-33.65591049194336,-33.758155822753906,-34.052547454833984,-33.2591667175293,-33.64998245239258,-33.58061218261719],"y":[-1.3364434242248535,-1.45102059841156,-3.056312322616577,-0.6289229989051819,-0.7474259734153748,-1.2986592054367065,-0.8777238130569458,-1.9944450855255127,-0.7659304738044739,-2.2892606258392334,-0.5696747899055481,-1.431046485900879,-1.8053412437438965,-0.6826369166374207,-2.793419361114502,-1.513646125793457,-0.44070303440093994,-1.1046991348266602,-1.4941223859786987,-0.8112407922744751,-1.4864425659179688,-0.18576078116893768,-2.0151398181915283,-1.1122586727142334,-1.899965524673462,-0.16182076930999756,-0.19625693559646606,-0.3685072064399719,-1.9124641418457031,-1.558745265007019,-1.5904864072799683,-0.3287651538848877,-0.10921446979045868,-1.1826186180114746,-2.0714266300201416,-1.0601030588150024,-1.0690515041351318,-1.0125292539596558,-0.9594082236289978,-2.4538052082061768,-0.8135329484939575,-0.9905463457107544,-2.468886137008667,-0.8413410186767578,-2.4980123043060303,-0.7119110822677612,-2.3883862495422363,-0.5338624119758606,0.05894225090742111,-0.6542631983757019,-1.4643526077270508,-2.97706937789917,-2.89145827293396,-0.8476855754852295,-2.134591817855835,-1.7922446727752686,-0.5696166753768921,-1.7595211267471313,-1.103864073753357,-0.5480334162712097,-2.6800537109375,-0.09746628254652023,-0.5379012227058411,-1.0775736570358276,-0.7635955214500427,-1.7366620302200317,-4.481472492218018,-1.1314055919647217,-1.4256303310394287,-0.021203573793172836,-0.8596348762512207,-1.5446844100952148,-1.5442662239074707,-1.2420045137405396,-0.33934280276298523,-2.304572582244873,-0.5304762125015259,-1.6148329973220825,-2.853926420211792,-1.6494842767715454,-0.6847352981567383,-2.5007808208465576,-1.15120530128479,-0.5541464686393738,-1.3336845636367798,-1.5490739345550537,-1.677236795425415,-1.3350355625152588,-1.2462025880813599,-2.11963152885437,-1.4211009740829468,-2.207531452178955,-4.118685245513916,-1.8561198711395264,-1.037472128868103,-1.61720871925354,-1.6007660627365112,-1.6267606019973755,-1.7592896223068237,-2.0479516983032227,-1.2551727294921875,-0.1335109919309616,-1.8343884944915771,-0.7729625105857849,-0.6543496251106262,-1.0924001932144165,-0.8150520324707031,-0.9804002046585083,-0.8162814378738403,-0.7045435309410095,-1.863228440284729,-1.748055338859558,-1.316145896911621,-0.603411853313446,-0.5090051889419556,-1.9211374521255493,-1.5527913570404053,-1.0143364667892456,-1.053725004196167,-0.6462517976760864,-0.6665849089622498,-1.971325159072876,-2.5090034008026123,-1.1530216932296753,-1.8575313091278076,-1.6080812215805054,-1.0443270206451416,-1.361836552619934,-1.3711936473846436,-1.8564873933792114,-1.2335138320922852,-1.3908811807632446,-1.1012589931488037,-1.358061671257019,-1.7089595794677734,-1.24142324924469,-1.4524719715118408,-1.2436375617980957,-1.2873388528823853,-1.1472523212432861,-1.3789690732955933,-3.096146583557129,-2.106245756149292,-0.46156996488571167,-1.8253437280654907,-1.1563578844070435,-0.2172575742006302,-1.575636625289917,-1.2881474494934082,-1.463605523109436,-0.9772499799728394,-2.1410255432128906,-1.6029213666915894,-1.4071791172027588,-1.1797770261764526,-1.438847541809082,-1.900588870048523,-1.1744440793991089,-1.642092227935791,-1.5612050294876099,-1.142577052116394,-1.3615329265594482,-1.8336247205734253,-1.1287251710891724,-1.358890414237976,-1.3180336952209473,-0.3888200521469116,-3.0069048404693604,-0.40774691104888916,-0.9037824273109436,-1.2069928646087646,-1.8477718830108643,-1.340422511100769,-1.3856321573257446,-1.910180687904358,-2.1949198246002197,-1.4664517641067505,-1.3165088891983032,-1.3744661808013916,-1.4109522104263306,-1.171903371810913,-3.676419734954834,-1.6527421474456787,-1.6287734508514404,-1.6602952480316162,-1.2828569412231445,-1.272684931755066,-1.3460434675216675,-1.5271486043930054,-1.5118286609649658,-1.7634373903274536,-1.6491373777389526,-1.2221428155899048,-1.4356156587600708,-1.9119662046432495,-1.446515679359436,-1.5744038820266724,-1.1949522495269775,-1.1143381595611572,-2.1531453132629395,-1.5487462282180786,-1.6358717679977417,-1.414737582206726,-1.8881995677947998,-2.3366732597351074,-1.4748088121414185,-1.4365572929382324,-1.4294300079345703,-1.6826101541519165,-1.4133410453796387,-0.9655606150627136,-1.332902431488037,-1.2888940572738647,-1.3701956272125244,-1.2997525930404663,-1.4573971033096313,-1.4584405422210693,-1.3560729026794434,-1.9770269393920898,-1.1529302597045898,-1.2903947830200195,-1.390364646911621,-1.422113060951233,-2.394178867340088,-1.1267509460449219,-1.303784966468811,-1.5809004306793213,-4.110000133514404,-1.4291605949401855,-1.420809030532837,-1.3967417478561401,-1.6211094856262207,-1.5238538980484009,-1.601845383644104,-1.5961558818817139,-2.680713415145874,-1.8107867240905762,-1.8157618045806885,-1.453757882118225,-1.4419405460357666,-1.273141860961914,-1.5811293125152588,-1.592419981956482,-1.348967432975769,-1.187544345855713,-1.4536992311477661,-1.458364486694336,-1.6431893110275269,-1.4618706703186035,-1.4857535362243652],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}]},{"data":[{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-17.628131866455078,-17.773818969726562,-17.800350189208984,-17.548810958862305,-17.71168327331543,-17.449941635131836,-17.530773162841797,-17.56430435180664,-17.214122772216797,-17.61676788330078,-17.549076080322266,-17.426294326782227,-17.4973087310791,-17.642993927001953,-17.718320846557617,-17.72604751586914,-17.63195037841797,-17.406023025512695,-17.696069717407227,-17.719266891479492,-17.495742797851562,-17.33068084716797,-17.635608673095703,-17.43344497680664,-17.75107192993164,-17.611696243286133,-17.577396392822266,-17.502521514892578,-17.583892822265625,-17.40532684326172,-17.60500144958496,-17.77857208251953,-17.525724411010742,-17.413211822509766,-17.677034378051758,-17.686113357543945,-17.64569664001465,-17.54326629638672,-17.47701644897461,-17.53077507019043,-17.763174057006836,-17.656909942626953,-17.55320167541504,-17.52002716064453,-17.847463607788086,-17.265310287475586,-17.509618759155273,-17.552112579345703,-17.633024215698242,-17.539411544799805,-17.46214485168457,-17.4759578704834,-17.61187744140625,-17.555932998657227,-17.59286880493164,-17.612796783447266,-17.71453285217285,-17.61149024963379,-17.793760299682617,-17.582380294799805,-17.57544708251953,-17.588144302368164,-17.515443801879883,-17.657617568969727,-17.55446434020996,-17.89423942565918,-17.600845336914062,-17.664501190185547,-17.58641242980957,-17.618053436279297,-17.426986694335938,-17.498794555664062,-17.64760971069336,-17.538942337036133,-17.599775314331055,-17.731069564819336,-17.7790584564209,-17.478599548339844,-17.5540828704834,-17.82984161376953,-18.114110946655273,-17.59258460998535,-17.535293579101562,-17.599876403808594,-17.699800491333008,-17.5750789642334,-17.56216049194336,-17.74146270751953,-17.62569236755371,-17.627906799316406,-17.596824645996094,-17.901512145996094,-17.71180534362793,-17.49979019165039,-17.60845184326172,-17.621978759765625,-17.507997512817383,-17.577436447143555,-17.680009841918945,-17.566043853759766,-17.54693603515625,-17.600759506225586,-17.607133865356445,-17.58976936340332,-17.514259338378906,-17.59662437438965,-17.5999698638916,-17.633493423461914,-17.89301872253418,-17.681621551513672,-17.636056900024414,-17.559093475341797,-17.620668411254883,-17.618213653564453,-17.5997314453125,-17.674503326416016,-17.579166412353516,-17.625499725341797,-17.62131690979004,-17.65494728088379,-17.628116607666016,-17.791393280029297,-17.688568115234375,-17.57176971435547,-19.219970703125,-18.706422805786133,-17.78581428527832,-17.658578872680664,-17.7006778717041,-17.615467071533203,-17.62703514099121,-17.679115295410156,-17.750656127929688,-17.592937469482422,-17.629594802856445,-17.757816314697266,-17.648780822753906,-18.189254760742188,-17.756267547607422,-17.590993881225586,-17.6998233795166,-17.66960334777832,-17.62335777282715,-17.595989227294922,-17.630203247070312,-17.60637092590332,-17.636795043945312,-17.614078521728516,-17.68332862854004,-17.654714584350586,-17.59457778930664,-17.693056106567383,-17.602277755737305,-17.671424865722656,-17.738834381103516,-17.65404510498047,-17.638853073120117,-17.876317977905273,-17.605546951293945,-17.643136978149414,-17.71052360534668,-17.653043746948242,-17.71715545654297,-17.658769607543945,-17.62126922607422,-17.621715545654297,-17.64533233642578,-17.698497772216797,-17.673282623291016,-17.60978889465332,-17.624731063842773,-18.110328674316406,-17.648792266845703,-17.626981735229492,-17.660512924194336,-17.655231475830078,-17.678903579711914,-17.645008087158203,-17.651052474975586,-17.68690299987793,-17.630468368530273,-18.307266235351562,-17.63149070739746,-17.874168395996094,-17.694507598876953,-17.960214614868164,-17.763883590698242,-17.749055862426758,-17.630151748657227,-17.674291610717773,-17.65572738647461,-17.72080421447754,-17.663549423217773,-17.657987594604492,-17.660327911376953,-17.667627334594727,-17.654033660888672,-17.853870391845703,-17.652973175048828,-17.66739273071289,-18.30074119567871,-17.64338493347168,-17.672924041748047,-17.667463302612305,-17.682435989379883,-17.651458740234375,-17.6440372467041,-17.68874168395996,-17.68351173400879,-17.70132064819336,-17.679035186767578,-17.666748046875,-17.70734405517578,-17.68338394165039,-17.736984252929688,-17.796846389770508,-18.098756790161133,-17.657676696777344,-17.683761596679688,-17.663074493408203,-17.653913497924805,-17.698698043823242,-17.661598205566406,-17.658294677734375,-17.659521102905273,-17.662931442260742,-17.87920570373535,-17.6772518157959,-17.65524673461914,-17.654495239257812,-17.667573928833008,-17.65461540222168,-17.673622131347656,-17.674354553222656,-17.669559478759766,-18.436283111572266,-17.67233657836914,-17.69266700744629,-18.40131378173828,-17.6728458404541,-17.672672271728516,-17.670419692993164,-17.677310943603516,-17.71173095703125,-17.677490234375,-17.682878494262695,-17.67927360534668,-17.685354232788086,-17.677045822143555,-17.671836853027344],"y":[-28.380962371826172,-28.2447509765625,-28.294540405273438,-28.332679748535156,-28.263893127441406,-28.253206253051758,-28.28225326538086,-28.318588256835938,-28.221580505371094,-28.330781936645508,-28.29418182373047,-28.327720642089844,-28.31852912902832,-28.300899505615234,-28.319631576538086,-28.281997680664062,-28.379186630249023,-28.31861686706543,-28.34583854675293,-28.348499298095703,-28.336206436157227,-28.309167861938477,-28.312143325805664,-28.353240966796875,-28.3004093170166,-28.320232391357422,-28.339223861694336,-28.280088424682617,-28.289844512939453,-28.36772918701172,-28.300134658813477,-28.286619186401367,-28.286012649536133,-28.279373168945312,-28.265504837036133,-28.30038833618164,-28.305591583251953,-28.25710105895996,-28.294843673706055,-28.304676055908203,-28.289670944213867,-28.246129989624023,-28.28295135498047,-28.320634841918945,-28.28873634338379,-28.43327522277832,-28.286563873291016,-28.35069465637207,-28.294113159179688,-28.26068115234375,-28.31824493408203,-28.30494499206543,-28.292470932006836,-28.265056610107422,-28.310096740722656,-28.296249389648438,-28.307838439941406,-28.310606002807617,-28.285022735595703,-28.29081916809082,-28.331762313842773,-28.30376625061035,-28.292436599731445,-28.328441619873047,-28.32508659362793,-28.289339065551758,-28.308935165405273,-28.3173770904541,-28.311004638671875,-28.29658317565918,-28.292098999023438,-28.3179874420166,-28.353500366210938,-28.33651351928711,-28.36358642578125,-28.341398239135742,-28.300243377685547,-28.35384750366211,-28.33098030090332,-28.330711364746094,-28.265457153320312,-28.322311401367188,-28.362051010131836,-28.322364807128906,-28.306493759155273,-28.348125457763672,-28.31081199645996,-28.312789916992188,-28.308151245117188,-28.36034393310547,-28.33533477783203,-28.297218322753906,-28.332408905029297,-28.36057472229004,-28.37342643737793,-28.345306396484375,-28.362651824951172,-28.349315643310547,-28.332622528076172,-28.348596572875977,-28.35013198852539,-28.339984893798828,-28.324926376342773,-28.357585906982422,-28.319950103759766,-28.330236434936523,-28.346872329711914,-28.338899612426758,-28.31804656982422,-28.338212966918945,-28.359111785888672,-28.355649948120117,-28.35333824157715,-28.3410701751709,-28.343318939208984,-28.314472198486328,-28.33356285095215,-28.351768493652344,-28.350797653198242,-28.347822189331055,-28.345849990844727,-28.37112808227539,-28.343473434448242,-28.36777114868164,-28.151582717895508,-28.22916030883789,-28.331987380981445,-28.335723876953125,-28.33438491821289,-28.334716796875,-28.34262466430664,-28.324190139770508,-28.33952522277832,-28.34718132019043,-28.342952728271484,-28.325092315673828,-28.32959747314453,-28.285762786865234,-28.33211898803711,-28.349231719970703,-28.325632095336914,-28.33637046813965,-28.346107482910156,-28.340099334716797,-28.342716217041016,-28.34381103515625,-28.341171264648438,-28.348480224609375,-28.332748413085938,-28.344165802001953,-28.345340728759766,-28.33721160888672,-28.349210739135742,-28.34122657775879,-28.33026885986328,-28.34035301208496,-28.345022201538086,-28.31351661682129,-28.347801208496094,-28.33846092224121,-28.330970764160156,-28.337865829467773,-28.33041000366211,-28.332927703857422,-28.334096908569336,-28.330537796020508,-28.341604232788086,-28.335847854614258,-28.33949089050293,-28.353824615478516,-28.346982955932617,-28.26822853088379,-28.340824127197266,-28.33513832092285,-28.337717056274414,-28.338550567626953,-28.33561134338379,-28.338464736938477,-28.34136390686035,-28.33350944519043,-28.341655731201172,-28.260501861572266,-28.3370418548584,-28.315351486206055,-28.332416534423828,-28.291244506835938,-28.321449279785156,-28.323877334594727,-28.33934783935547,-28.33169174194336,-28.332860946655273,-28.320531845092773,-28.329748153686523,-28.329442977905273,-28.326738357543945,-28.32516098022461,-28.326147079467773,-28.29189109802246,-28.32663917541504,-28.32814598083496,-28.22836685180664,-28.33142852783203,-28.32966423034668,-28.328519821166992,-28.328716278076172,-28.332195281982422,-28.33383560180664,-28.330751419067383,-28.329273223876953,-28.326534271240234,-28.330005645751953,-28.33139991760254,-28.327152252197266,-28.329805374145508,-28.32231903076172,-28.314311981201172,-28.272533416748047,-28.335651397705078,-28.33036231994629,-28.334308624267578,-28.335693359375,-28.3283634185791,-28.333362579345703,-28.33498191833496,-28.32777976989746,-28.328418731689453,-28.29468536376953,-28.325952529907227,-28.328332901000977,-28.32874870300293,-28.327085494995117,-28.331153869628906,-28.323238372802734,-28.322784423828125,-28.323326110839844,-28.20339584350586,-28.321887969970703,-28.318992614746094,-28.201934814453125,-28.32198143005371,-28.3221435546875,-28.322675704956055,-28.322002410888672,-28.316112518310547,-28.321426391601562,-28.32082176208496,-28.32063865661621,-28.319664001464844,-28.320884704589844,-28.321758270263672],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.438079833984375,18.569046020507812,18.38906478881836,18.42583465576172,18.6065731048584,18.557024002075195,18.498571395874023,18.316892623901367,18.769243240356445,18.529752731323242,18.44495391845703,18.465726852416992,18.435392379760742,18.356861114501953,18.610492706298828,18.421932220458984,18.448863983154297,18.444799423217773,18.449443817138672,18.369590759277344,18.543834686279297,18.330547332763672,18.34525489807129,18.423778533935547,18.456470489501953,18.48592758178711,18.51132583618164,18.550260543823242,18.356184005737305,18.41654396057129,18.39978790283203,18.453458786010742,18.453523635864258,18.561574935913086,18.59640121459961,18.452621459960938,18.437040328979492,18.4355525970459,18.43537139892578,18.51491928100586,18.408550262451172,18.438364028930664,18.371183395385742,18.515947341918945,18.363452911376953,18.46800994873047,18.49080467224121,18.35850715637207,18.450088500976562,18.418344497680664,18.77776527404785,18.450958251953125,18.38448143005371,18.44140625,18.380615234375,18.421127319335938,18.462614059448242,18.511520385742188,18.429119110107422,18.370380401611328,18.356077194213867,18.36635971069336,18.412181854248047,18.446304321289062,18.45777130126953,18.420635223388672,18.409215927124023,18.40488624572754,18.42212677001953,18.406723022460938,18.447460174560547,18.407625198364258,18.443960189819336,18.364404678344727,18.358240127563477,18.36235237121582,18.45219612121582,18.427406311035156,18.420347213745117,18.41193962097168,18.423343658447266,18.430326461791992,18.408283233642578,18.439332962036133,18.42559242248535,18.45415687561035,18.45015525817871,18.47852325439453,18.420909881591797,18.454971313476562,18.446020126342773,18.464744567871094,18.470428466796875,18.427433013916016,18.443784713745117,18.458511352539062,18.44978904724121,18.451515197753906,18.481033325195312,18.42998504638672,18.44948387145996,18.47862434387207,18.427167892456055,18.49132537841797,18.421829223632812,18.481342315673828,18.464021682739258,18.430654525756836,18.446605682373047,18.463376998901367,18.47146224975586,18.44027328491211,18.46470832824707,18.467687606811523,18.461719512939453,18.458574295043945,18.45664405822754,18.470867156982422,18.46703338623047,18.51457977294922,18.461198806762695,18.489501953125,18.49062728881836,18.4588623046875,18.493152618408203,18.530221939086914,18.449417114257812,18.461444854736328,18.488901138305664,18.3793888092041,18.4525146484375,18.448881149291992,18.459714889526367,18.456607818603516,18.440645217895508,18.459135055541992,18.433900833129883,18.435741424560547,18.45979118347168,18.46429443359375,18.457656860351562,18.4657039642334,18.469301223754883,18.456716537475586,18.4710693359375,18.445419311523438,18.46512794494629,18.473194122314453,18.467702865600586,18.498464584350586,18.457162857055664,18.464082717895508,18.458948135375977,18.48950958251953,18.46027946472168,18.452953338623047,18.449111938476562,18.445587158203125,18.45099449157715,18.468353271484375,18.45857048034668,18.47397804260254,18.469501495361328,18.46720314025879,18.453853607177734,18.46452522277832,18.46929359436035,18.484140396118164,18.473072052001953,18.501310348510742,18.48194122314453,18.4732723236084,18.467714309692383,18.469045639038086,18.466522216796875,18.471527099609375,18.46979522705078,18.464509963989258,18.470306396484375,18.467763900756836,18.470901489257812,18.47452163696289,18.47960090637207,18.475492477416992,18.473052978515625,18.475534439086914,18.471099853515625,18.48263168334961,18.46714210510254,18.468793869018555,18.475786209106445,18.47823715209961,18.45803451538086,18.46171760559082,18.46754264831543,18.456573486328125,18.461307525634766,18.46709442138672,18.464862823486328,18.48086166381836,18.46088409423828,18.458709716796875,18.45732307434082,18.4609375,18.46389389038086,18.448652267456055,18.45494842529297,18.452089309692383,18.451583862304688,18.4497127532959,18.45111083984375,18.447368621826172,18.448110580444336,18.448623657226562,18.448469161987305,18.44931411743164,18.450571060180664,18.446653366088867,18.449628829956055,18.450641632080078,18.451526641845703,18.447275161743164,18.44672393798828,18.443599700927734,18.44677734375,18.44654083251953,18.445383071899414,18.450153350830078,18.446924209594727,18.449600219726562,18.448776245117188,18.45039939880371,18.452302932739258,18.44935417175293,18.44997215270996,18.45024871826172,18.4525203704834,18.453659057617188,18.455120086669922,18.455591201782227,18.458160400390625,18.45761489868164,18.45785903930664,18.458810806274414,18.46016502380371,18.454734802246094,18.454736709594727,18.4542236328125,18.4545955657959,18.45556640625],"y":[-3.651431083679199,-3.77278733253479,-3.5688984394073486,-3.7397682666778564,-3.6987457275390625,-3.7060697078704834,-3.6931192874908447,-3.6502766609191895,-3.7586159706115723,-3.6782097816467285,-3.691816806793213,-3.7749183177948,-3.643673896789551,-3.6353354454040527,-3.774770736694336,-3.6966748237609863,-3.7059519290924072,-3.5674374103546143,-3.7624728679656982,-3.5801873207092285,-3.796783924102783,-3.605247974395752,-3.6666762828826904,-3.6732382774353027,-3.6771655082702637,-3.713216543197632,-3.670603036880493,-3.719928026199341,-3.6930992603302,-3.633690357208252,-3.6254029273986816,-3.6987454891204834,-3.687016248703003,-3.633525848388672,-3.66739559173584,-3.622716188430786,-3.6610686779022217,-3.681114912033081,-3.6605284214019775,-3.6526050567626953,-3.6889212131500244,-3.630324602127075,-3.675110101699829,-3.718059778213501,-3.5669784545898438,-3.678569793701172,-3.6654114723205566,-3.692338705062866,-3.701202630996704,-3.651115894317627,-3.6685497760772705,-3.6888015270233154,-3.689884662628174,-3.6725151538848877,-3.649406909942627,-3.617278814315796,-3.6444830894470215,-3.6921844482421875,-3.687133312225342,-3.662971019744873,-3.65303373336792,-3.6611204147338867,-3.6716768741607666,-3.6744155883789062,-3.6345126628875732,-3.6885340213775635,-3.6765427589416504,-3.651573896408081,-3.6248435974121094,-3.616158962249756,-3.636409282684326,-3.691131114959717,-3.6672728061676025,-3.6383938789367676,-3.6566660404205322,-3.6563124656677246,-3.659879684448242,-3.6540746688842773,-3.677870750427246,-3.6497035026550293,-3.6713638305664062,-3.642512083053589,-3.682788372039795,-3.6648387908935547,-3.6982970237731934,-3.7074759006500244,-3.6731953620910645,-3.680589199066162,-3.6606242656707764,-3.6428585052490234,-3.660658121109009,-3.666673183441162,-3.624885320663452,-3.669008493423462,-3.6717369556427,-3.6720449924468994,-3.6911873817443848,-3.6801459789276123,-3.677783727645874,-3.663689613342285,-3.664996862411499,-3.66205096244812,-3.6326332092285156,-3.648873805999756,-3.6562952995300293,-3.6671669483184814,-3.672663688659668,-3.7043769359588623,-3.657087564468384,-3.6705257892608643,-3.665053367614746,-3.6811816692352295,-3.688767433166504,-3.6807751655578613,-3.6746180057525635,-3.6820626258850098,-3.6914713382720947,-3.6857922077178955,-3.6813502311706543,-3.703317642211914,-3.684303045272827,-3.7132813930511475,-3.688340902328491,-3.6789791584014893,-3.7047243118286133,-3.7015602588653564,-3.661553382873535,-3.6816658973693848,-3.698939800262451,-3.68953537940979,-3.6819770336151123,-3.6730926036834717,-3.6858396530151367,-3.6960573196411133,-3.6806774139404297,-3.6870830059051514,-3.6896462440490723,-3.6844911575317383,-3.6933000087738037,-3.6840739250183105,-3.6819581985473633,-3.6783244609832764,-3.686021327972412,-3.6778275966644287,-3.6775946617126465,-3.674067258834839,-3.6853764057159424,-3.677757978439331,-3.667957305908203,-3.6784934997558594,-3.6653189659118652,-3.673346519470215,-3.6765568256378174,-3.6727004051208496,-3.677016496658325,-3.674877405166626,-3.6770453453063965,-3.6834468841552734,-3.677396774291992,-3.6803524494171143,-3.672959327697754,-3.6803832054138184,-3.6814675331115723,-3.6734848022460938,-3.6865251064300537,-3.6693875789642334,-3.673419713973999,-3.6868176460266113,-3.6818432807922363,-3.692917585372925,-3.684499979019165,-3.6733686923980713,-3.6759583950042725,-3.685426950454712,-3.6892447471618652,-3.6802477836608887,-3.6765456199645996,-3.675614833831787,-3.6738126277923584,-3.6782655715942383,-3.6759567260742188,-3.6788337230682373,-3.678412914276123,-3.679051399230957,-3.6815102100372314,-3.6820192337036133,-3.6779987812042236,-3.6842234134674072,-3.68050217628479,-3.677757978439331,-3.6851208209991455,-3.6865687370300293,-3.683851480484009,-3.6781742572784424,-3.684074878692627,-3.6804089546203613,-3.6802773475646973,-3.679717540740967,-3.678128242492676,-3.68208384513855,-3.6780121326446533,-3.67606258392334,-3.6744344234466553,-3.678312063217163,-3.680091619491577,-3.674992799758911,-3.678718090057373,-3.678527355194092,-3.671360969543457,-3.671064615249634,-3.6732866764068604,-3.6714346408843994,-3.6723110675811768,-3.6720423698425293,-3.6710426807403564,-3.6719398498535156,-3.672398805618286,-3.6728577613830566,-3.6727068424224854,-3.6740753650665283,-3.672980785369873,-3.672675371170044,-3.6743969917297363,-3.6744184494018555,-3.673410654067993,-3.673060178756714,-3.6737473011016846,-3.675658702850342,-3.6747522354125977,-3.674968719482422,-3.6756227016448975,-3.6756997108459473,-3.6752729415893555,-3.6749942302703857,-3.6749930381774902,-3.67396879196167,-3.6744635105133057,-3.674117088317871,-3.6745338439941406,-3.6744091510772705,-3.6748366355895996,-3.674365520477295,-3.675187587738037,-3.674838066101074,-3.6741726398468018,-3.673766851425171,-3.67415714263916,-3.6744773387908936,-3.675225257873535,-3.675328493118286],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-10.819480895996094,-11.042634963989258,-11.0549955368042,-11.067482948303223,-10.895575523376465,-10.819292068481445,-10.945890426635742,-10.873614311218262,-10.92857837677002,-10.824417114257812,-10.848414421081543,-10.894635200500488,-10.912558555603027,-10.96130084991455,-10.950092315673828,-10.815775871276855,-10.881117820739746,-10.674919128417969,-11.05145263671875,-10.914694786071777,-10.825937271118164,-11.024686813354492,-10.92713451385498,-11.257332801818848,-10.925187110900879,-10.848124504089355,-10.966354370117188,-10.943007469177246,-10.846627235412598,-10.778745651245117,-10.923300743103027,-10.780338287353516,-10.911572456359863,-10.916790962219238,-10.980118751525879,-10.852063179016113,-10.90106201171875,-10.946368217468262,-10.964384078979492,-10.900364875793457,-10.906424522399902,-10.914682388305664,-11.062443733215332,-10.9928617477417,-10.85546588897705,-10.8524808883667,-10.951330184936523,-11.030333518981934,-10.891674041748047,-10.978352546691895,-10.908171653747559,-10.911504745483398,-10.824758529663086,-10.941937446594238,-10.856453895568848,-10.87794303894043,-10.835892677307129,-10.901724815368652,-10.879426002502441,-10.921731948852539,-10.90119457244873,-11.003302574157715,-10.861638069152832,-10.918868064880371,-10.904433250427246,-10.908862113952637,-10.912068367004395,-10.953312873840332,-10.956450462341309,-10.918381690979004,-10.897831916809082,-10.884822845458984,-10.905197143554688,-10.834547996520996,-10.956789016723633,-10.88698673248291,-10.890178680419922,-10.895215034484863,-10.984606742858887,-10.952116966247559,-10.875509262084961,-10.963005065917969,-10.874114036560059,-10.963054656982422,-10.895593643188477,-10.901604652404785,-10.917236328125,-10.944047927856445,-10.910039901733398,-10.942042350769043,-10.870471954345703,-10.926995277404785,-10.929116249084473,-10.939852714538574,-10.888100624084473,-10.911111831665039,-10.955891609191895,-10.944808006286621,-10.920400619506836,-10.933055877685547,-10.90660572052002,-10.896987915039062,-10.965531349182129,-10.933156967163086,-10.90764331817627,-10.914095878601074,-10.99647045135498,-10.937141418457031,-10.904082298278809,-10.955499649047852,-10.882282257080078,-10.923988342285156,-10.963356018066406,-10.883487701416016,-10.922036170959473,-10.953903198242188,-10.893662452697754,-10.91158676147461,-10.882495880126953,-10.915651321411133,-10.909669876098633,-10.900039672851562,-10.902939796447754,-10.934354782104492,-10.89669132232666,-10.899523735046387,-10.905166625976562,-10.865747451782227,-10.962239265441895,-10.88260555267334,-10.893507957458496,-10.906184196472168,-10.927809715270996,-10.882869720458984,-10.908102035522461,-10.923967361450195,-10.918685913085938,-10.920516014099121,-10.91393756866455,-10.915315628051758,-10.915757179260254,-10.921655654907227,-10.914450645446777,-10.897906303405762,-10.906022071838379,-10.922906875610352,-10.911445617675781,-10.903762817382812,-10.909439086914062,-10.899386405944824,-10.905437469482422,-10.9000825881958,-10.896697998046875,-10.887951850891113,-10.890009880065918,-10.896618843078613,-10.896363258361816,-10.908886909484863,-10.884077072143555,-10.903417587280273,-10.893342971801758,-10.904214859008789,-10.903528213500977,-10.900066375732422,-10.896108627319336,-10.90187931060791,-10.904982566833496,-10.905176162719727,-10.908381462097168,-10.908286094665527,-10.904162406921387,-10.911373138427734,-10.893515586853027,-10.916561126708984,-10.881829261779785,-10.906916618347168,-10.916834831237793,-10.920007705688477,-10.908221244812012,-10.898981094360352,-10.908441543579102,-10.909133911132812,-10.894265174865723,-10.915102005004883,-10.914718627929688,-10.915183067321777,-10.921096801757812,-10.913482666015625,-10.921112060546875,-10.92449951171875,-10.918951988220215,-10.913546562194824,-10.91298770904541,-10.918257713317871,-10.9186372756958,-10.915364265441895,-10.897743225097656,-10.918163299560547,-10.921757698059082,-10.91787052154541,-10.923651695251465,-10.918623924255371,-10.914810180664062,-10.916808128356934,-10.92134952545166,-10.91522216796875,-10.919179916381836,-10.916278839111328,-10.917094230651855,-10.918465614318848,-10.916540145874023,-10.923080444335938,-10.915410995483398,-10.918619155883789,-10.914129257202148,-10.91533088684082,-10.914493560791016,-10.914597511291504,-10.913738250732422,-10.9141206741333,-10.911603927612305,-10.912571907043457,-10.913691520690918,-10.911215782165527,-10.911418914794922,-10.911632537841797,-10.910221099853516,-10.914323806762695,-10.915497779846191,-10.914196014404297,-10.91478443145752,-10.912726402282715,-10.914677619934082,-10.912869453430176,-10.91870403289795,-10.917850494384766,-10.917384147644043,-10.918461799621582,-10.917298316955566,-10.917318344116211,-10.916546821594238,-10.915865898132324,-10.915475845336914,-10.914270401000977,-10.914203643798828,-10.914008140563965,-10.913734436035156,-10.913061141967773,-10.914010047912598,-10.914196968078613],"y":[23.704133987426758,23.727807998657227,23.711910247802734,23.686880111694336,23.81545066833496,23.603086471557617,23.74428367614746,23.695268630981445,23.477516174316406,23.693546295166016,23.808517456054688,23.615827560424805,23.531118392944336,23.76523780822754,23.763038635253906,23.686901092529297,23.665977478027344,23.485021591186523,23.74430274963379,23.548316955566406,23.849580764770508,23.814361572265625,23.697275161743164,23.502090454101562,23.67522430419922,23.82680320739746,23.518890380859375,23.674251556396484,23.71806526184082,23.666255950927734,23.80019760131836,23.713516235351562,23.723575592041016,23.673988342285156,23.725610733032227,23.71385955810547,23.623329162597656,23.640830993652344,23.64327621459961,23.69329071044922,23.484176635742188,23.696630477905273,23.634925842285156,23.56947135925293,23.529407501220703,23.718402862548828,23.56047248840332,23.835773468017578,23.548297882080078,23.775375366210938,23.686800003051758,23.705951690673828,23.583650588989258,23.685243606567383,23.648691177368164,23.638967514038086,23.555696487426758,23.649066925048828,23.609025955200195,23.695873260498047,23.66071891784668,23.777570724487305,23.551666259765625,23.51247215270996,23.72699737548828,23.648494720458984,23.66547203063965,23.699966430664062,23.713926315307617,23.584604263305664,23.606164932250977,23.642786026000977,23.67349624633789,23.68379783630371,23.725114822387695,23.67884635925293,23.65496826171875,23.621854782104492,23.694414138793945,23.660152435302734,23.60877227783203,23.620452880859375,23.639141082763672,23.566360473632812,23.68219757080078,23.65029525756836,23.66083335876465,23.67506980895996,23.583532333374023,23.60960578918457,23.60538101196289,23.604963302612305,23.6373233795166,23.61225128173828,23.634674072265625,23.673015594482422,23.659574508666992,23.56182861328125,23.696218490600586,23.65423011779785,23.677268981933594,23.627763748168945,23.681612014770508,23.623092651367188,23.61949348449707,23.596506118774414,23.63353729248047,23.6665096282959,23.622474670410156,23.60047149658203,23.556081771850586,23.665788650512695,23.646207809448242,23.64892578125,23.660823822021484,23.658233642578125,23.60284423828125,23.56881332397461,23.612987518310547,23.656558990478516,23.648277282714844,23.656431198120117,23.603368759155273,23.656009674072266,23.619020462036133,23.63419532775879,23.632793426513672,23.616243362426758,23.63670539855957,23.610553741455078,23.647342681884766,23.65839385986328,23.64065933227539,23.633106231689453,23.655363082885742,23.650419235229492,23.66036605834961,23.644493103027344,23.63374900817871,23.664024353027344,23.653793334960938,23.678136825561523,23.645923614501953,23.650653839111328,23.645462036132812,23.633556365966797,23.63623809814453,23.628660202026367,23.643718719482422,23.638004302978516,23.633441925048828,23.634353637695312,23.62718963623047,23.60993194580078,23.632326126098633,23.63465690612793,23.61564064025879,23.639678955078125,23.617359161376953,23.60686683654785,23.599712371826172,23.635602951049805,23.639497756958008,23.616403579711914,23.616254806518555,23.628999710083008,23.634706497192383,23.618412017822266,23.621118545532227,23.614023208618164,23.603116989135742,23.631061553955078,23.620738983154297,23.632652282714844,23.60379409790039,23.62843132019043,23.62664222717285,23.62215805053711,23.62415885925293,23.623218536376953,23.625659942626953,23.61351203918457,23.612640380859375,23.623374938964844,23.63149070739746,23.62309455871582,23.62285614013672,23.624340057373047,23.627239227294922,23.622928619384766,23.630773544311523,23.629091262817383,23.62459945678711,23.63324737548828,23.634218215942383,23.62590980529785,23.61924934387207,23.634986877441406,23.625030517578125,23.641511917114258,23.627891540527344,23.633499145507812,23.644489288330078,23.64914894104004,23.65262794494629,23.646652221679688,23.645584106445312,23.650135040283203,23.64771270751953,23.64654541015625,23.645933151245117,23.636545181274414,23.649564743041992,23.653324127197266,23.651655197143555,23.645334243774414,23.644643783569336,23.64773178100586,23.645254135131836,23.644725799560547,23.64677619934082,23.650102615356445,23.650165557861328,23.646543502807617,23.649330139160156,23.646007537841797,23.65007781982422,23.65155601501465,23.64999008178711,23.650556564331055,23.650545120239258,23.652450561523438,23.651159286499023,23.653989791870117,23.6483154296875,23.646860122680664,23.647735595703125,23.644699096679688,23.64777183532715,23.64653205871582,23.648326873779297,23.647499084472656,23.648019790649414,23.64920425415039,23.647756576538086,23.6469783782959,23.647619247436523,23.646726608276367,23.645732879638672,23.646413803100586],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-27.121740341186523,-27.7940616607666,-27.926332473754883,-27.877378463745117,-27.80381202697754,-27.900358200073242,-27.74112892150879,-27.675607681274414,-28.02496337890625,-27.68984603881836,-27.836658477783203,-27.80040740966797,-27.87727165222168,-27.912961959838867,-27.790611267089844,-27.78137969970703,-27.86292839050293,-27.860013961791992,-27.825489044189453,-27.909337997436523,-27.985645294189453,-27.869184494018555,-27.720945358276367,-27.857345581054688,-27.82379913330078,-27.885194778442383,-27.948627471923828,-28.040834426879883,-27.852970123291016,-27.83962059020996,-27.87997817993164,-27.767486572265625,-28.013935089111328,-27.59639549255371,-27.986228942871094,-27.750167846679688,-27.7850284576416,-27.884761810302734,-27.983217239379883,-27.787982940673828,-27.746353149414062,-27.941864013671875,-27.974409103393555,-27.763582229614258,-27.61732292175293,-27.980077743530273,-27.947114944458008,-27.931350708007812,-27.85620880126953,-27.830312728881836,-27.80750274658203,-28.045146942138672,-27.8939208984375,-27.99127197265625,-27.867568969726562,-27.77898406982422,-27.964397430419922,-26.253707885742188,-27.858760833740234,-27.88446807861328,-27.885528564453125,-27.880638122558594,-27.865577697753906,-27.893484115600586,-27.907562255859375,-27.94148063659668,-27.91914176940918,-27.937339782714844,-27.87533950805664,-27.918581008911133,-27.884235382080078,-27.796594619750977,-27.94637680053711,-27.970035552978516,-27.841449737548828,-27.771011352539062,-27.99979019165039,-27.432981491088867,-27.76600456237793,-27.890485763549805,-27.706485748291016,-27.93830108642578,-27.877750396728516,-27.889278411865234,-27.931230545043945,-27.916101455688477,-27.928688049316406,-27.841062545776367,-27.853919982910156,-27.88536834716797,-27.891525268554688,-27.9206600189209,-27.86109161376953,-27.872821807861328,-27.86259651184082,-27.867801666259766,-27.887104034423828,-27.54151153564453,-27.829259872436523,-27.89642333984375,-27.897809982299805,-27.863319396972656,-27.836177825927734,-27.84296226501465,-27.847408294677734,-27.94420623779297,-27.869400024414062,-27.863515853881836,-27.844524383544922,-27.890043258666992,-27.8080997467041,-27.877342224121094,-27.8177433013916,-27.898847579956055,-27.874229431152344,-27.819299697875977,-27.86570930480957,-27.86001968383789,-27.386959075927734,-27.87258529663086,-27.791015625,-27.849824905395508,-26.011016845703125,-27.823606491088867,-27.543275833129883,-27.824750900268555,-27.729949951171875,-27.860300064086914,-27.80906867980957,-27.86506462097168,-27.8050479888916,-27.85593032836914,-27.839725494384766,-27.831172943115234,-27.463024139404297,-27.831249237060547,-27.843242645263672,-27.84969711303711,-27.82394790649414,-27.85845947265625,-27.7941951751709,-27.850990295410156,-27.883895874023438,-27.845550537109375,-27.824769973754883,-27.849477767944336,-27.819726943969727,-27.82317352294922,-27.817468643188477,-19.234106063842773,-27.850971221923828,-27.743444442749023,-27.830120086669922,-27.831140518188477,-27.807527542114258,-27.862075805664062,-27.82941246032715,-27.798593521118164,-27.807767868041992,-27.802059173583984,-27.815034866333008,-27.810264587402344,-27.811614990234375,-27.81334686279297,-27.780214309692383,-27.68965721130371,-27.827722549438477,-27.778932571411133,-27.79036521911621,-27.80463409423828,-27.768220901489258,-27.820154190063477,-27.823766708374023,-27.798484802246094,-27.802242279052734,-27.815793991088867,-27.81661605834961,-27.8070068359375,-27.81254005432129,-27.7956485748291,-27.80472755432129,-27.82979965209961,-27.784563064575195,-27.696775436401367,-27.822256088256836,-27.819833755493164,-27.75849723815918,-27.819868087768555,-27.824451446533203,-27.802349090576172,-26.971513748168945,-27.81282615661621,-27.818830490112305,-27.8083438873291,-27.81587028503418,-27.74711799621582,-27.824132919311523,-27.82675552368164,-27.816762924194336,-27.8276424407959,-27.819049835205078,-27.82278060913086,-27.82703399658203,-27.824623107910156,-27.8123836517334,-27.819583892822266,-27.823524475097656,-27.825319290161133,-27.814468383789062,-27.820344924926758,-27.748403549194336,-27.823471069335938,-27.823244094848633,-27.81905746459961,-27.816665649414062,-27.819116592407227,-27.81915855407715,-27.819002151489258,-27.810611724853516,-27.81687355041504,-27.816823959350586,-27.78236198425293,-27.821319580078125,-27.815284729003906,-27.820295333862305,-27.822111129760742,-27.819210052490234,-27.820459365844727,-27.821725845336914,-27.82065200805664,-27.818620681762695,-27.82562255859375,-27.81999397277832,-27.819101333618164,-27.813674926757812,-27.816997528076172,-27.816844940185547,-27.817012786865234,-27.815025329589844,-27.81936264038086,-27.815746307373047,-27.820064544677734,-27.817821502685547,-27.816221237182617,-27.814022064208984,-27.81595802307129,-27.814546585083008,-27.814807891845703,-27.81420135498047,-27.81184196472168],"y":[-26.624902725219727,-26.653972625732422,-26.752031326293945,-26.531803131103516,-26.646867752075195,-26.667213439941406,-26.57859992980957,-26.646347045898438,-26.82862091064453,-26.63131332397461,-26.620758056640625,-26.72325325012207,-26.732463836669922,-26.672082901000977,-26.735624313354492,-26.636014938354492,-26.5733699798584,-26.69277572631836,-26.537132263183594,-26.621143341064453,-26.692289352416992,-26.589027404785156,-26.65351676940918,-26.562707901000977,-26.647953033447266,-26.62038803100586,-26.58233070373535,-26.522876739501953,-26.628263473510742,-26.611572265625,-26.58401107788086,-26.630218505859375,-26.685840606689453,-26.706144332885742,-26.566469192504883,-26.644216537475586,-26.563343048095703,-26.68208122253418,-26.613780975341797,-26.64250946044922,-26.684581756591797,-26.603532791137695,-26.614370346069336,-26.692047119140625,-26.625301361083984,-26.662412643432617,-26.579126358032227,-26.5766658782959,-26.699913024902344,-26.61623764038086,-26.65776252746582,-26.65668487548828,-26.63261604309082,-26.615375518798828,-26.612430572509766,-26.641738891601562,-26.630788803100586,-26.86298942565918,-26.609451293945312,-26.614768981933594,-26.618694305419922,-26.64169692993164,-26.584606170654297,-26.63140296936035,-26.664060592651367,-26.58462142944336,-26.633642196655273,-26.597122192382812,-26.64764976501465,-26.600221633911133,-26.611696243286133,-26.644561767578125,-26.61098289489746,-26.566341400146484,-26.672645568847656,-26.63642120361328,-26.622398376464844,-26.66290855407715,-26.61952018737793,-26.61235809326172,-26.66241455078125,-26.629741668701172,-26.670425415039062,-26.626384735107422,-26.577682495117188,-26.59349822998047,-26.650924682617188,-26.609939575195312,-26.59600257873535,-26.646272659301758,-26.615694046020508,-26.610736846923828,-26.607627868652344,-26.636871337890625,-26.65034294128418,-26.629234313964844,-26.607711791992188,-26.6842098236084,-26.62898063659668,-26.63385772705078,-26.647871017456055,-26.61868667602539,-26.638134002685547,-26.631175994873047,-26.65282440185547,-26.638412475585938,-26.648305892944336,-26.62530517578125,-26.65362548828125,-26.68321418762207,-26.632522583007812,-26.62395668029785,-26.684200286865234,-26.646032333374023,-26.67022705078125,-26.644540786743164,-26.64610481262207,-26.662052154541016,-26.74457550048828,-26.66387367248535,-26.643081665039062,-26.62726593017578,-26.96853256225586,-26.643537521362305,-26.69352149963379,-26.637971878051758,-26.66183853149414,-26.657377243041992,-26.643640518188477,-26.652538299560547,-26.661357879638672,-26.643329620361328,-26.650047302246094,-26.626523971557617,-26.706745147705078,-26.639036178588867,-26.633180618286133,-26.641490936279297,-26.62382698059082,-26.630168914794922,-26.64229393005371,-26.629989624023438,-26.68561363220215,-26.645038604736328,-26.633127212524414,-26.62911033630371,-26.635072708129883,-26.643712997436523,-26.636459350585938,-28.0687313079834,-26.624635696411133,-26.644739151000977,-26.63195037841797,-26.626808166503906,-26.637367248535156,-26.62196159362793,-26.62898063659668,-26.649269104003906,-26.63929557800293,-26.642765045166016,-26.6359806060791,-26.635103225708008,-26.63600730895996,-26.629249572753906,-26.642160415649414,-26.65702247619629,-26.624040603637695,-26.636497497558594,-26.63823699951172,-26.647968292236328,-26.64569091796875,-26.64065170288086,-26.646257400512695,-26.64288330078125,-26.637094497680664,-26.634750366210938,-26.637449264526367,-26.635515213012695,-26.633953094482422,-26.631031036376953,-26.63840103149414,-26.63597297668457,-26.64855194091797,-26.663053512573242,-26.638137817382812,-26.632671356201172,-26.653457641601562,-26.640586853027344,-26.641847610473633,-26.651090621948242,-26.783546447753906,-26.642913818359375,-26.64128303527832,-26.644187927246094,-26.644277572631836,-26.655288696289062,-26.64269256591797,-26.64309310913086,-26.648645401000977,-26.648021697998047,-26.648563385009766,-26.646150588989258,-26.647626876831055,-26.64940643310547,-26.65141487121582,-26.650991439819336,-26.652193069458008,-26.65130043029785,-26.651123046875,-26.65074920654297,-26.662508010864258,-26.65294075012207,-26.6496639251709,-26.65096664428711,-26.649951934814453,-26.650136947631836,-26.653095245361328,-26.651153564453125,-26.651830673217773,-26.651086807250977,-26.650001525878906,-26.655296325683594,-26.65154457092285,-26.653499603271484,-26.653045654296875,-26.652862548828125,-26.6531925201416,-26.652931213378906,-26.651710510253906,-26.652990341186523,-26.652725219726562,-26.650634765625,-26.650728225708008,-26.647069931030273,-26.64754867553711,-26.646270751953125,-26.644800186157227,-26.646146774291992,-26.64593505859375,-26.645185470581055,-26.644437789916992,-26.644981384277344,-26.645116806030273,-26.64663314819336,-26.646921157836914,-26.644620895385742,-26.64408302307129,-26.64350128173828,-26.643436431884766,-26.64390754699707],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[20.862268447875977,20.67643165588379,20.768146514892578,20.757463455200195,20.804039001464844,20.75489616394043,20.52499008178711,20.927310943603516,20.804332733154297,20.749492645263672,20.570249557495117,20.866426467895508,20.809303283691406,20.886940002441406,20.763473510742188,20.78761100769043,20.818981170654297,20.861438751220703,20.76058006286621,20.821208953857422,20.79265594482422,20.765857696533203,20.74211311340332,20.713716506958008,20.77094268798828,20.830989837646484,20.867332458496094,20.87792205810547,20.866159439086914,20.77454948425293,20.860801696777344,20.59355354309082,20.82710075378418,20.77147674560547,20.80241584777832,20.79477310180664,20.760337829589844,20.797115325927734,20.755084991455078,20.810245513916016,20.833477020263672,20.903091430664062,20.769216537475586,20.830631256103516,20.79003143310547,20.768522262573242,20.797916412353516,20.826833724975586,20.813207626342773,20.829524993896484,20.769207000732422,20.811277389526367,20.829975128173828,20.74356460571289,20.838756561279297,20.802690505981445,20.713048934936523,20.72159194946289,20.766603469848633,20.79096221923828,20.782251358032227,20.74018096923828,20.762237548828125,20.783273696899414,20.78508949279785,20.77967643737793,20.77524757385254,20.7628231048584,20.756805419921875,20.69606590270996,20.731252670288086,20.754535675048828,20.766542434692383,20.794755935668945,20.792251586914062,20.781293869018555,20.78203582763672,20.786930084228516,20.781452178955078,20.775863647460938,20.786043167114258,20.783872604370117,20.848859786987305,20.787900924682617,20.791244506835938,20.757688522338867,20.76320457458496,20.77053451538086,20.763097763061523,20.772397994995117,20.770648956298828,20.776166915893555,20.76974868774414,20.71999740600586,20.789363861083984,20.767698287963867,20.771303176879883,20.7794246673584,20.769115447998047,20.760793685913086,20.640300750732422,20.757606506347656,20.739486694335938,20.74778938293457,20.75440788269043,20.75834083557129,20.7320613861084,20.755367279052734,20.768390655517578,20.74236297607422,20.760236740112305,20.763736724853516,20.73014259338379,20.759723663330078,20.753780364990234,20.753568649291992,20.78373146057129,20.77349281311035,20.767648696899414,20.770320892333984,20.764848709106445,20.77785301208496,20.739501953125,20.75677490234375,20.756418228149414,20.776262283325195,20.78217315673828,20.747329711914062,20.762311935424805,20.729080200195312,20.783096313476562,20.759239196777344,20.755786895751953,20.767724990844727,20.753984451293945,20.753646850585938,20.764955520629883,20.76961898803711,20.778526306152344,20.785799026489258,20.78719711303711,20.784194946289062,20.773231506347656,20.77475357055664,20.771799087524414,20.789688110351562,20.775964736938477,20.7768611907959,20.784936904907227,20.773347854614258,20.773496627807617,20.765514373779297,20.783592224121094,20.77862548828125,20.764219284057617,20.77235221862793,20.786184310913086,20.784353256225586,20.782318115234375,20.782142639160156,20.777435302734375,20.780302047729492,20.781352996826172,20.778728485107422,20.789974212646484,20.779197692871094,20.786842346191406,20.76960563659668,20.774991989135742,20.76948356628418,20.77821159362793,20.780458450317383,20.781686782836914,20.778921127319336,20.782333374023438,20.773509979248047,20.77395248413086,20.773242950439453,20.778846740722656,20.775609970092773,20.778358459472656,20.775476455688477,20.77579116821289,20.781930923461914,20.777524948120117,20.7811279296875,20.779876708984375,20.77957534790039,20.78139305114746,20.782085418701172,20.780941009521484,20.781068801879883,20.783666610717773,20.782684326171875,20.782711029052734,20.780900955200195,20.778854370117188,20.779884338378906,20.780214309692383,20.778900146484375,20.777944564819336,20.778730392456055,20.779329299926758,20.778690338134766,20.777870178222656,20.778902053833008,20.778377532958984,20.780128479003906,20.780338287353516,20.780874252319336,20.7828426361084,20.78348731994629,20.78172492980957,20.781387329101562,20.78324317932129,20.77867889404297,20.779909133911133,20.779457092285156,20.779544830322266,20.778608322143555,20.77706527709961,20.777503967285156,20.77741050720215,20.77813720703125,20.776235580444336,20.778182983398438,20.77779197692871,20.777084350585938,20.776531219482422,20.776935577392578,20.7761173248291,20.778072357177734,20.7767333984375,20.777666091918945,20.775930404663086,20.775991439819336,20.77573585510254,20.776514053344727,20.77659034729004,20.777484893798828,20.778051376342773,20.778507232666016,20.777477264404297,20.777873992919922,20.77778434753418,20.77809715270996,20.77801513671875,20.77640724182129,20.776243209838867,20.77678108215332],"y":[17.298786163330078,17.34078598022461,17.341182708740234,17.322776794433594,17.37188148498535,17.420164108276367,17.412647247314453,17.275178909301758,17.35679817199707,17.32478904724121,17.388757705688477,17.321435928344727,17.321868896484375,17.29276466369629,17.34823989868164,17.35187339782715,17.329917907714844,17.31451416015625,17.337383270263672,17.31818962097168,17.278249740600586,17.321134567260742,17.29203224182129,17.355884552001953,17.34415054321289,17.337385177612305,17.3205623626709,17.301359176635742,17.328767776489258,17.329364776611328,17.296497344970703,17.377849578857422,17.336376190185547,17.327465057373047,17.361770629882812,17.339767456054688,17.367780685424805,17.330181121826172,17.357677459716797,17.325660705566406,17.321731567382812,17.314212799072266,17.344661712646484,17.31706428527832,17.363176345825195,17.346342086791992,17.319061279296875,17.329036712646484,17.3343448638916,17.35304832458496,17.335865020751953,17.323427200317383,17.321636199951172,17.349578857421875,17.34374237060547,17.327524185180664,17.342063903808594,17.332454681396484,17.329530715942383,17.329788208007812,17.352283477783203,17.348785400390625,17.32187271118164,17.320655822753906,17.324081420898438,17.33312225341797,17.333139419555664,17.320663452148438,17.320669174194336,17.33489990234375,17.337284088134766,17.343473434448242,17.328289031982422,17.316713333129883,17.322866439819336,17.329532623291016,17.324094772338867,17.29465675354004,17.332393646240234,17.337862014770508,17.3299617767334,17.31757926940918,17.33885383605957,17.324493408203125,17.31655502319336,17.335683822631836,17.331199645996094,17.327579498291016,17.3353328704834,17.3243408203125,17.33698844909668,17.329660415649414,17.339712142944336,17.365297317504883,17.330894470214844,17.330223083496094,17.329713821411133,17.331298828125,17.330604553222656,17.333621978759766,17.360641479492188,17.334917068481445,17.331050872802734,17.33734893798828,17.349990844726562,17.352128982543945,17.359651565551758,17.343292236328125,17.3336181640625,17.350013732910156,17.331253051757812,17.331483840942383,17.338438034057617,17.333349227905273,17.33230209350586,17.331329345703125,17.32407569885254,17.32538414001465,17.32453727722168,17.324359893798828,17.32307243347168,17.319686889648438,17.344968795776367,17.324460983276367,17.31960105895996,17.311491012573242,17.31817626953125,17.32756805419922,17.32750129699707,17.334611892700195,17.319332122802734,17.339941024780273,17.339771270751953,17.332530975341797,17.330198287963867,17.33750343322754,17.337112426757812,17.33246421813965,17.329160690307617,17.326435089111328,17.326370239257812,17.328105926513672,17.331201553344727,17.330778121948242,17.33011245727539,17.32183265686035,17.328323364257812,17.331090927124023,17.327768325805664,17.327720642089844,17.33087730407715,17.333683013916016,17.32672691345215,17.329313278198242,17.337228775024414,17.331697463989258,17.334592819213867,17.334157943725586,17.334716796875,17.33684539794922,17.339693069458008,17.337085723876953,17.339984893798828,17.340356826782227,17.3393611907959,17.338565826416016,17.339235305786133,17.340791702270508,17.33420753479004,17.338958740234375,17.333288192749023,17.33308982849121,17.333993911743164,17.3315486907959,17.333044052124023,17.332590103149414,17.333354949951172,17.335657119750977,17.333019256591797,17.33150291442871,17.328067779541016,17.328609466552734,17.32657241821289,17.327428817749023,17.32906723022461,17.327739715576172,17.32718849182129,17.328630447387695,17.325908660888672,17.328903198242188,17.322124481201172,17.329059600830078,17.32925033569336,17.330638885498047,17.32942008972168,17.329608917236328,17.330482482910156,17.331039428710938,17.33069610595703,17.330833435058594,17.330415725708008,17.332504272460938,17.332866668701172,17.333280563354492,17.334386825561523,17.33422088623047,17.33285140991211,17.33367919921875,17.33441925048828,17.332382202148438,17.333206176757812,17.333782196044922,17.334814071655273,17.333980560302734,17.336624145507812,17.336429595947266,17.335922241210938,17.33432388305664,17.332141876220703,17.33216667175293,17.329578399658203,17.328197479248047,17.32778549194336,17.327865600585938,17.327457427978516,17.32695198059082,17.326976776123047,17.32738494873047,17.32673454284668,17.326642990112305,17.32710838317871,17.326740264892578,17.327571868896484,17.32756805419922,17.32908821105957,17.328781127929688,17.33081817626953,17.331863403320312,17.331356048583984,17.33148956298828,17.331546783447266,17.3317813873291,17.33148193359375,17.331745147705078,17.331890106201172,17.33165740966797,17.33188819885254,17.332138061523438,17.332183837890625,17.3330020904541],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-33.82134246826172,-33.762962341308594,-33.76920700073242,-33.902706146240234,-33.77445983886719,-33.77067947387695,-33.72332763671875,-33.82956314086914,-33.824920654296875,-33.713443756103516,-33.763099670410156,-33.79874038696289,-33.82913589477539,-33.687870025634766,-33.79254150390625,-33.7788200378418,-33.738224029541016,-33.78456497192383,-33.821372985839844,-33.92734909057617,-33.76472854614258,-33.83338928222656,-33.761634826660156,-33.72261428833008,-33.75879669189453,-33.80445861816406,-33.884498596191406,-33.84906768798828,-33.81082534790039,-33.792728424072266,-33.73199462890625,-33.76768112182617,-33.827781677246094,-33.823204040527344,-33.73041915893555,-33.793190002441406,-33.88465881347656,-33.68421173095703,-33.706302642822266,-33.81092071533203,-33.8364143371582,-33.79865264892578,-33.84650421142578,-33.81271743774414,-33.76901626586914,-33.7269172668457,-33.69454574584961,-33.86574172973633,-33.754615783691406,-33.828529357910156,-33.798828125,-33.77808380126953,-33.71041488647461,-33.762638092041016,-33.78425979614258,-33.78927230834961,-33.77204895019531,-33.725093841552734,-33.78227996826172,-33.66569900512695,-33.78305435180664,-33.81294250488281,-33.717594146728516,-33.78919982910156,-33.80710983276367,-33.822872161865234,-33.693634033203125,-33.805091857910156,-33.76631164550781,-33.769710540771484,-33.799991607666016,-33.76988220214844,-33.782737731933594,-33.83958435058594,-33.786231994628906,-33.782527923583984,-33.77230453491211,-33.80034255981445,-33.7738151550293,-33.74232864379883,-33.706661224365234,-33.77649688720703,-33.77742385864258,-33.834312438964844,-33.7840576171875,-33.804866790771484,-33.782588958740234,-33.80049133300781,-33.77732849121094,-33.78433609008789,-33.74949645996094,-33.82422637939453,-33.75798034667969,-33.791141510009766,-33.77880096435547,-33.790706634521484,-33.794593811035156,-33.77281188964844,-33.7882080078125,-33.78593826293945,-33.787174224853516,-33.7950325012207,-33.80268859863281,-33.7896842956543,-33.791622161865234,-33.82593536376953,-33.80868911743164,-33.8167724609375,-33.802711486816406,-33.79268264770508,-33.80694580078125,-33.812889099121094,-33.820499420166016,-33.815452575683594,-33.80833053588867,-33.80862808227539,-33.81017303466797,-33.82990646362305,-33.79826736450195,-33.807674407958984,-33.82850646972656,-33.823883056640625,-33.826908111572266,-33.812232971191406,-33.84031677246094,-33.83428192138672,-33.83220672607422,-33.83961868286133,-33.810791015625,-33.83125305175781,-33.82099533081055,-33.80922317504883,-33.82044219970703,-33.82368087768555,-33.83539962768555,-33.82463073730469,-33.81069564819336,-33.81766128540039,-33.81224822998047,-33.81062698364258,-33.818809509277344,-33.80289077758789,-33.80512237548828,-33.820045471191406,-33.81127166748047,-33.81698989868164,-33.80250930786133,-33.81324005126953,-33.815330505371094,-33.808250427246094,-33.81103515625,-33.80597686767578,-33.797969818115234,-33.80955123901367,-33.80145263671875,-33.801334381103516,-33.8108024597168,-33.80282974243164,-33.81237030029297,-33.824195861816406,-33.7983512878418,-33.78877639770508,-33.79124450683594,-33.803985595703125,-33.798221588134766,-33.80813217163086,-33.8028564453125,-33.79548263549805,-33.808712005615234,-33.814544677734375,-33.803836822509766,-33.80165100097656,-33.82490921020508,-33.80031967163086,-33.80024337768555,-33.80589294433594,-33.80147171020508,-33.81245040893555,-33.800838470458984,-33.8029899597168,-33.79750061035156,-33.786869049072266,-33.80696105957031,-33.79616928100586,-33.79914855957031,-33.79753112792969,-33.799564361572266,-33.801513671875,-33.801231384277344,-33.79903793334961,-33.79401397705078,-33.793365478515625,-33.790828704833984,-33.790958404541016,-33.790916442871094,-33.78727722167969,-33.789791107177734,-33.794944763183594,-33.7953987121582,-33.789466857910156,-33.79436111450195,-33.78887176513672,-33.79124069213867,-33.790931701660156,-33.78826141357422,-33.792362213134766,-33.79233932495117,-33.790435791015625,-33.79094696044922,-33.790897369384766,-33.791419982910156,-33.78963088989258,-33.7956428527832,-33.796714782714844,-33.79530715942383,-33.79627990722656,-33.79532241821289,-33.79487228393555,-33.79249572753906,-33.79484176635742,-33.79184341430664,-33.79570770263672,-33.795169830322266,-33.79275894165039,-33.78767776489258,-33.78759765625,-33.7877311706543,-33.7823371887207,-33.79081344604492,-33.78981399536133,-33.792381286621094,-33.790557861328125,-33.7906608581543,-33.78935241699219,-33.7886848449707,-33.78554153442383,-33.78762435913086,-33.791236877441406,-33.7906379699707,-33.78950500488281,-33.78828048706055,-33.79098892211914,-33.79074478149414,-33.790958404541016,-33.791473388671875,-33.79203796386719,-33.792301177978516,-33.790931701660156,-33.79319381713867,-33.79375457763672],"y":[-1.4111272096633911,-1.422334909439087,-1.525552749633789,-1.3609853982925415,-1.378060221672058,-1.412254810333252,-1.3903759717941284,-1.450634241104126,-1.379872441291809,-1.478983759880066,-1.372240424156189,-1.4213835000991821,-1.439751386642456,-1.3822171688079834,-1.501979947090149,-1.4235621690750122,-1.3677488565444946,-1.4045720100402832,-1.4231599569320679,-1.376940131187439,-1.4285192489624023,-1.3568302392959595,-1.4613622426986694,-1.412363052368164,-1.4545021057128906,-1.3607776165008545,-1.3636764287948608,-1.3792040348052979,-1.4588218927383423,-1.4402391910552979,-1.4446661472320557,-1.3810452222824097,-1.3752720355987549,-1.428488850593567,-1.4779889583587646,-1.4229881763458252,-1.4216455221176147,-1.4237982034683228,-1.423421859741211,-1.4939881563186646,-1.4128320217132568,-1.4242867231369019,-1.4896436929702759,-1.415773630142212,-1.4967328310012817,-1.4115252494812012,-1.4989761114120483,-1.4015438556671143,-1.3826144933700562,-1.4168275594711304,-1.4522192478179932,-1.5209134817123413,-1.519702672958374,-1.420263409614563,-1.4729238748550415,-1.4559239149093628,-1.4089730978012085,-1.4591069221496582,-1.4309017658233643,-1.406761646270752,-1.4967975616455078,-1.3962727785110474,-1.4146634340286255,-1.4369169473648071,-1.4276143312454224,-1.4614812135696411,-1.6151872873306274,-1.4384994506835938,-1.449576497077942,-1.4058077335357666,-1.4369592666625977,-1.4606196880340576,-1.4599601030349731,-1.4492056369781494,-1.424697995185852,-1.4882924556732178,-1.431803822517395,-1.4658669233322144,-1.5061728954315186,-1.462964653968811,-1.432373046875,-1.4896963834762573,-1.4459384679794312,-1.4315454959869385,-1.454558253288269,-1.4604369401931763,-1.4639889001846313,-1.4537166357040405,-1.452041745185852,-1.4768192768096924,-1.45573890209198,-1.474829077720642,-1.544673204421997,-1.4574801921844482,-1.4366008043289185,-1.451729655265808,-1.450602650642395,-1.4510552883148193,-1.4532703161239624,-1.4592275619506836,-1.4376609325408936,-1.414021611213684,-1.4561504125595093,-1.4314019680023193,-1.4318671226501465,-1.4436182975769043,-1.4398345947265625,-1.4455914497375488,-1.4444681406021118,-1.4451364278793335,-1.4711487293243408,-1.4667516946792603,-1.4565988779067993,-1.4440501928329468,-1.4461811780929565,-1.4765902757644653,-1.4675335884094238,-1.4563846588134766,-1.4602566957473755,-1.4545818567276,-1.457306981086731,-1.483434796333313,-1.4913002252578735,-1.4647074937820435,-1.4746733903884888,-1.4693365097045898,-1.4599450826644897,-1.4655834436416626,-1.4691321849822998,-1.4749164581298828,-1.4644358158111572,-1.4695134162902832,-1.4639579057693481,-1.468941569328308,-1.4731358289718628,-1.4658384323120117,-1.4717389345169067,-1.4675712585449219,-1.4697790145874023,-1.4686280488967896,-1.4722890853881836,-1.5055290460586548,-1.480472445487976,-1.4532718658447266,-1.475876808166504,-1.4648109674453735,-1.4556808471679688,-1.4760065078735352,-1.4716699123382568,-1.4752285480499268,-1.4691022634506226,-1.4859638214111328,-1.477593183517456,-1.4731615781784058,-1.4717625379562378,-1.476173758506775,-1.4805668592453003,-1.4713212251663208,-1.4764325618743896,-1.4727919101715088,-1.4708462953567505,-1.4766799211502075,-1.483170747756958,-1.4712297916412354,-1.4763998985290527,-1.4747087955474854,-1.4666190147399902,-1.5038155317306519,-1.4673165082931519,-1.4747148752212524,-1.4808096885681152,-1.488200306892395,-1.4788371324539185,-1.4825568199157715,-1.487902283668518,-1.48772394657135,-1.4792671203613281,-1.4761196374893188,-1.4786232709884644,-1.4787861108779907,-1.4780843257904053,-1.509665608406067,-1.4764149188995361,-1.4765311479568481,-1.4757933616638184,-1.472970962524414,-1.4735075235366821,-1.4744590520858765,-1.4758676290512085,-1.4755136966705322,-1.4772624969482422,-1.475313663482666,-1.4723929166793823,-1.4745864868164062,-1.4775718450546265,-1.4737374782562256,-1.474542498588562,-1.4712564945220947,-1.471720576286316,-1.480043649673462,-1.4729341268539429,-1.473745584487915,-1.47162926197052,-1.4744865894317627,-1.4761446714401245,-1.4672949314117432,-1.4670283794403076,-1.4672768115997314,-1.4686498641967773,-1.4665082693099976,-1.4647202491760254,-1.4688113927841187,-1.4686293601989746,-1.4695475101470947,-1.469788670539856,-1.4710043668746948,-1.4710925817489624,-1.470656156539917,-1.4744000434875488,-1.4683209657669067,-1.470518708229065,-1.4712210893630981,-1.4715300798416138,-1.4761008024215698,-1.4678846597671509,-1.469972848892212,-1.4717634916305542,-1.4889549016952515,-1.464901089668274,-1.4652000665664673,-1.4650824069976807,-1.4657500982284546,-1.4649156332015991,-1.4648067951202393,-1.4641835689544678,-1.4655901193618774,-1.459633231163025,-1.4582040309906006,-1.4566532373428345,-1.4566599130630493,-1.4566552639007568,-1.4574627876281738,-1.4569759368896484,-1.4563764333724976,-1.4567694664001465,-1.457897424697876,-1.457891583442688,-1.4579894542694092,-1.4571912288665771,-1.4571776390075684],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}]},{"data":[{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-17.674379348754883,-17.67626953125,-17.676097869873047,-17.6729736328125,-17.675180435180664,-17.672502517700195,-17.674102783203125,-17.674949645996094,-17.672473907470703,-17.677688598632812,-17.677337646484375,-17.676719665527344,-17.678354263305664,-17.68045997619629,-17.681337356567383,-17.681320190429688,-17.68007469177246,-17.678308486938477,-17.682022094726562,-17.68219566345215,-17.679946899414062,-17.679332733154297,-17.68338394165039,-17.681720733642578,-17.68572425842285,-17.684070587158203,-17.684017181396484,-17.683847427368164,-17.68528938293457,-17.684062957763672,-17.686988830566406,-17.689035415649414,-17.686262130737305,-17.685962677001953,-17.689409255981445,-17.689498901367188,-17.689123153686523,-17.68842124938965,-17.688386917114258,-17.689682006835938,-17.692520141601562,-17.691255569458008,-17.690397262573242,-17.69061279296875,-17.694488525390625,-17.68855857849121,-17.69232177734375,-17.693340301513672,-17.69468879699707,-17.694149017333984,-17.69406509399414,-17.69512176513672,-17.69716453552246,-17.697053909301758,-17.697879791259766,-17.6984920501709,-17.699750900268555,-17.69874382019043,-17.700849533081055,-17.698497772216797,-17.698850631713867,-17.699487686157227,-17.699331283569336,-17.70124626159668,-17.70052719116211,-17.70440673828125,-17.700775146484375,-17.701725006103516,-17.701196670532227,-17.701946258544922,-17.700721740722656,-17.702354431152344,-17.70437240600586,-17.703697204589844,-17.7048282623291,-17.706449508666992,-17.706867218017578,-17.70389175415039,-17.70542335510254,-17.70853042602539,-17.711435317993164,-17.704301834106445,-17.704235076904297,-17.705480575561523,-17.706789016723633,-17.70570182800293,-17.706161499023438,-17.708282470703125,-17.70713233947754,-17.70741081237793,-17.707500457763672,-17.710840225219727,-17.708179473876953,-17.706377029418945,-17.70804786682129,-17.708589553833008,-17.708005905151367,-17.709365844726562,-17.710771560668945,-17.709928512573242,-17.71035385131836,-17.71144676208496,-17.711959838867188,-17.71219825744629,-17.712142944335938,-17.71356773376465,-17.714040756225586,-17.714780807495117,-17.71752166748047,-17.714813232421875,-17.71453857421875,-17.714237213134766,-17.715351104736328,-17.71572494506836,-17.71596336364746,-17.717079162597656,-17.716445922851562,-17.717342376708984,-17.71767807006836,-17.71834373474121,-17.718379974365234,-17.720121383666992,-17.71895980834961,-17.718103408813477,-17.754169464111328,-17.7287540435791,-17.711971282958984,-17.710786819458008,-17.71127700805664,-17.71076202392578,-17.711210250854492,-17.711902618408203,-17.712507247924805,-17.7113037109375,-17.712007522583008,-17.71322250366211,-17.712297439575195,-17.71730613708496,-17.711423873901367,-17.710159301757812,-17.71133804321289,-17.711181640625,-17.711048126220703,-17.71123695373535,-17.71190071105957,-17.712081909179688,-17.712692260742188,-17.712846755981445,-17.71368980407715,-17.713623046875,-17.713485717773438,-17.714582443237305,-17.71409034729004,-17.714967727661133,-17.715599060058594,-17.714941024780273,-17.7150821685791,-17.717082977294922,-17.71455192565918,-17.715225219726562,-17.715946197509766,-17.71559715270996,-17.716264724731445,-17.715883255004883,-17.71588134765625,-17.716264724731445,-17.716772079467773,-17.71739959716797,-17.717309951782227,-17.717079162597656,-17.717605590820312,-17.721920013427734,-17.71660804748535,-17.716753005981445,-17.717309951782227,-17.717506408691406,-17.717899322509766,-17.717845916748047,-17.718170166015625,-17.718666076660156,-17.718441009521484,-17.72492218017578,-17.71656608581543,-17.71851348876953,-17.716663360595703,-17.71868896484375,-17.716238021850586,-17.715951919555664,-17.715087890625,-17.715688705444336,-17.71574592590332,-17.716386795043945,-17.71601676940918,-17.7161922454834,-17.716440200805664,-17.716707229614258,-17.716821670532227,-17.718406677246094,-17.716527938842773,-17.71686553955078,-17.722732543945312,-17.71469497680664,-17.71514892578125,-17.715282440185547,-17.71556282043457,-17.71551513671875,-17.715730667114258,-17.716266632080078,-17.71634864807129,-17.71658706665039,-17.716516494750977,-17.71659278869629,-17.717029571533203,-17.71692657470703,-17.717384338378906,-17.717689514160156,-17.719816207885742,-17.715028762817383,-17.71540641784668,-17.715415954589844,-17.715574264526367,-17.71607780456543,-17.715930938720703,-17.71613121032715,-17.716373443603516,-17.716617584228516,-17.718217849731445,-17.71627426147461,-17.716306686401367,-17.71654510498047,-17.71686553955078,-17.716989517211914,-17.717348098754883,-17.717529296875,-17.717676162719727,-17.72517204284668,-17.71517562866211,-17.7154598236084,-17.721982955932617,-17.71285057067871,-17.713008880615234,-17.713159561157227,-17.713363647460938,-17.713687896728516,-17.713518142700195,-17.713687896728516,-17.713794708251953,-17.713960647583008,-17.714035034179688,-17.714155197143555],"y":[-28.320878982543945,-28.32040786743164,-28.3206844329834,-28.32112693786621,-28.320859909057617,-28.32139015197754,-28.321584701538086,-28.321718215942383,-28.32206916809082,-28.322063446044922,-28.32210350036621,-28.322362899780273,-28.32225799560547,-28.32209014892578,-28.322078704833984,-28.322065353393555,-28.32238006591797,-28.322404861450195,-28.32207489013672,-28.321950912475586,-28.322118759155273,-28.32223892211914,-28.32193946838379,-28.322227478027344,-28.321697235107422,-28.321975708007812,-28.322025299072266,-28.32203483581543,-28.32210922241211,-28.322460174560547,-28.322032928466797,-28.321882247924805,-28.32235336303711,-28.32262420654297,-28.322477340698242,-28.322694778442383,-28.32284927368164,-28.32303237915039,-28.323379516601562,-28.32343292236328,-28.323196411132812,-28.323471069335938,-28.323917388916016,-28.324132919311523,-28.323692321777344,-28.324581146240234,-28.323856353759766,-28.3239688873291,-28.323753356933594,-28.323976516723633,-28.32433319091797,-28.32433319091797,-28.32425308227539,-28.324440002441406,-28.32464027404785,-28.324676513671875,-28.324655532836914,-28.32485580444336,-28.324657440185547,-28.32510757446289,-28.32526206970215,-28.325212478637695,-28.32538414001465,-28.325345993041992,-28.325464248657227,-28.32497787475586,-28.32554817199707,-28.325532913208008,-28.325666427612305,-28.325674057006836,-28.32602310180664,-28.32608413696289,-28.32593536376953,-28.325958251953125,-28.325843811035156,-28.32552146911621,-28.325374603271484,-28.325876235961914,-28.325674057006836,-28.325275421142578,-28.324735641479492,-28.325809478759766,-28.325902938842773,-28.32567024230957,-28.325551986694336,-28.32579803466797,-28.325716018676758,-28.325546264648438,-28.325748443603516,-28.325828552246094,-28.325721740722656,-28.32525062561035,-28.32564926147461,-28.325889587402344,-28.325620651245117,-28.32540512084961,-28.325464248657227,-28.325231552124023,-28.325008392333984,-28.325122833251953,-28.325050354003906,-28.32488441467285,-28.324811935424805,-28.32484245300293,-28.324787139892578,-28.324716567993164,-28.324687957763672,-28.324565887451172,-28.324138641357422,-28.32447052001953,-28.32447624206543,-28.32442855834961,-28.324228286743164,-28.32411003112793,-28.324071884155273,-28.323894500732422,-28.32404899597168,-28.32396125793457,-28.323854446411133,-28.32370376586914,-28.323640823364258,-28.32335090637207,-28.323284149169922,-28.323352813720703,-28.317533493041992,-28.32134246826172,-28.32379913330078,-28.32390594482422,-28.32381248474121,-28.323862075805664,-28.32381248474121,-28.32367706298828,-28.323596954345703,-28.323701858520508,-28.32357406616211,-28.32335662841797,-28.32346534729004,-28.32267189025879,-28.323467254638672,-28.323612213134766,-28.323387145996094,-28.32341957092285,-28.323415756225586,-28.323348999023438,-28.3232479095459,-28.323196411132812,-28.323089599609375,-28.323034286499023,-28.322860717773438,-28.322853088378906,-28.322826385498047,-28.3226375579834,-28.322675704956055,-28.322498321533203,-28.32234764099121,-28.322410583496094,-28.322355270385742,-28.321990966796875,-28.32232666015625,-28.322187423706055,-28.322053909301758,-28.32207679748535,-28.321945190429688,-28.321975708007812,-28.32197380065918,-28.321922302246094,-28.321863174438477,-28.321733474731445,-28.321697235107422,-28.321691513061523,-28.321550369262695,-28.32080841064453,-28.321630477905273,-28.32157325744629,-28.321489334106445,-28.32143211364746,-28.321334838867188,-28.321311950683594,-28.32124137878418,-28.32111930847168,-28.32112693786621,-28.320045471191406,-28.321271896362305,-28.320945739746094,-28.32117462158203,-28.3208065032959,-28.3211669921875,-28.321184158325195,-28.32129669189453,-28.321178436279297,-28.321157455444336,-28.321043014526367,-28.321104049682617,-28.321067810058594,-28.32103729248047,-28.321006774902344,-28.321002960205078,-28.32076644897461,-28.321102142333984,-28.321063995361328,-28.320098876953125,-28.321414947509766,-28.321348190307617,-28.321313858032227,-28.321273803710938,-28.32127571105957,-28.321243286132812,-28.321142196655273,-28.321109771728516,-28.321060180664062,-28.321062088012695,-28.3210391998291,-28.320959091186523,-28.320955276489258,-28.32086753845215,-28.320796966552734,-28.320423126220703,-28.321151733398438,-28.321069717407227,-28.321054458618164,-28.321006774902344,-28.320907592773438,-28.320913314819336,-28.320865631103516,-28.32080841064453,-28.320775985717773,-28.320512771606445,-28.320833206176758,-28.320837020874023,-28.3208065032959,-28.320762634277344,-28.32075309753418,-28.32069206237793,-28.320682525634766,-28.320680618286133,-28.319456100463867,-28.32110023498535,-28.32107925415039,-28.32002830505371,-28.321556091308594,-28.321556091308594,-28.321556091308594,-28.32154655456543,-28.321517944335938,-28.32156753540039,-28.321561813354492,-28.32156753540039,-28.321565628051758,-28.32158088684082,-28.32158660888672],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.455467224121094,18.455598831176758,18.455060958862305,18.455354690551758,18.45553207397461,18.454914093017578,18.45448112487793,18.454238891601562,18.454952239990234,18.453611373901367,18.453283309936523,18.453327178955078,18.453264236450195,18.453311920166016,18.45377540588379,18.453094482421875,18.45322608947754,18.453235626220703,18.453277587890625,18.453266143798828,18.45365333557129,18.453235626220703,18.453733444213867,18.45418357849121,18.45431137084961,18.45431137084961,18.454185485839844,18.453969955444336,18.453542709350586,18.45394515991211,18.454090118408203,18.45431900024414,18.454322814941406,18.454347610473633,18.45392417907715,18.453325271606445,18.45332908630371,18.453393936157227,18.453462600708008,18.453550338745117,18.453285217285156,18.45347023010254,18.453521728515625,18.45387840270996,18.453598022460938,18.453975677490234,18.45392608642578,18.453758239746094,18.454151153564453,18.454160690307617,18.454360961914062,18.453027725219727,18.453031539916992,18.453310012817383,18.453350067138672,18.453645706176758,18.453781127929688,18.453752517700195,18.453508377075195,18.453603744506836,18.453937530517578,18.45432472229004,18.45468521118164,18.454856872558594,18.454891204833984,18.454879760742188,18.45501136779785,18.455196380615234,18.45539665222168,18.455528259277344,18.45572853088379,18.455759048461914,18.45595359802246,18.455995559692383,18.456361770629883,18.456756591796875,18.45713996887207,18.457157135009766,18.457273483276367,18.45742416381836,18.45760726928711,18.45774269104004,18.45785140991211,18.458051681518555,18.458126068115234,18.458255767822266,18.45827293395996,18.458309173583984,18.458223342895508,18.4583740234375,18.458385467529297,18.458436965942383,18.458412170410156,18.45836067199707,18.458486557006836,18.458545684814453,18.458545684814453,18.458581924438477,18.4586124420166,18.45851707458496,18.458633422851562,18.45867156982422,18.458589553833008,18.458715438842773,18.458585739135742,18.45873260498047,18.458641052246094,18.458621978759766,18.45873260498047,18.458782196044922,18.458763122558594,18.458711624145508,18.458786010742188,18.45876121520996,18.458728790283203,18.458717346191406,18.458715438842773,18.458723068237305,18.458675384521484,18.45863914489746,18.458417892456055,18.458404541015625,18.458282470703125,18.458152770996094,18.45815086364746,18.458009719848633,18.457721710205078,18.457754135131836,18.457738876342773,18.457612991333008,18.457929611206055,18.457950592041016,18.45798683166504,18.45798110961914,18.457984924316406,18.458051681518555,18.45804786682129,18.458145141601562,18.458232879638672,18.458229064941406,18.458206176757812,18.458208084106445,18.45817756652832,18.458131790161133,18.458139419555664,18.458087921142578,18.4581356048584,18.458110809326172,18.45804786682129,18.458011627197266,18.45785140991211,18.45785140991211,18.457828521728516,18.457820892333984,18.457693099975586,18.457687377929688,18.457704544067383,18.457738876342773,18.457786560058594,18.457815170288086,18.45777130126953,18.457767486572266,18.457706451416016,18.457656860351562,18.457618713378906,18.457632064819336,18.45760726928711,18.45755958557129,18.45745277404785,18.45738983154297,18.457218170166016,18.45711326599121,18.457050323486328,18.45701026916504,18.456960678100586,18.45692253112793,18.456865310668945,18.45681381225586,18.45677947998047,18.45672607421875,18.456682205200195,18.45662498474121,18.45655632019043,18.45646095275879,18.456384658813477,18.45631980895996,18.45624542236328,18.4561824798584,18.456079483032227,18.45603370666504,18.455982208251953,18.455902099609375,18.455814361572266,18.45580291748047,18.455778121948242,18.45573616027832,18.455730438232422,18.455707550048828,18.455663681030273,18.455625534057617,18.45552635192871,18.455503463745117,18.455490112304688,18.455480575561523,18.455461502075195,18.45543098449707,18.455453872680664,18.45545768737793,18.455467224121094,18.455486297607422,18.455509185791016,18.455524444580078,18.45555877685547,18.45558738708496,18.455615997314453,18.455646514892578,18.455669403076172,18.4556941986084,18.45572853088379,18.455753326416016,18.45577049255371,18.455787658691406,18.455821990966797,18.455860137939453,18.455907821655273,18.45594596862793,18.455982208251953,18.456026077270508,18.4560489654541,18.456085205078125,18.45611000061035,18.456140518188477,18.456165313720703,18.456178665161133,18.456207275390625,18.45623016357422,18.45625877380371,18.456270217895508,18.456281661987305,18.456287384033203,18.456287384033203,18.456279754638672,18.456275939941406,18.456270217895508,18.45625877380371,18.456241607666016,18.45625114440918,18.456254959106445,18.456262588500977,18.456270217895508],"y":[-3.6750946044921875,-3.6752147674560547,-3.67478609085083,-3.6752307415008545,-3.674982786178589,-3.6748852729797363,-3.6747539043426514,-3.6746623516082764,-3.6748056411743164,-3.674445390701294,-3.674426317214966,-3.674365520477295,-3.6739501953125,-3.6740660667419434,-3.6742472648620605,-3.6738288402557373,-3.673739194869995,-3.6735999584198,-3.6740381717681885,-3.67366886138916,-3.6740636825561523,-3.6735548973083496,-3.673832416534424,-3.673863410949707,-3.6738667488098145,-3.673855781555176,-3.6736974716186523,-3.673712730407715,-3.6735219955444336,-3.6734423637390137,-3.673600673675537,-3.673797845840454,-3.6736979484558105,-3.67364501953125,-3.673807382583618,-3.673827648162842,-3.6740336418151855,-3.674085855484009,-3.6740570068359375,-3.6741130352020264,-3.6741976737976074,-3.674137830734253,-3.6743125915527344,-3.6743149757385254,-3.674130439758301,-3.674564838409424,-3.674549102783203,-3.674583911895752,-3.6745145320892334,-3.674405336380005,-3.674506187438965,-3.6745240688323975,-3.6744658946990967,-3.6744048595428467,-3.674410820007324,-3.6745107173919678,-3.674741506576538,-3.6748645305633545,-3.674792528152466,-3.6747422218322754,-3.6747889518737793,-3.6748757362365723,-3.6749324798583984,-3.6749463081359863,-3.6749472618103027,-3.67510986328125,-3.675055503845215,-3.675048828125,-3.6751420497894287,-3.6753432750701904,-3.675581455230713,-3.675738573074341,-3.6756770610809326,-3.6757090091705322,-3.67585825920105,-3.6759352684020996,-3.6760149002075195,-3.6760787963867188,-3.6761670112609863,-3.6761600971221924,-3.6762664318084717,-3.6762850284576416,-3.6764209270477295,-3.6763956546783447,-3.6764421463012695,-3.6763553619384766,-3.6762304306030273,-3.6762425899505615,-3.67622447013855,-3.6762869358062744,-3.6764206886291504,-3.6764843463897705,-3.676523208618164,-3.676729917526245,-3.67676043510437,-3.6767807006835938,-3.676799774169922,-3.6767420768737793,-3.6767287254333496,-3.6767237186431885,-3.6767759323120117,-3.676823616027832,-3.67688250541687,-3.6770596504211426,-3.6771721839904785,-3.677255868911743,-3.6772961616516113,-3.6773149967193604,-3.677206516265869,-3.6772871017456055,-3.677314519882202,-3.6773626804351807,-3.6773478984832764,-3.6773018836975098,-3.677288293838501,-3.6772990226745605,-3.6772799491882324,-3.6772232055664062,-3.677189350128174,-3.6771721839904785,-3.677067995071411,-3.6770389080047607,-3.676893949508667,-3.6768481731414795,-3.676839590072632,-3.6767284870147705,-3.676628589630127,-3.6766891479492188,-3.676668643951416,-3.676579713821411,-3.6765284538269043,-3.6765060424804688,-3.6765196323394775,-3.676482915878296,-3.6764047145843506,-3.676387310028076,-3.676344633102417,-3.6762912273406982,-3.6762583255767822,-3.6761906147003174,-3.676159143447876,-3.676135540008545,-3.6761274337768555,-3.6760871410369873,-3.6760802268981934,-3.676074266433716,-3.6760823726654053,-3.6760454177856445,-3.6760382652282715,-3.67607045173645,-3.6760611534118652,-3.6761040687561035,-3.676115036010742,-3.6761128902435303,-3.676126480102539,-3.6761233806610107,-3.6761279106140137,-3.6761245727539062,-3.6760952472686768,-3.6760902404785156,-3.6760733127593994,-3.6760854721069336,-3.6760685443878174,-3.6760470867156982,-3.6760571002960205,-3.6760151386260986,-3.676042079925537,-3.6760520935058594,-3.676009178161621,-3.675985813140869,-3.6759185791015625,-3.6758835315704346,-3.675893783569336,-3.675894021987915,-3.6758556365966797,-3.675801992416382,-3.675784111022949,-3.675780773162842,-3.675781488418579,-3.6757893562316895,-3.675779104232788,-3.675778865814209,-3.675766944885254,-3.675755739212036,-3.6757428646087646,-3.675719738006592,-3.6756949424743652,-3.675685405731201,-3.6756515502929688,-3.6756319999694824,-3.6756234169006348,-3.6755850315093994,-3.675541639328003,-3.6755080223083496,-3.675497055053711,-3.6754631996154785,-3.675443410873413,-3.675424098968506,-3.6754069328308105,-3.675395965576172,-3.6753690242767334,-3.675358533859253,-3.675356149673462,-3.675359010696411,-3.6753478050231934,-3.6753289699554443,-3.6753296852111816,-3.675316572189331,-3.6753034591674805,-3.6753196716308594,-3.6753368377685547,-3.675344705581665,-3.6753604412078857,-3.675372362136841,-3.6753854751586914,-3.675403594970703,-3.675416946411133,-3.675429344177246,-3.6754393577575684,-3.675450325012207,-3.6754555702209473,-3.6754658222198486,-3.6754770278930664,-3.675480842590332,-3.675485372543335,-3.6754941940307617,-3.675503730773926,-3.6755104064941406,-3.6755099296569824,-3.67551326751709,-3.6755149364471436,-3.6755146980285645,-3.675513982772827,-3.6755146980285645,-3.6755170822143555,-3.675518751144409,-3.675525426864624,-3.6755294799804688,-3.6755354404449463,-3.675539493560791,-3.675543785095215,-3.675546407699585,-3.675551414489746,-3.6755523681640625,-3.67555570602417,-3.67556095123291,-3.6755690574645996,-3.6755738258361816,-3.6755785942077637,-3.675579786300659],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-10.913825035095215,-10.91427993774414,-10.913766860961914,-10.913204193115234,-10.912537574768066,-10.912576675415039,-10.91299057006836,-10.912837028503418,-10.913004875183105,-10.912918090820312,-10.913281440734863,-10.913548469543457,-10.913626670837402,-10.913652420043945,-10.913458824157715,-10.913272857666016,-10.913680076599121,-10.91374683380127,-10.914802551269531,-10.91422176361084,-10.914198875427246,-10.914597511291504,-10.914134979248047,-10.914155006408691,-10.912724494934082,-10.912668228149414,-10.912933349609375,-10.91272258758545,-10.912588119506836,-10.912841796875,-10.913403511047363,-10.913342475891113,-10.913890838623047,-10.913898468017578,-10.913894653320312,-10.913616180419922,-10.913865089416504,-10.913920402526855,-10.913792610168457,-10.913585662841797,-10.913629531860352,-10.91366958618164,-10.913678169250488,-10.913073539733887,-10.912738800048828,-10.91297721862793,-10.91321849822998,-10.913086891174316,-10.91259479522705,-10.912694931030273,-10.912423133850098,-10.912443161010742,-10.912434577941895,-10.912796020507812,-10.91267204284668,-10.912899017333984,-10.913033485412598,-10.913349151611328,-10.9133939743042,-10.913534164428711,-10.913498878479004,-10.913556098937988,-10.913185119628906,-10.913395881652832,-10.913375854492188,-10.913409233093262,-10.91342830657959,-10.913435935974121,-10.913276672363281,-10.913101196289062,-10.913080215454102,-10.913140296936035,-10.913254737854004,-10.913283348083496,-10.913602828979492,-10.913429260253906,-10.913535118103027,-10.913626670837402,-10.913705825805664,-10.913419723510742,-10.913263320922852,-10.913415908813477,-10.913213729858398,-10.913374900817871,-10.91317367553711,-10.913244247436523,-10.913290977478027,-10.913276672363281,-10.913150787353516,-10.913166046142578,-10.913047790527344,-10.913219451904297,-10.913164138793945,-10.913101196289062,-10.912991523742676,-10.913094520568848,-10.913102149963379,-10.912928581237793,-10.912802696228027,-10.912773132324219,-10.912691116333008,-10.912714004516602,-10.91278076171875,-10.912568092346191,-10.912484169006348,-10.912505149841309,-10.912500381469727,-10.912162780761719,-10.912062644958496,-10.912094116210938,-10.911919593811035,-10.912039756774902,-10.911992073059082,-10.911785125732422,-10.91189956665039,-10.911859512329102,-10.911689758300781,-10.911762237548828,-10.911762237548828,-10.911877632141113,-10.911865234375,-10.911873817443848,-10.911921501159668,-10.911957740783691,-10.91186809539795,-10.911928176879883,-10.911978721618652,-10.912004470825195,-10.912190437316895,-10.91199016571045,-10.912107467651367,-10.912182807922363,-10.91220474243164,-10.912142753601074,-10.912260055541992,-10.912277221679688,-10.912229537963867,-10.912205696105957,-10.912171363830566,-10.912165641784668,-10.912152290344238,-10.912137031555176,-10.912099838256836,-10.912090301513672,-10.912147521972656,-10.912169456481934,-10.912127494812012,-10.912132263183594,-10.912165641784668,-10.912175178527832,-10.912225723266602,-10.912254333496094,-10.912301063537598,-10.912364959716797,-10.912463188171387,-10.912551879882812,-10.912615776062012,-10.912681579589844,-10.91269588470459,-10.912810325622559,-10.912847518920898,-10.912925720214844,-10.91296100616455,-10.91299819946289,-10.913050651550293,-10.913118362426758,-10.913163185119629,-10.913195610046387,-10.913227081298828,-10.913248062133789,-10.913268089294434,-10.91330337524414,-10.913310050964355,-10.91339111328125,-10.91337776184082,-10.913503646850586,-10.913530349731445,-10.913516998291016,-10.913490295410156,-10.913512229919434,-10.913570404052734,-10.913591384887695,-10.91360855102539,-10.91368579864502,-10.913681030273438,-10.913675308227539,-10.913670539855957,-10.913640975952148,-10.913640022277832,-10.913610458374023,-10.913567543029785,-10.913544654846191,-10.913545608520508,-10.913548469543457,-10.913529396057129,-10.913509368896484,-10.913501739501953,-10.913565635681152,-10.913546562194824,-10.91351318359375,-10.913496017456055,-10.913455963134766,-10.913435935974121,-10.913429260253906,-10.913415908813477,-10.913383483886719,-10.913376808166504,-10.913352966308594,-10.913341522216797,-10.913326263427734,-10.913305282592773,-10.91329288482666,-10.913253784179688,-10.913244247436523,-10.913224220275879,-10.91322135925293,-10.91321086883545,-10.913206100463867,-10.913202285766602,-10.913198471069336,-10.913196563720703,-10.913201332092285,-10.91320514678955,-10.913201332092285,-10.91321086883545,-10.913217544555664,-10.913222312927246,-10.913236618041992,-10.913230895996094,-10.913222312927246,-10.91321849822998,-10.913211822509766,-10.913212776184082,-10.913207054138184,-10.91321086883545,-10.913187980651855,-10.913169860839844,-10.913151741027832,-10.913130760192871,-10.913113594055176,-10.91309642791748,-10.91308307647705,-10.91307258605957,-10.91306209564209,-10.913058280944824,-10.913053512573242,-10.913049697875977,-10.913045883178711,-10.913046836853027,-10.913043975830078],"y":[23.645875930786133,23.645660400390625,23.64532470703125,23.645044326782227,23.644933700561523,23.644155502319336,23.644380569458008,23.643962860107422,23.64366340637207,23.6444149017334,23.64426612854004,23.64353370666504,23.643611907958984,23.644153594970703,23.643667221069336,23.643159866333008,23.642976760864258,23.64281463623047,23.64354133605957,23.643068313598633,23.6435489654541,23.64271354675293,23.641990661621094,23.641714096069336,23.642314910888672,23.642221450805664,23.64141082763672,23.641937255859375,23.641813278198242,23.641494750976562,23.641435623168945,23.640771865844727,23.640487670898438,23.640148162841797,23.6400203704834,23.639673233032227,23.639362335205078,23.639429092407227,23.63942527770996,23.639415740966797,23.639163970947266,23.639820098876953,23.639591217041016,23.639596939086914,23.639862060546875,23.640335083007812,23.639997482299805,23.640369415283203,23.639535903930664,23.639938354492188,23.639381408691406,23.639196395874023,23.6389102935791,23.639144897460938,23.638952255249023,23.638914108276367,23.638904571533203,23.639251708984375,23.639205932617188,23.63933563232422,23.63910675048828,23.6390323638916,23.638456344604492,23.638803482055664,23.639324188232422,23.638965606689453,23.638931274414062,23.638826370239258,23.638582229614258,23.638273239135742,23.638490676879883,23.638620376586914,23.638607025146484,23.638463973999023,23.638286590576172,23.637937545776367,23.637771606445312,23.637699127197266,23.637771606445312,23.637542724609375,23.637447357177734,23.637561798095703,23.637632369995117,23.637622833251953,23.637910842895508,23.63773536682129,23.637683868408203,23.637596130371094,23.63743782043457,23.637657165527344,23.637767791748047,23.637897491455078,23.638032913208008,23.638032913208008,23.63813591003418,23.638151168823242,23.638011932373047,23.637920379638672,23.63823127746582,23.637998580932617,23.637935638427734,23.637773513793945,23.6378173828125,23.63763999938965,23.637699127197266,23.637771606445312,23.637937545776367,23.637956619262695,23.63783836364746,23.63789939880371,23.63804817199707,23.63838005065918,23.638267517089844,23.63823890686035,23.638195037841797,23.638103485107422,23.63802146911621,23.63816261291504,23.638439178466797,23.638538360595703,23.638471603393555,23.638429641723633,23.63836097717285,23.638498306274414,23.638429641723633,23.638505935668945,23.638525009155273,23.638545989990234,23.638635635375977,23.63864517211914,23.638757705688477,23.638723373413086,23.638643264770508,23.638633728027344,23.63865852355957,23.63858985900879,23.63854217529297,23.638458251953125,23.638431549072266,23.638452529907227,23.638349533081055,23.638286590576172,23.638126373291016,23.63809585571289,23.63804817199707,23.63801383972168,23.638031005859375,23.638042449951172,23.638080596923828,23.6380558013916,23.6380558013916,23.638076782226562,23.63808822631836,23.638134002685547,23.63824462890625,23.638269424438477,23.638286590576172,23.638378143310547,23.638370513916016,23.638452529907227,23.638578414916992,23.63873291015625,23.638748168945312,23.638742446899414,23.638835906982422,23.63892364501953,23.638961791992188,23.638978958129883,23.639062881469727,23.639137268066406,23.639238357543945,23.639381408691406,23.63941192626953,23.639490127563477,23.639516830444336,23.639659881591797,23.63970184326172,23.639753341674805,23.63982582092285,23.639890670776367,23.63995361328125,23.6400146484375,23.64011573791504,23.640228271484375,23.64029312133789,23.640331268310547,23.64040184020996,23.640472412109375,23.640535354614258,23.64058494567871,23.640655517578125,23.640697479248047,23.640743255615234,23.64080810546875,23.640838623046875,23.640867233276367,23.64092445373535,23.641014099121094,23.641036987304688,23.641101837158203,23.641098022460938,23.641151428222656,23.641183853149414,23.64116859436035,23.64113998413086,23.64109230041504,23.641067504882812,23.641048431396484,23.641014099121094,23.6409854888916,23.640960693359375,23.640947341918945,23.640960693359375,23.640926361083984,23.640878677368164,23.640836715698242,23.640817642211914,23.64080047607422,23.640775680541992,23.640758514404297,23.640743255615234,23.640716552734375,23.64068031311035,23.640640258789062,23.64061737060547,23.640583038330078,23.64055633544922,23.640525817871094,23.64047622680664,23.64044189453125,23.640399932861328,23.64035987854004,23.640310287475586,23.64026641845703,23.640214920043945,23.640182495117188,23.64015769958496,23.640125274658203,23.640106201171875,23.64007568359375,23.64004898071289,23.6400146484375,23.639989852905273,23.639951705932617,23.639917373657227,23.6398868560791,23.63985824584961,23.63982582092285,23.639799118041992,23.639774322509766],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-27.8050479888916,-27.81582260131836,-27.81684684753418,-27.816299438476562,-27.8153133392334,-27.816104888916016,-27.81458282470703,-27.814191818237305,-27.81734848022461,-27.81407356262207,-27.81584930419922,-27.81532859802246,-27.815998077392578,-27.816099166870117,-27.814655303955078,-27.814809799194336,-27.81568717956543,-27.81532096862793,-27.81507110595703,-27.815570831298828,-27.81566619873047,-27.814241409301758,-27.812707901000977,-27.814334869384766,-27.81378173828125,-27.814260482788086,-27.81449317932129,-27.81465721130371,-27.81226921081543,-27.812023162841797,-27.812255859375,-27.81102180480957,-27.813007354736328,-27.8087215423584,-27.812990188598633,-27.810386657714844,-27.8110294342041,-27.811769485473633,-27.812267303466797,-27.810073852539062,-27.80976104736328,-27.811643600463867,-27.81133460998535,-27.808971405029297,-27.80794906616211,-27.811601638793945,-27.810789108276367,-27.810134887695312,-27.808944702148438,-27.808658599853516,-27.808338165283203,-27.81005096435547,-27.808086395263672,-27.808443069458008,-27.806835174560547,-27.805871963500977,-27.807369232177734,-27.76954460144043,-27.8109130859375,-27.810874938964844,-27.81058120727539,-27.810224533081055,-27.809911727905273,-27.80980682373047,-27.80952262878418,-27.809402465820312,-27.808692932128906,-27.808391571044922,-27.80745506286621,-27.80748748779297,-27.806825637817383,-27.805927276611328,-27.806913375854492,-27.806528091430664,-27.805009841918945,-27.804447174072266,-27.80596160888672,-27.80101776123047,-27.80525779724121,-27.806188583374023,-27.804622650146484,-27.806501388549805,-27.805583953857422,-27.80540657043457,-27.805347442626953,-27.804744720458984,-27.8043155670166,-27.803346633911133,-27.803285598754883,-27.8032169342041,-27.802949905395508,-27.802762985229492,-27.801950454711914,-27.8017520904541,-27.8013916015625,-27.80120086669922,-27.801063537597656,-27.79821014404297,-27.80137825012207,-27.801658630371094,-27.801273345947266,-27.80071258544922,-27.800283432006836,-27.80018424987793,-27.800020217895508,-27.800386428833008,-27.79937744140625,-27.799087524414062,-27.79869270324707,-27.798742294311523,-27.797935485839844,-27.79831886291504,-27.797582626342773,-27.798023223876953,-27.797452926635742,-27.796846389770508,-27.797027587890625,-27.796701431274414,-27.792652130126953,-27.79811668395996,-27.7973575592041,-27.797748565673828,-27.747926712036133,-27.802644729614258,-27.80100440979004,-27.803590774536133,-27.803058624267578,-27.803943634033203,-27.803508758544922,-27.803714752197266,-27.803207397460938,-27.803430557250977,-27.80314826965332,-27.802978515625,-27.800708770751953,-27.804197311401367,-27.804141998291016,-27.80401039123535,-27.80373191833496,-27.80378532409668,-27.803285598754883,-27.803565979003906,-27.80347442626953,-27.803028106689453,-27.802780151367188,-27.802799224853516,-27.80247688293457,-27.802417755126953,-27.802316665649414,-17.743366241455078,-27.80246925354004,-27.801803588867188,-27.802419662475586,-27.802318572998047,-27.80209732055664,-27.802305221557617,-27.80192756652832,-27.801679611206055,-27.801733016967773,-27.801685333251953,-27.801742553710938,-27.801673889160156,-27.80164337158203,-27.801610946655273,-27.801416397094727,-27.80106544494629,-27.802162170410156,-27.80184555053711,-27.801982879638672,-27.80208396911621,-27.80191993713379,-27.80228042602539,-27.80221939086914,-27.802030563354492,-27.802059173583984,-27.802120208740234,-27.802066802978516,-27.801971435546875,-27.801973342895508,-27.801862716674805,-27.801923751831055,-27.80201530456543,-27.801706314086914,-27.801353454589844,-27.80236053466797,-27.80227279663086,-27.801923751831055,-27.8023738861084,-27.802324295043945,-27.8021297454834,-27.794790267944336,-27.805295944213867,-27.8052921295166,-27.80519676208496,-27.80521011352539,-27.804893493652344,-27.805429458618164,-27.80536460876465,-27.805240631103516,-27.805234909057617,-27.80511474609375,-27.805068969726562,-27.805017471313477,-27.804920196533203,-27.804794311523438,-27.80478858947754,-27.80474090576172,-27.804676055908203,-27.804548263549805,-27.804533004760742,-27.804180145263672,-27.80470085144043,-27.804630279541016,-27.80453872680664,-27.804473876953125,-27.804428100585938,-27.804370880126953,-27.8043155670166,-27.804222106933594,-27.804218292236328,-27.804168701171875,-27.803985595703125,-27.80422019958496,-27.80413055419922,-27.804107666015625,-27.80404281616211,-27.803964614868164,-27.80390739440918,-27.803842544555664,-27.803770065307617,-27.803693771362305,-27.803661346435547,-27.803550720214844,-27.803482055664062,-27.803401947021484,-27.803373336791992,-27.80331802368164,-27.803264617919922,-27.80320167541504,-27.803173065185547,-27.80309295654297,-27.803058624267578,-27.802982330322266,-27.802913665771484,-27.802852630615234,-27.80281639099121,-27.80276107788086,-27.802711486816406,-27.80265998840332,-27.8026065826416],"y":[-26.64457893371582,-26.643388748168945,-26.64321517944336,-26.64276123046875,-26.643335342407227,-26.64320945739746,-26.643291473388672,-26.6436710357666,-26.643268585205078,-26.642894744873047,-26.642736434936523,-26.642900466918945,-26.64247703552246,-26.64204978942871,-26.642112731933594,-26.641719818115234,-26.641613006591797,-26.64192771911621,-26.6417236328125,-26.642061233520508,-26.642074584960938,-26.641984939575195,-26.642417907714844,-26.642162322998047,-26.642549514770508,-26.642436981201172,-26.642440795898438,-26.642560958862305,-26.643293380737305,-26.64336585998535,-26.643436431884766,-26.643831253051758,-26.64359474182129,-26.64400291442871,-26.643184661865234,-26.6438045501709,-26.64373207092285,-26.643962860107422,-26.643674850463867,-26.644041061401367,-26.644119262695312,-26.64368438720703,-26.643814086914062,-26.644210815429688,-26.644214630126953,-26.643817901611328,-26.64375877380371,-26.644039154052734,-26.644433975219727,-26.64421844482422,-26.644371032714844,-26.644039154052734,-26.64415168762207,-26.64408302307129,-26.64434242248535,-26.644594192504883,-26.644371032714844,-26.650596618652344,-26.643857955932617,-26.64397430419922,-26.644092559814453,-26.644197463989258,-26.644216537475586,-26.64443588256836,-26.64447784423828,-26.64435577392578,-26.644624710083008,-26.6446475982666,-26.644908905029297,-26.64484214782715,-26.645057678222656,-26.64529037475586,-26.645137786865234,-26.64524269104004,-26.645706176757812,-26.645668029785156,-26.645471572875977,-26.646268844604492,-26.64573097229004,-26.645702362060547,-26.64604949951172,-26.645729064941406,-26.645862579345703,-26.64574432373047,-26.645769119262695,-26.646060943603516,-26.64627456665039,-26.646331787109375,-26.646465301513672,-26.64664077758789,-26.646636962890625,-26.646726608276367,-26.646930694580078,-26.647083282470703,-26.64713478088379,-26.64711570739746,-26.647165298461914,-26.647747039794922,-26.64723777770996,-26.647249221801758,-26.64730453491211,-26.647329330444336,-26.647476196289062,-26.647504806518555,-26.64756965637207,-26.64745330810547,-26.647558212280273,-26.647560119628906,-26.647676467895508,-26.647607803344727,-26.647539138793945,-26.647531509399414,-26.64769172668457,-26.647462844848633,-26.647493362426758,-26.647459030151367,-26.64742088317871,-26.647432327270508,-26.64801788330078,-26.64698028564453,-26.646987915039062,-26.646944046020508,-26.655311584472656,-26.64610481262207,-26.64636993408203,-26.645917892456055,-26.646032333374023,-26.6458683013916,-26.645858764648438,-26.645824432373047,-26.645841598510742,-26.645740509033203,-26.645763397216797,-26.645750045776367,-26.646183013916016,-26.645587921142578,-26.64560317993164,-26.645652770996094,-26.64568519592285,-26.645750045776367,-26.645856857299805,-26.64582633972168,-26.6458797454834,-26.64573860168457,-26.6457576751709,-26.64579200744629,-26.645875930786133,-26.645919799804688,-26.645931243896484,-28.316774368286133,-26.64593505859375,-26.646095275878906,-26.646039962768555,-26.646095275878906,-26.646190643310547,-26.646188735961914,-26.646303176879883,-26.646398544311523,-26.646381378173828,-26.646411895751953,-26.646421432495117,-26.646467208862305,-26.64651107788086,-26.646549224853516,-26.646642684936523,-26.64673614501953,-26.64658546447754,-26.646709442138672,-26.646743774414062,-26.64676856994629,-26.64678955078125,-26.64675521850586,-26.646780014038086,-26.64679718017578,-26.646812438964844,-26.646841049194336,-26.646888732910156,-26.646936416625977,-26.64697265625,-26.64703941345215,-26.647098541259766,-26.647111892700195,-26.64719581604004,-26.64725685119629,-26.647098541259766,-26.647130966186523,-26.647235870361328,-26.647167205810547,-26.64719009399414,-26.647228240966797,-26.6484317779541,-26.646692276000977,-26.646705627441406,-26.646732330322266,-26.646738052368164,-26.646799087524414,-26.64670753479004,-26.6467227935791,-26.646745681762695,-26.646730422973633,-26.6467342376709,-26.64672088623047,-26.646724700927734,-26.646717071533203,-26.646717071533203,-26.64669418334961,-26.64667320251465,-26.646652221679688,-26.646636962890625,-26.646615982055664,-26.646642684936523,-26.64653205871582,-26.646507263183594,-26.64649772644043,-26.646480560302734,-26.64646339416504,-26.646451950073242,-26.646425247192383,-26.64640998840332,-26.646387100219727,-26.646366119384766,-26.646373748779297,-26.646310806274414,-26.64629364013672,-26.646263122558594,-26.6462345123291,-26.646211624145508,-26.646183013916016,-26.64615249633789,-26.646133422851562,-26.646106719970703,-26.646080017089844,-26.64605712890625,-26.646041870117188,-26.646041870117188,-26.64603614807129,-26.646032333374023,-26.64603614807129,-26.64603614807129,-26.64603614807129,-26.646041870117188,-26.646045684814453,-26.64604949951172,-26.646055221557617,-26.646053314208984,-26.64605140686035,-26.646055221557617,-26.64606285095215,-26.646076202392578,-26.646087646484375],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[20.776411056518555,20.776023864746094,20.77644157409668,20.776473999023438,20.77655792236328,20.776432037353516,20.776470184326172,20.777559280395508,20.77693748474121,20.776817321777344,20.776893615722656,20.777769088745117,20.77740478515625,20.77728843688965,20.776832580566406,20.77688980102539,20.776851654052734,20.776689529418945,20.776336669921875,20.77640724182129,20.776226043701172,20.77615737915039,20.776195526123047,20.776329040527344,20.776582717895508,20.776615142822266,20.776399612426758,20.776037216186523,20.7756290435791,20.775259017944336,20.775270462036133,20.774898529052734,20.775644302368164,20.775436401367188,20.775455474853516,20.77534294128418,20.775264739990234,20.775327682495117,20.775236129760742,20.77532386779785,20.775182723999023,20.77495765686035,20.774431228637695,20.774459838867188,20.774232864379883,20.774166107177734,20.774194717407227,20.774097442626953,20.773887634277344,20.77372932434082,20.773502349853516,20.77351951599121,20.773374557495117,20.773141860961914,20.773265838623047,20.77300262451172,20.772876739501953,20.77311897277832,20.773326873779297,20.77335548400879,20.77328109741211,20.77324676513672,20.773374557495117,20.773427963256836,20.773386001586914,20.773338317871094,20.773311614990234,20.77330207824707,20.773345947265625,20.77341079711914,20.773719787597656,20.773889541625977,20.773969650268555,20.77400016784668,20.773916244506836,20.773845672607422,20.77381134033203,20.773778915405273,20.773725509643555,20.77369499206543,20.7736873626709,20.773639678955078,20.77359962463379,20.773298263549805,20.773239135742188,20.77316665649414,20.773225784301758,20.773265838623047,20.773279190063477,20.773319244384766,20.773324966430664,20.773334503173828,20.77332305908203,20.773334503173828,20.773550033569336,20.773487091064453,20.77351188659668,20.773517608642578,20.773494720458984,20.77351188659668,20.7735595703125,20.774099349975586,20.77416229248047,20.774301528930664,20.774404525756836,20.774484634399414,20.774551391601562,20.774723052978516,20.77480125427246,20.774822235107422,20.774953842163086,20.775014877319336,20.775056838989258,20.775236129760742,20.77530288696289,20.77538299560547,20.77547264099121,20.775442123413086,20.775449752807617,20.775480270385742,20.77549934387207,20.775541305541992,20.775535583496094,20.775676727294922,20.7757511138916,20.775827407836914,20.77583122253418,20.775806427001953,20.77591896057129,20.775968551635742,20.77615737915039,20.776132583618164,20.776201248168945,20.77627944946289,20.776315689086914,20.776405334472656,20.776493072509766,20.77654266357422,20.776565551757812,20.776559829711914,20.776525497436523,20.77648162841797,20.77644920349121,20.77646255493164,20.776470184326172,20.776487350463867,20.77643394470215,20.776437759399414,20.77643585205078,20.77640151977539,20.77641487121582,20.776426315307617,20.776470184326172,20.776439666748047,20.776432037353516,20.776479721069336,20.776498794555664,20.776458740234375,20.776426315307617,20.77640724182129,20.776382446289062,20.776376724243164,20.7763614654541,20.77634048461914,20.77633285522461,20.77627944946289,20.77626609802246,20.776222229003906,20.776247024536133,20.77625274658203,20.776281356811523,20.776273727416992,20.77625846862793,20.77623748779297,20.776226043701172,20.776201248168945,20.77621078491211,20.776222229003906,20.77623176574707,20.776222229003906,20.77622413635254,20.776214599609375,20.776216506958008,20.776220321655273,20.77619743347168,20.77619171142578,20.77617073059082,20.77615737915039,20.776145935058594,20.776121139526367,20.776098251342773,20.77608299255371,20.776058197021484,20.77602767944336,20.776004791259766,20.775972366333008,20.775957107543945,20.77593994140625,20.775928497314453,20.77591323852539,20.775897979736328,20.775890350341797,20.775880813598633,20.775867462158203,20.775856018066406,20.77584457397461,20.77583122253418,20.77582550048828,20.775806427001953,20.775787353515625,20.775772094726562,20.775737762451172,20.775707244873047,20.775686264038086,20.775663375854492,20.775630950927734,20.775619506835938,20.775606155395508,20.77558708190918,20.775569915771484,20.77556037902832,20.775554656982422,20.775545120239258,20.775537490844727,20.775529861450195,20.775524139404297,20.775514602661133,20.775501251220703,20.77549934387207,20.775493621826172,20.775487899780273,20.77548599243164,20.775476455688477,20.77547264099121,20.775463104248047,20.775461196899414,20.77545738220215,20.77545738220215,20.77545166015625,20.77545166015625,20.775440216064453,20.775428771972656,20.775419235229492,20.775409698486328,20.775400161743164,20.775390625,20.775381088256836,20.775367736816406,20.77536392211914,20.775360107421875],"y":[17.33241081237793,17.332557678222656,17.332521438598633,17.332489013671875,17.3325252532959,17.33237075805664,17.332033157348633,17.331689834594727,17.331918716430664,17.33182144165039,17.331857681274414,17.331621170043945,17.331661224365234,17.33169937133789,17.331857681274414,17.3317928314209,17.331710815429688,17.331716537475586,17.331789016723633,17.33176612854004,17.331819534301758,17.332035064697266,17.33207893371582,17.33224105834961,17.332143783569336,17.332096099853516,17.332073211669922,17.332115173339844,17.332239151000977,17.332258224487305,17.33226776123047,17.332412719726562,17.33222770690918,17.33221435546875,17.332233428955078,17.332115173339844,17.33208465576172,17.33194351196289,17.331947326660156,17.331846237182617,17.331867218017578,17.331911087036133,17.331979751586914,17.33193016052246,17.33199119567871,17.331863403320312,17.33180809020996,17.331859588623047,17.331871032714844,17.331859588623047,17.331775665283203,17.331758499145508,17.33179473876953,17.331830978393555,17.33176040649414,17.33171272277832,17.33173179626465,17.33169174194336,17.331687927246094,17.331695556640625,17.331701278686523,17.331619262695312,17.3315486907959,17.33159065246582,17.331632614135742,17.3316650390625,17.33165740966797,17.33165168762207,17.331695556640625,17.331741333007812,17.331727981567383,17.33170509338379,17.33165740966797,17.3316707611084,17.33173179626465,17.331769943237305,17.331775665283203,17.331806182861328,17.33195686340332,17.331953048706055,17.331932067871094,17.331939697265625,17.331993103027344,17.331966400146484,17.332000732421875,17.33205795288086,17.33204460144043,17.332046508789062,17.33206558227539,17.33205223083496,17.33208465576172,17.33206558227539,17.332073211669922,17.33204460144043,17.3319091796875,17.331912994384766,17.331924438476562,17.331928253173828,17.331932067871094,17.331939697265625,17.331932067871094,17.331819534301758,17.331804275512695,17.331806182861328,17.331783294677734,17.331710815429688,17.331632614135742,17.331520080566406,17.33147430419922,17.33146095275879,17.331388473510742,17.331388473510742,17.331388473510742,17.33135986328125,17.331356048583984,17.331348419189453,17.331348419189453,17.331378936767578,17.331401824951172,17.33142852783203,17.33145523071289,17.33148956298828,17.331541061401367,17.331485748291016,17.331512451171875,17.331558227539062,17.331642150878906,17.331695556640625,17.331710815429688,17.33172607421875,17.331714630126953,17.331768035888672,17.331735610961914,17.331701278686523,17.33169937133789,17.33170509338379,17.331680297851562,17.3316593170166,17.331653594970703,17.331666946411133,17.331687927246094,17.331708908081055,17.331722259521484,17.331724166870117,17.331727981567383,17.33173370361328,17.33177375793457,17.331789016723633,17.331789016723633,17.33180809020996,17.331823348999023,17.331829071044922,17.331817626953125,17.33184051513672,17.331850051879883,17.331829071044922,17.331829071044922,17.331817626953125,17.33180809020996,17.331798553466797,17.33177947998047,17.331745147705078,17.331722259521484,17.331689834594727,17.331655502319336,17.331626892089844,17.331600189208984,17.331567764282227,17.33152961730957,17.331518173217773,17.33148956298828,17.33148193359375,17.33147621154785,17.331466674804688,17.331464767456055,17.33146095275879,17.33145523071289,17.33144760131836,17.331430435180664,17.331424713134766,17.331424713134766,17.331438064575195,17.331449508666992,17.331470489501953,17.331483840942383,17.331493377685547,17.331510543823242,17.331527709960938,17.331539154052734,17.331560134887695,17.331571578979492,17.33160972595215,17.331619262695312,17.331628799438477,17.331632614135742,17.331640243530273,17.33165168762207,17.33165168762207,17.33165740966797,17.331663131713867,17.331663131713867,17.331668853759766,17.331666946411133,17.3316593170166,17.331653594970703,17.331642150878906,17.33163070678711,17.331628799438477,17.331621170043945,17.331605911254883,17.331605911254883,17.33159637451172,17.331588745117188,17.33157730102539,17.331567764282227,17.3315486907959,17.331527709960938,17.331510543823242,17.331499099731445,17.33149528503418,17.331493377685547,17.33150291442871,17.331514358520508,17.33152961730957,17.331544876098633,17.331558227539062,17.33157730102539,17.331594467163086,17.33161735534668,17.331634521484375,17.33165168762207,17.33167266845703,17.33169174194336,17.331708908081055,17.33172607421875,17.33173370361328,17.331745147705078,17.331750869750977,17.331750869750977,17.331754684448242,17.331754684448242,17.33175277709961,17.331754684448242,17.33175277709961,17.331754684448242,17.331756591796875,17.331756591796875,17.33175277709961,17.33175277709961,17.331748962402344],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-33.79465103149414,-33.79453659057617,-33.79466247558594,-33.79478454589844,-33.79433822631836,-33.79441452026367,-33.79450607299805,-33.794803619384766,-33.79466247558594,-33.794525146484375,-33.79486083984375,-33.79499053955078,-33.794979095458984,-33.79481887817383,-33.795265197753906,-33.79527282714844,-33.79533767700195,-33.795570373535156,-33.795616149902344,-33.795528411865234,-33.79498291015625,-33.79511260986328,-33.79494857788086,-33.79507827758789,-33.79536819458008,-33.79552459716797,-33.79549789428711,-33.795135498046875,-33.794921875,-33.79484939575195,-33.79485321044922,-33.79510498046875,-33.79522705078125,-33.79509353637695,-33.79497146606445,-33.79523468017578,-33.79525375366211,-33.79487991333008,-33.795326232910156,-33.795684814453125,-33.795631408691406,-33.79546356201172,-33.795448303222656,-33.795249938964844,-33.79517364501953,-33.79526901245117,-33.7955436706543,-33.79595947265625,-33.79567337036133,-33.795841217041016,-33.79571533203125,-33.79569625854492,-33.79576110839844,-33.79610824584961,-33.796241760253906,-33.796287536621094,-33.79631805419922,-33.796417236328125,-33.79670333862305,-33.7967529296875,-33.79728317260742,-33.797340393066406,-33.79726791381836,-33.7975959777832,-33.797630310058594,-33.79759216308594,-33.797489166259766,-33.79790496826172,-33.79787826538086,-33.79800033569336,-33.79811477661133,-33.79810333251953,-33.7982177734375,-33.79828643798828,-33.79811477661133,-33.79816436767578,-33.7982292175293,-33.79833221435547,-33.79832077026367,-33.79841995239258,-33.79864501953125,-33.799015045166016,-33.799102783203125,-33.799190521240234,-33.799049377441406,-33.79910659790039,-33.7990837097168,-33.79915237426758,-33.79914474487305,-33.79923629760742,-33.799293518066406,-33.79949188232422,-33.79939270019531,-33.799556732177734,-33.79959487915039,-33.79967498779297,-33.79971694946289,-33.79973602294922,-33.799835205078125,-33.79988479614258,-33.79994583129883,-33.79999923706055,-33.800010681152344,-33.80000305175781,-33.80004119873047,-33.800079345703125,-33.79997634887695,-33.79994201660156,-33.799869537353516,-33.799861907958984,-33.799888610839844,-33.799861907958984,-33.79981231689453,-33.79973220825195,-33.799659729003906,-33.79962921142578,-33.79959487915039,-33.7995491027832,-33.7994270324707,-33.7994384765625,-33.799400329589844,-33.799285888671875,-33.79917907714844,-33.799076080322266,-33.79901885986328,-33.79885482788086,-33.7987174987793,-33.798587799072266,-33.79841995239258,-33.798370361328125,-33.798240661621094,-33.79814910888672,-33.79810333251953,-33.79801559448242,-33.79791259765625,-33.79776382446289,-33.79765319824219,-33.79759979248047,-33.797523498535156,-33.79746627807617,-33.79740905761719,-33.79732131958008,-33.79730224609375,-33.797271728515625,-33.79718017578125,-33.797122955322266,-33.79704284667969,-33.79702377319336,-33.796958923339844,-33.79688262939453,-33.79684066772461,-33.796783447265625,-33.7967414855957,-33.79673767089844,-33.79668426513672,-33.79666519165039,-33.79664993286133,-33.79658508300781,-33.796573638916016,-33.796504974365234,-33.7963981628418,-33.796382904052734,-33.79641342163086,-33.79644012451172,-33.796409606933594,-33.79640197753906,-33.79635238647461,-33.79632568359375,-33.796329498291016,-33.79628372192383,-33.796207427978516,-33.79617691040039,-33.79615783691406,-33.79603958129883,-33.796024322509766,-33.79600524902344,-33.79597091674805,-33.79594421386719,-33.79588317871094,-33.79585647583008,-33.79582595825195,-33.79582595825195,-33.79586410522461,-33.79581069946289,-33.795814514160156,-33.795799255371094,-33.79579162597656,-33.7957763671875,-33.795753479003906,-33.795738220214844,-33.79572296142578,-33.79573440551758,-33.79573440551758,-33.79575729370117,-33.795772552490234,-33.79579544067383,-33.79582977294922,-33.79585266113281,-33.79585266113281,-33.79585647583008,-33.79588317871094,-33.79589080810547,-33.79591751098633,-33.79593276977539,-33.79595184326172,-33.79598617553711,-33.79600143432617,-33.7960205078125,-33.79603958129883,-33.79606246948242,-33.796077728271484,-33.796104431152344,-33.79612350463867,-33.7961311340332,-33.79612350463867,-33.79612731933594,-33.79612350463867,-33.7961311340332,-33.79613494873047,-33.79615020751953,-33.7961540222168,-33.79616928100586,-33.79617691040039,-33.796180725097656,-33.79619216918945,-33.796226501464844,-33.796260833740234,-33.796295166015625,-33.796348571777344,-33.79637145996094,-33.79639434814453,-33.79641342163086,-33.79643630981445,-33.79646301269531,-33.79648971557617,-33.7965202331543,-33.79655838012695,-33.79660415649414,-33.7966194152832,-33.79664611816406,-33.796669006347656,-33.79670715332031,-33.796730041503906,-33.7967529296875,-33.79677963256836,-33.79679870605469,-33.796817779541016,-33.796836853027344,-33.79685974121094,-33.796875],"y":[-1.4570471048355103,-1.4572335481643677,-1.457390308380127,-1.4570887088775635,-1.4574774503707886,-1.4578006267547607,-1.4579799175262451,-1.4582583904266357,-1.4582784175872803,-1.4586076736450195,-1.4585102796554565,-1.458862066268921,-1.4590142965316772,-1.4590845108032227,-1.4594073295593262,-1.4592266082763672,-1.4593627452850342,-1.4597333669662476,-1.4599556922912598,-1.4600951671600342,-1.460436463356018,-1.460554838180542,-1.4609826803207397,-1.4609758853912354,-1.4611746072769165,-1.4611905813217163,-1.4615919589996338,-1.4619858264923096,-1.4623252153396606,-1.4623372554779053,-1.4624263048171997,-1.4624911546707153,-1.462816596031189,-1.4631716012954712,-1.4633145332336426,-1.4632513523101807,-1.4634119272232056,-1.4635792970657349,-1.4637385606765747,-1.4639049768447876,-1.4637782573699951,-1.4639830589294434,-1.464146614074707,-1.4640394449234009,-1.4642385244369507,-1.4641022682189941,-1.4643193483352661,-1.4641730785369873,-1.4644224643707275,-1.464751958847046,-1.4649460315704346,-1.4650012254714966,-1.4647773504257202,-1.4645519256591797,-1.464732050895691,-1.4646981954574585,-1.4647308588027954,-1.4649567604064941,-1.4649784564971924,-1.465113639831543,-1.4653514623641968,-1.465220332145691,-1.465497374534607,-1.4657015800476074,-1.4658162593841553,-1.4659702777862549,-1.465996503829956,-1.4653925895690918,-1.4655007123947144,-1.4655629396438599,-1.4658029079437256,-1.465918779373169,-1.465940237045288,-1.4659639596939087,-1.4660301208496094,-1.4661972522735596,-1.4661073684692383,-1.4662452936172485,-1.4662479162216187,-1.466086983680725,-1.466098666191101,-1.4662351608276367,-1.4661402702331543,-1.466220736503601,-1.466360092163086,-1.466407060623169,-1.4664311408996582,-1.4664409160614014,-1.46649169921875,-1.4665499925613403,-1.466508388519287,-1.4665517807006836,-1.4665203094482422,-1.4662060737609863,-1.466240644454956,-1.4663593769073486,-1.466417908668518,-1.46648108959198,-1.4665428400039673,-1.466596007347107,-1.4666252136230469,-1.4667409658432007,-1.4669522047042847,-1.4669950008392334,-1.467137336730957,-1.4672787189483643,-1.4673734903335571,-1.4674835205078125,-1.4675711393356323,-1.4676636457443237,-1.4677538871765137,-1.4677404165267944,-1.4677443504333496,-1.467788815498352,-1.4678834676742554,-1.4679707288742065,-1.4679360389709473,-1.4679375886917114,-1.4679838418960571,-1.4680148363113403,-1.4680685997009277,-1.4681118726730347,-1.468050479888916,-1.4679573774337769,-1.4679704904556274,-1.4679436683654785,-1.4679380655288696,-1.4679701328277588,-1.4679796695709229,-1.4679750204086304,-1.4679471254348755,-1.4679611921310425,-1.4679549932479858,-1.4679712057113647,-1.4679672718048096,-1.4679464101791382,-1.4679548740386963,-1.4679397344589233,-1.4679412841796875,-1.467934012413025,-1.4679312705993652,-1.4679138660430908,-1.4677631855010986,-1.467712163925171,-1.4677702188491821,-1.4677375555038452,-1.4677493572235107,-1.4677976369857788,-1.4677650928497314,-1.4677494764328003,-1.4677194356918335,-1.4677139520645142,-1.4676408767700195,-1.46760094165802,-1.4675787687301636,-1.467561960220337,-1.4675276279449463,-1.467475175857544,-1.467460036277771,-1.4674241542816162,-1.4674025774002075,-1.4673888683319092,-1.4673516750335693,-1.4672884941101074,-1.4672727584838867,-1.4672362804412842,-1.4672061204910278,-1.4672088623046875,-1.4670621156692505,-1.4670612812042236,-1.4670307636260986,-1.466975450515747,-1.4668906927108765,-1.4668426513671875,-1.4667800664901733,-1.4666956663131714,-1.466611385345459,-1.4665608406066895,-1.4665225744247437,-1.4664740562438965,-1.466424822807312,-1.4663784503936768,-1.46620512008667,-1.466164231300354,-1.4661227464675903,-1.4660841226577759,-1.4660565853118896,-1.466026782989502,-1.4659929275512695,-1.4659535884857178,-1.465915322303772,-1.4658700227737427,-1.4658321142196655,-1.4658058881759644,-1.4657707214355469,-1.4657235145568848,-1.4656915664672852,-1.465656042098999,-1.465633511543274,-1.4656093120574951,-1.465551495552063,-1.465522289276123,-1.465489149093628,-1.465464472770691,-1.4654284715652466,-1.4653856754302979,-1.465377926826477,-1.4653713703155518,-1.46536386013031,-1.46535062789917,-1.4653459787368774,-1.4653486013412476,-1.4653346538543701,-1.4653215408325195,-1.4653044939041138,-1.4652866125106812,-1.4652637243270874,-1.4652403593063354,-1.4652186632156372,-1.4651821851730347,-1.4651693105697632,-1.4651482105255127,-1.4651237726211548,-1.4650981426239014,-1.4650540351867676,-1.4650428295135498,-1.465023159980774,-1.464996337890625,-1.4649003744125366,-1.464900255203247,-1.464898943901062,-1.4648983478546143,-1.4648951292037964,-1.4648950099945068,-1.464895248413086,-1.4648982286453247,-1.4648950099945068,-1.4649163484573364,-1.4649431705474854,-1.46497642993927,-1.4650095701217651,-1.4650428295135498,-1.4650733470916748,-1.465105652809143,-1.4651408195495605,-1.4651741981506348,-1.4652034044265747,-1.4652323722839355,-1.4652613401412964,-1.4652937650680542],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}]},{"data":[{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-17.709362030029297,-17.70950698852539,-17.709638595581055,-17.709758758544922,-17.709915161132812,-17.710044860839844,-17.7101993560791,-17.710344314575195,-17.710477828979492,-17.710647583007812,-17.71077537536621,-17.710908889770508,-17.7110538482666,-17.71118927001953,-17.711313247680664,-17.7114315032959,-17.711549758911133,-17.711668014526367,-17.71181297302246,-17.71193504333496,-17.71204376220703,-17.712169647216797,-17.71231460571289,-17.71242332458496,-17.712562561035156,-17.712661743164062,-17.71277618408203,-17.712886810302734,-17.713010787963867,-17.713115692138672,-17.71324348449707,-17.713356018066406,-17.71343994140625,-17.71354866027832,-17.713672637939453,-17.713764190673828,-17.7138614654541,-17.713956832885742,-17.71405792236328,-17.71416664123535,-17.71427345275879,-17.714359283447266,-17.714447021484375,-17.714542388916016,-17.714649200439453,-17.714710235595703,-17.714828491210938,-17.714921951293945,-17.715011596679688,-17.715091705322266,-17.715173721313477,-17.715259552001953,-17.715349197387695,-17.715421676635742,-17.715497970581055,-17.71556854248047,-17.71564292907715,-17.715702056884766,-17.715776443481445,-17.71582794189453,-17.715898513793945,-17.715965270996094,-17.716032028198242,-17.71610450744629,-17.716161727905273,-17.71623992919922,-17.716276168823242,-17.716341018676758,-17.716392517089844,-17.716459274291992,-17.716510772705078,-17.71657943725586,-17.716644287109375,-17.716691970825195,-17.71674346923828,-17.716800689697266,-17.716842651367188,-17.71687126159668,-17.716930389404297,-17.71698760986328,-17.717029571533203,-17.71702766418457,-17.71707534790039,-17.717134475708008,-17.717185974121094,-17.717220306396484,-17.717269897460938,-17.717321395874023,-17.717350006103516,-17.717395782470703,-17.717435836791992,-17.717487335205078,-17.71750259399414,-17.717531204223633,-17.71758270263672,-17.717620849609375,-17.71765899658203,-17.71769905090332,-17.717742919921875,-17.71776580810547,-17.717796325683594,-17.71782875061035,-17.717857360839844,-17.717884063720703,-17.717906951904297,-17.717933654785156,-17.717952728271484,-17.71796989440918,-17.717994689941406,-17.717985153198242,-17.718000411987305,-17.71800994873047,-17.718029022216797,-17.718040466308594,-17.718050003051758,-17.71806526184082,-17.71806526184082,-17.71807861328125,-17.718082427978516,-17.71808433532715,-17.718082427978516,-17.718090057373047,-17.718076705932617,-17.718069076538086,-17.718212127685547,-17.717967987060547,-17.717863082885742,-17.717880249023438,-17.717906951904297,-17.717937469482422,-17.717966079711914,-17.717994689941406,-17.718021392822266,-17.718036651611328,-17.718069076538086,-17.718097686767578,-17.718111038208008,-17.71815299987793,-17.718135833740234,-17.718158721923828,-17.71819305419922,-17.718219757080078,-17.718246459960938,-17.718278884887695,-17.718307495117188,-17.718334197998047,-17.718360900878906,-17.7183837890625,-17.718412399291992,-17.718429565429688,-17.718448638916016,-17.71847152709961,-17.718486785888672,-17.718505859375,-17.71851921081543,-17.718530654907227,-17.718544006347656,-17.71856689453125,-17.718563079833984,-17.718584060668945,-17.718599319458008,-17.718605041503906,-17.7186222076416,-17.718631744384766,-17.718643188476562,-17.71865463256836,-17.718666076660156,-17.718679428100586,-17.71868133544922,-17.718685150146484,-17.71869659423828,-17.718711853027344,-17.71868133544922,-17.718690872192383,-17.718700408935547,-17.718704223632812,-17.718711853027344,-17.71871566772461,-17.718717575073242,-17.718725204467773,-17.718725204467773,-17.718748092651367,-17.718692779541016,-17.718708038330078,-17.718704223632812,-17.718717575073242,-17.718711853027344,-17.718717575073242,-17.718725204467773,-17.718746185302734,-17.71875762939453,-17.718769073486328,-17.71877670288086,-17.71879005432129,-17.71879768371582,-17.71881103515625,-17.718820571899414,-17.718835830688477,-17.718826293945312,-17.718839645385742,-17.718870162963867,-17.71882438659668,-17.718841552734375,-17.718854904174805,-17.7188720703125,-17.718883514404297,-17.718900680541992,-17.718915939331055,-17.71892547607422,-17.718936920166016,-17.718942642211914,-17.71895408630371,-17.718965530395508,-17.71897315979004,-17.718984603881836,-17.718990325927734,-17.719005584716797,-17.718984603881836,-17.7189998626709,-17.719013214111328,-17.71902847290039,-17.719045639038086,-17.719057083129883,-17.719070434570312,-17.71908187866211,-17.719097137451172,-17.7191104888916,-17.719106674194336,-17.7191162109375,-17.71912956237793,-17.719141006469727,-17.719148635864258,-17.719160079956055,-17.71916961669922,-17.71917724609375,-17.719209671020508,-17.719146728515625,-17.719165802001953,-17.71920394897461,-17.719158172607422,-17.71918296813965,-17.719207763671875,-17.7192325592041,-17.71925926208496,-17.719280242919922,-17.71930503845215,-17.71932601928711,-17.719350814819336,-17.719371795654297,-17.71939468383789],"y":[-28.322410583496094,-28.322418212890625,-28.32242774963379,-28.322437286376953,-28.32244300842285,-28.32244873046875,-28.32245445251465,-28.322452545166016,-28.32245635986328,-28.322458267211914,-28.322460174560547,-28.32246208190918,-28.322463989257812,-28.322460174560547,-28.322463989257812,-28.322463989257812,-28.322465896606445,-28.32246208190918,-28.32246208190918,-28.322463989257812,-28.322467803955078,-28.322479248046875,-28.32246971130371,-28.322471618652344,-28.322471618652344,-28.322477340698242,-28.32247543334961,-28.322479248046875,-28.322484970092773,-28.32248306274414,-28.322481155395508,-28.32248306274414,-28.32248306274414,-28.322486877441406,-28.322486877441406,-28.322484970092773,-28.322481155395508,-28.32248306274414,-28.322481155395508,-28.32247543334961,-28.322467803955078,-28.322467803955078,-28.322467803955078,-28.32245635986328,-28.32244873046875,-28.32244873046875,-28.322439193725586,-28.32242774963379,-28.322425842285156,-28.32242202758789,-28.322412490844727,-28.322399139404297,-28.32239532470703,-28.3223876953125,-28.3223819732666,-28.322372436523438,-28.322359085083008,-28.322345733642578,-28.322338104248047,-28.32233238220215,-28.32232093811035,-28.32230567932129,-28.32229995727539,-28.32227897644043,-28.3222713470459,-28.322254180908203,-28.322248458862305,-28.322240829467773,-28.32221794128418,-28.322208404541016,-28.32219123840332,-28.322181701660156,-28.322162628173828,-28.3221492767334,-28.322126388549805,-28.322113037109375,-28.32210350036621,-28.32208824157715,-28.32207489013672,-28.32206153869629,-28.322044372558594,-28.322038650512695,-28.322019577026367,-28.322004318237305,-28.321992874145508,-28.321977615356445,-28.321964263916016,-28.321949005126953,-28.321929931640625,-28.321914672851562,-28.321903228759766,-28.321882247924805,-28.321868896484375,-28.321857452392578,-28.321840286254883,-28.32182502746582,-28.321815490722656,-28.32179832458496,-28.3217830657959,-28.321767807006836,-28.321754455566406,-28.321741104125977,-28.321727752685547,-28.32171630859375,-28.321701049804688,-28.321693420410156,-28.32167625427246,-28.321664810180664,-28.321653366088867,-28.321643829345703,-28.32163429260254,-28.321624755859375,-28.321609497070312,-28.321598052978516,-28.32158851623535,-28.32158088684082,-28.32156753540039,-28.321561813354492,-28.32155418395996,-28.3215389251709,-28.321529388427734,-28.321521759033203,-28.321514129638672,-28.321508407592773,-28.321474075317383,-28.32150650024414,-28.321523666381836,-28.321510314941406,-28.321502685546875,-28.321495056152344,-28.321489334106445,-28.32147789001465,-28.32146453857422,-28.321460723876953,-28.321447372436523,-28.32144546508789,-28.321434020996094,-28.321422576904297,-28.32142448425293,-28.321413040161133,-28.321399688720703,-28.321395874023438,-28.321388244628906,-28.321380615234375,-28.321369171142578,-28.32136344909668,-28.321352005004883,-28.32135009765625,-28.32134437561035,-28.32133674621582,-28.321331024169922,-28.321325302124023,-28.321317672729492,-28.32131576538086,-28.321306228637695,-28.321308135986328,-28.32129669189453,-28.321292877197266,-28.321290969848633,-28.321287155151367,-28.32127571105957,-28.321279525756836,-28.32127571105957,-28.321271896362305,-28.321266174316406,-28.321266174316406,-28.321264266967773,-28.321264266967773,-28.321264266967773,-28.32126235961914,-28.321258544921875,-28.32125473022461,-28.321258544921875,-28.321258544921875,-28.321258544921875,-28.321250915527344,-28.321252822875977,-28.321252822875977,-28.321256637573242,-28.321252822875977,-28.321256637573242,-28.321245193481445,-28.32126235961914,-28.321256637573242,-28.321264266967773,-28.321260452270508,-28.321260452270508,-28.321260452270508,-28.321266174316406,-28.321264266967773,-28.321264266967773,-28.321264266967773,-28.321260452270508,-28.321264266967773,-28.32126808166504,-28.32126808166504,-28.321269989013672,-28.321266174316406,-28.321269989013672,-28.321277618408203,-28.321273803710938,-28.3212833404541,-28.321277618408203,-28.321277618408203,-28.32127571105957,-28.32127571105957,-28.32127571105957,-28.32127571105957,-28.321279525756836,-28.3212833404541,-28.321279525756836,-28.3212833404541,-28.321279525756836,-28.321279525756836,-28.3212833404541,-28.32128143310547,-28.3212833404541,-28.321292877197266,-28.321292877197266,-28.321292877197266,-28.321290969848633,-28.321290969848633,-28.321292877197266,-28.3212947845459,-28.321300506591797,-28.321304321289062,-28.321306228637695,-28.321304321289062,-28.321306228637695,-28.321313858032227,-28.32131004333496,-28.321313858032227,-28.321317672729492,-28.321317672729492,-28.321317672729492,-28.321313858032227,-28.32132911682129,-28.321332931518555,-28.321327209472656,-28.321340560913086,-28.321338653564453,-28.321338653564453,-28.32133674621582,-28.321340560913086,-28.32133674621582,-28.321340560913086,-28.321331024169922,-28.321331024169922,-28.321331024169922,-28.32132911682129],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.456274032592773,18.45627784729004,18.456281661987305,18.45628547668457,18.456289291381836,18.45629119873047,18.456295013427734,18.456302642822266,18.45631217956543,18.456315994262695,18.456329345703125,18.456340789794922,18.45635223388672,18.456363677978516,18.45637321472168,18.45638656616211,18.456401824951172,18.45641326904297,18.456424713134766,18.456438064575195,18.456449508666992,18.456464767456055,18.45647430419922,18.456485748291016,18.45649528503418,18.45650291442871,18.456510543823242,18.45652198791504,18.456533432006836,18.456544876098633,18.456552505493164,18.45656394958496,18.456571578979492,18.456581115722656,18.45659065246582,18.45660400390625,18.456615447998047,18.45663070678711,18.456642150878906,18.456655502319336,18.456666946411133,18.45667839050293,18.456693649291992,18.45670509338379,18.456716537475586,18.456727981567383,18.45673942565918,18.456750869750977,18.456764221191406,18.45677375793457,18.456783294677734,18.456790924072266,18.456806182861328,18.45682716369629,18.45684051513672,18.45685386657715,18.456863403320312,18.456876754760742,18.456890106201172,18.456905364990234,18.456912994384766,18.456928253173828,18.456939697265625,18.45694923400879,18.45695686340332,18.45696449279785,18.456974029541016,18.456981658935547,18.456989288330078,18.45699119567871,18.456998825073242,18.457002639770508,18.457008361816406,18.457014083862305,18.45701789855957,18.457019805908203,18.457021713256836,18.457021713256836,18.457019805908203,18.457019805908203,18.45701789855957,18.457014083862305,18.457012176513672,18.457008361816406,18.45700454711914,18.457000732421875,18.456995010375977,18.456989288330078,18.45698356628418,18.45697784423828,18.456974029541016,18.456968307495117,18.45696258544922,18.456954956054688,18.456951141357422,18.456945419311523,18.456937789916992,18.45693016052246,18.456924438476562,18.456918716430664,18.45691680908203,18.4569091796875,18.45690155029297,18.456893920898438,18.456886291503906,18.456880569458008,18.456872940063477,18.456865310668945,18.456859588623047,18.456850051879883,18.45684051513672,18.45683479309082,18.456825256347656,18.456819534301758,18.45681381225586,18.456804275512695,18.45679473876953,18.456789016723633,18.456783294677734,18.45677375793457,18.456764221191406,18.456756591796875,18.456750869750977,18.456743240356445,18.456737518310547,18.456735610961914,18.456727981567383,18.456722259521484,18.45671844482422,18.456716537475586,18.456710815429688,18.45670509338379,18.45669937133789,18.456695556640625,18.456689834594727,18.45668601989746,18.456680297851562,18.456674575805664,18.456668853759766,18.456663131713867,18.45665740966797,18.456649780273438,18.45664405822754,18.456636428833008,18.45663070678711,18.45662498474121,18.45661735534668,18.45661163330078,18.45660972595215,18.456602096557617,18.45659637451172,18.45659065246582,18.456586837768555,18.456581115722656,18.45657730102539,18.456573486328125,18.456567764282227,18.45656394958496,18.456560134887695,18.456554412841797,18.4565486907959,18.456544876098633,18.456541061401367,18.45653533935547,18.456531524658203,18.456525802612305,18.45652198791504,18.456518173217773,18.456514358520508,18.456510543823242,18.45650863647461,18.456504821777344,18.456501007080078,18.456499099731445,18.456497192382812,18.456497192382812,18.456493377685547,18.456493377685547,18.456493377685547,18.45648956298828,18.45648956298828,18.45648956298828,18.45648956298828,18.45648956298828,18.45648956298828,18.45648956298828,18.45648956298828,18.45648956298828,18.456491470336914,18.456493377685547,18.45649528503418,18.45649528503418,18.456499099731445,18.456501007080078,18.45650291442871,18.456506729125977,18.456510543823242,18.456512451171875,18.45651626586914,18.456520080566406,18.456523895263672,18.456525802612305,18.456531524658203,18.45653533935547,18.456541061401367,18.456544876098633,18.4565486907959,18.45655059814453,18.45655632019043,18.456560134887695,18.45656394958496,18.45656967163086,18.456573486328125,18.45657730102539,18.456581115722656,18.456584930419922,18.45659065246582,18.456594467163086,18.45659637451172,18.456600189208984,18.456602096557617,18.456605911254883,18.45661163330078,18.456615447998047,18.45661735534668,18.45661735534668,18.456621170043945,18.45662498474121,18.456626892089844,18.456632614135742,18.456632614135742,18.456634521484375,18.456636428833008,18.45663833618164,18.456640243530273,18.456640243530273,18.45664405822754,18.456645965576172,18.456647872924805,18.456647872924805,18.456647872924805,18.45665168762207,18.456653594970703,18.456653594970703,18.45665740966797,18.45665740966797,18.45665740966797,18.456661224365234,18.4566650390625,18.4566650390625],"y":[-3.6755809783935547,-3.6755828857421875,-3.6755847930908203,-3.6755878925323486,-3.675588846206665,-3.675591468811035,-3.6755943298339844,-3.675597667694092,-3.6756012439727783,-3.6756041049957275,-3.6756093502044678,-3.675614356994629,-3.675618886947632,-3.6756253242492676,-3.675631523132324,-3.6756372451782227,-3.6756443977355957,-3.675652027130127,-3.6756601333618164,-3.675666570663452,-3.6756739616394043,-3.6756815910339355,-3.675689697265625,-3.675697088241577,-3.675704002380371,-3.6757116317749023,-3.6757187843322754,-3.675726890563965,-3.6757359504699707,-3.6757442951202393,-3.675753593444824,-3.6757619380950928,-3.6757700443267822,-3.6757781505584717,-3.6757864952087402,-3.675794839859009,-3.675802707672119,-3.675809621810913,-3.675816535949707,-3.675823450088501,-3.675830841064453,-3.6758365631103516,-3.6758437156677246,-3.675849676132202,-3.675856113433838,-3.6758625507354736,-3.675868034362793,-3.675873041152954,-3.6758782863616943,-3.6758837699890137,-3.6758899688720703,-3.6758949756622314,-3.675900459289551,-3.6759064197540283,-3.675912618637085,-3.6759188175201416,-3.6759238243103027,-3.6759283542633057,-3.675933361053467,-3.675938367843628,-3.6759421825408936,-3.6759469509124756,-3.6759519577026367,-3.6759557723999023,-3.675959825515747,-3.6759636402130127,-3.675967216491699,-3.6759705543518066,-3.6759748458862305,-3.6759777069091797,-3.67598032951355,-3.6759815216064453,-3.675982713699341,-3.6759836673736572,-3.6759848594665527,-3.67598557472229,-3.67598557472229,-3.67598557472229,-3.675985336303711,-3.6759846210479736,-3.675983428955078,-3.675982713699341,-3.675981044769287,-3.6759796142578125,-3.675977945327759,-3.675976037979126,-3.6759746074676514,-3.675973892211914,-3.6759727001190186,-3.675971508026123,-3.6759700775146484,-3.675968885421753,-3.675966501235962,-3.675964117050171,-3.6759607791900635,-3.675957679748535,-3.6759543418884277,-3.6759512424468994,-3.675948143005371,-3.6759450435638428,-3.6759424209594727,-3.6759393215179443,-3.6759355068206787,-3.675931930541992,-3.6759274005889893,-3.675922393798828,-3.675917148590088,-3.6759114265441895,-3.675905704498291,-3.6759002208709717,-3.6758949756622314,-3.675888776779175,-3.6758835315704346,-3.675877332687378,-3.6758716106414795,-3.675865888595581,-3.6758601665496826,-3.6758546829223633,-3.675848960876465,-3.6758437156677246,-3.675837993621826,-3.675832986831665,-3.675827980041504,-3.675823926925659,-3.6758201122283936,-3.675816297531128,-3.675812005996704,-3.6758086681365967,-3.67580509185791,-3.6758017539978027,-3.6757986545562744,-3.675795555114746,-3.675792932510376,-3.6757898330688477,-3.6757872104644775,-3.6757845878601074,-3.6757822036743164,-3.6757802963256836,-3.6757779121398926,-3.675776481628418,-3.6757748126983643,-3.6757733821868896,-3.675771951675415,-3.6757700443267822,-3.6757688522338867,-3.675767183303833,-3.6757662296295166,-3.675764560699463,-3.6757638454437256,-3.6757631301879883,-3.6757614612579346,-3.6757607460021973,-3.6757593154907227,-3.675757646560669,-3.6757562160491943,-3.6757547855377197,-3.675753593444824,-3.6757519245147705,-3.675750494003296,-3.675748825073242,-3.675747871398926,-3.675746202468872,-3.6757450103759766,-3.675743579864502,-3.6757423877716064,-3.675741195678711,-3.6757402420043945,-3.675739288330078,-3.6757378578186035,-3.675737142562866,-3.6757359504699707,-3.6757352352142334,-3.675734519958496,-3.675734043121338,-3.6757333278656006,-3.6757328510284424,-3.675732374191284,-3.675732135772705,-3.675732135772705,-3.675732135772705,-3.675731658935547,-3.6757314205169678,-3.6757314205169678,-3.6757314205169678,-3.6757314205169678,-3.6757314205169678,-3.6757314205169678,-3.6757314205169678,-3.6757314205169678,-3.675731658935547,-3.675732135772705,-3.675732374191284,-3.6757328510284424,-3.6757335662841797,-3.675734758377075,-3.6757359504699707,-3.675736665725708,-3.6757378578186035,-3.675739288330078,-3.675740957260132,-3.6757421493530273,-3.6757431030273438,-3.6757447719573975,-3.675746202468872,-3.675747871398926,-3.6757493019104004,-3.675750732421875,-3.675752878189087,-3.6757543087005615,-3.6757562160491943,-3.675758123397827,-3.67576003074646,-3.6757614612579346,-3.6757631301879883,-3.675764560699463,-3.6757662296295166,-3.6757681369781494,-3.675769090652466,-3.6757707595825195,-3.675771951675415,-3.6757733821868896,-3.675774574279785,-3.6757760047912598,-3.675776958465576,-3.675778388977051,-3.675779104232788,-3.675780773162842,-3.675781488418579,-3.6757829189300537,-3.675783634185791,-3.6757848262786865,-3.675786018371582,-3.6757872104644775,-3.675788402557373,-3.6757895946502686,-3.675790548324585,-3.6757917404174805,-3.6757924556732178,-3.6757936477661133,-3.6757943630218506,-3.675795555114746,-3.6757967472076416,-3.675797462463379,-3.675798177719116,-3.67579984664917,-3.6758005619049072,-3.6758012771606445,-3.675801992416382,-3.6758036613464355,-3.675804376602173],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-10.91303825378418,-10.91303539276123,-10.913030624389648,-10.913025856018066,-10.913026809692383,-10.913029670715332,-10.913030624389648,-10.913030624389648,-10.913032531738281,-10.913030624389648,-10.913030624389648,-10.913030624389648,-10.913028717041016,-10.913026809692383,-10.913023948669434,-10.913021087646484,-10.913021087646484,-10.913018226623535,-10.91301441192627,-10.913008689880371,-10.913003921508789,-10.91299819946289,-10.912992477416992,-10.912988662719727,-10.912981986999512,-10.912984848022461,-10.912985801696777,-10.912986755371094,-10.912986755371094,-10.912989616394043,-10.91298770904541,-10.912984848022461,-10.912983894348145,-10.912981033325195,-10.91297721862793,-10.91297435760498,-10.912971496582031,-10.912967681884766,-10.912964820861816,-10.912961959838867,-10.912959098815918,-10.912956237792969,-10.91295337677002,-10.912949562072754,-10.912949562072754,-10.91295051574707,-10.912951469421387,-10.912949562072754,-10.912949562072754,-10.91295051574707,-10.912951469421387,-10.912954330444336,-10.912956237792969,-10.912958145141602,-10.912959098815918,-10.91296100616455,-10.91296100616455,-10.91296100616455,-10.912959098815918,-10.912957191467285,-10.912954330444336,-10.912952423095703,-10.912949562072754,-10.912948608398438,-10.912947654724121,-10.912945747375488,-10.912943840026855,-10.912940979003906,-10.912939071655273,-10.91293716430664,-10.91293716430664,-10.91293716430664,-10.912936210632324,-10.912934303283691,-10.912932395935059,-10.91292953491211,-10.912927627563477,-10.912925720214844,-10.912922859191895,-10.912919998168945,-10.91291618347168,-10.91291618347168,-10.91291332244873,-10.912912368774414,-10.912910461425781,-10.912909507751465,-10.912908554077148,-10.912907600402832,-10.912904739379883,-10.912904739379883,-10.91290283203125,-10.91290283203125,-10.91290283203125,-10.912900924682617,-10.912899017333984,-10.912899017333984,-10.912898063659668,-10.912898063659668,-10.912898063659668,-10.912898063659668,-10.912898063659668,-10.912899017333984,-10.912899017333984,-10.9128999710083,-10.912901878356934,-10.912903785705566,-10.912903785705566,-10.9129056930542,-10.912909507751465,-10.912914276123047,-10.912917137145996,-10.912920951843262,-10.912923812866211,-10.91292667388916,-10.912931442260742,-10.91293716430664,-10.912940979003906,-10.912946701049805,-10.912949562072754,-10.912955284118652,-10.912959098815918,-10.9129638671875,-10.912968635559082,-10.912972450256348,-10.912976264953613,-10.912981033325195,-10.912984848022461,-10.912989616394043,-10.912993431091309,-10.912996292114258,-10.91300106048584,-10.913004875183105,-10.913007736206055,-10.913010597229004,-10.91301441192627,-10.913017272949219,-10.913019180297852,-10.913022994995117,-10.913026809692383,-10.913030624389648,-10.913034439086914,-10.913037300109863,-10.913040161132812,-10.913043022155762,-10.913047790527344,-10.913050651550293,-10.913053512573242,-10.913058280944824,-10.913061141967773,-10.913064956665039,-10.913068771362305,-10.91307258605957,-10.913076400756836,-10.913080215454102,-10.913082122802734,-10.913084030151367,-10.913087844848633,-10.913089752197266,-10.913091659545898,-10.913092613220215,-10.913093566894531,-10.913095474243164,-10.91309642791748,-10.91309642791748,-10.91309642791748,-10.91309642791748,-10.91309642791748,-10.91309642791748,-10.91309642791748,-10.91309642791748,-10.913095474243164,-10.913095474243164,-10.913093566894531,-10.913093566894531,-10.913092613220215,-10.913090705871582,-10.91308879852295,-10.913087844848633,-10.9130859375,-10.913084030151367,-10.913082122802734,-10.913079261779785,-10.913078308105469,-10.913076400756836,-10.913073539733887,-10.913071632385254,-10.913068771362305,-10.913066864013672,-10.913064956665039,-10.91306209564209,-10.913060188293457,-10.913057327270508,-10.913055419921875,-10.913053512573242,-10.913050651550293,-10.913049697875977,-10.913047790527344,-10.913045883178711,-10.913043022155762,-10.913042068481445,-10.913039207458496,-10.91303825378418,-10.91303539276123,-10.913033485412598,-10.913031578063965,-10.913030624389648,-10.913030624389648,-10.913028717041016,-10.9130277633667,-10.913026809692383,-10.91302490234375,-10.913022994995117,-10.913022994995117,-10.9130220413208,-10.913021087646484,-10.913020133972168,-10.913019180297852,-10.913019180297852,-10.913018226623535,-10.913018226623535,-10.913017272949219,-10.913015365600586,-10.913015365600586,-10.91301441192627,-10.91301441192627,-10.91301441192627,-10.913012504577637,-10.913012504577637,-10.913010597229004,-10.913009643554688,-10.913008689880371,-10.913007736206055,-10.913006782531738,-10.913006782531738,-10.913004875183105,-10.913004875183105,-10.913003921508789,-10.913002014160156,-10.913002014160156,-10.913002014160156,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.913000106811523,-10.913000106811523,-10.912999153137207,-10.912999153137207,-10.912999153137207,-10.91299819946289],"y":[23.639747619628906,23.639724731445312,23.63970375061035,23.639673233032227,23.63965606689453,23.639636993408203,23.639617919921875,23.63959503173828,23.639583587646484,23.639564514160156,23.639545440673828,23.6395263671875,23.639511108398438,23.639493942260742,23.639474868774414,23.639455795288086,23.639446258544922,23.63943099975586,23.639413833618164,23.6393985748291,23.63938331604004,23.639366149902344,23.639354705810547,23.639345169067383,23.639333724975586,23.63932228088379,23.639310836791992,23.639305114746094,23.639291763305664,23.6392822265625,23.639270782470703,23.63926124572754,23.63925552368164,23.639251708984375,23.639245986938477,23.639245986938477,23.63924217224121,23.63924217224121,23.63924217224121,23.63924217224121,23.63924217224121,23.63924217224121,23.639240264892578,23.639240264892578,23.639236450195312,23.63923454284668,23.63922882080078,23.63922691345215,23.639225006103516,23.63922119140625,23.639219284057617,23.639219284057617,23.639219284057617,23.63922119140625,23.63922119140625,23.63922119140625,23.639223098754883,23.639225006103516,23.639225006103516,23.639225006103516,23.639225006103516,23.639225006103516,23.639225006103516,23.63922691345215,23.63922882080078,23.63922882080078,23.639230728149414,23.639230728149414,23.63923454284668,23.63923454284668,23.639240264892578,23.63924217224121,23.639245986938477,23.639245986938477,23.639249801635742,23.639251708984375,23.639257431030273,23.639263153076172,23.63926887512207,23.6392765045166,23.6392822265625,23.63928985595703,23.639297485351562,23.63930320739746,23.639310836791992,23.63931655883789,23.639324188232422,23.63932991027832,23.639333724975586,23.63934326171875,23.63934898376465,23.63935661315918,23.639362335205078,23.639366149902344,23.639373779296875,23.63937759399414,23.63938331604004,23.639387130737305,23.639392852783203,23.6393985748291,23.639404296875,23.639408111572266,23.639415740966797,23.639423370361328,23.63943099975586,23.639436721801758,23.63944435119629,23.639448165893555,23.639455795288086,23.639461517333984,23.639469146728516,23.639474868774414,23.63947868347168,23.639482498168945,23.639488220214844,23.639493942260742,23.639501571655273,23.63950538635254,23.639511108398438,23.63951301574707,23.63951873779297,23.639522552490234,23.639528274536133,23.6395320892334,23.639535903930664,23.63953971862793,23.639543533325195,23.639549255371094,23.63955307006836,23.639554977416992,23.63956069946289,23.639564514160156,23.63956642150879,23.639570236206055,23.63957405090332,23.63957977294922,23.63958168029785,23.639585494995117,23.639591217041016,23.63959503173828,23.639598846435547,23.639604568481445,23.639610290527344,23.639616012573242,23.63962173461914,23.639629364013672,23.63963508605957,23.63964080810547,23.639646530151367,23.639652252197266,23.639659881591797,23.639665603637695,23.639671325683594,23.639677047729492,23.639684677124023,23.639690399169922,23.639698028564453,23.63970375061035,23.639707565307617,23.639713287353516,23.639719009399414,23.639724731445312,23.639728546142578,23.639732360839844,23.639738082885742,23.639741897583008,23.639745712280273,23.639747619628906,23.639751434326172,23.639753341674805,23.639755249023438,23.63975715637207,23.639759063720703,23.639760971069336,23.639760971069336,23.639760971069336,23.63976287841797,23.63976287841797,23.639766693115234,23.639766693115234,23.63976287841797,23.639759063720703,23.639760971069336,23.639760971069336,23.639759063720703,23.63975715637207,23.639753341674805,23.639751434326172,23.639747619628906,23.639745712280273,23.639741897583008,23.639738082885742,23.639732360839844,23.63973045349121,23.63972282409668,23.639720916748047,23.639713287353516,23.639707565307617,23.63970375061035,23.639698028564453,23.639692306518555,23.639686584472656,23.639680862426758,23.63967514038086,23.639667510986328,23.63966178894043,23.639659881591797,23.639652252197266,23.6396484375,23.6396427154541,23.639636993408203,23.639631271362305,23.63962745666504,23.63962173461914,23.639616012573242,23.639612197875977,23.639606475830078,23.63960075378418,23.639596939086914,23.639591217041016,23.63958740234375,23.63958168029785,23.639577865600586,23.63957405090332,23.639570236206055,23.63956642150879,23.639562606811523,23.639558792114258,23.639554977416992,23.639551162719727,23.639545440673828,23.639543533325195,23.63953971862793,23.63953971862793,23.63953399658203,23.6395320892334,23.639528274536133,23.639524459838867,23.639522552490234,23.63951873779297,23.639516830444336,23.639514923095703,23.639514923095703,23.639511108398438,23.639509201049805,23.639509201049805,23.639507293701172,23.63950538635254,23.639503479003906,23.639501571655273],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-27.802509307861328,-27.802539825439453,-27.802492141723633,-27.802431106567383,-27.8023738861084,-27.80232048034668,-27.80225944519043,-27.80221176147461,-27.802175521850586,-27.80210304260254,-27.802061080932617,-27.802001953125,-27.80194854736328,-27.80190086364746,-27.801834106445312,-27.80177879333496,-27.80173110961914,-27.80167579650879,-27.80162239074707,-27.80156898498535,-27.801513671875,-27.801454544067383,-27.8013916015625,-27.80135154724121,-27.80129623413086,-27.801252365112305,-27.80120086669922,-27.801143646240234,-27.801082611083984,-27.801034927368164,-27.800996780395508,-27.800941467285156,-27.80091094970703,-27.80084800720215,-27.800827026367188,-27.8007755279541,-27.800737380981445,-27.800697326660156,-27.8006534576416,-27.800601959228516,-27.80055809020996,-27.8005313873291,-27.80048179626465,-27.800430297851562,-27.800390243530273,-27.80038070678711,-27.800331115722656,-27.80028533935547,-27.80023765563965,-27.80020523071289,-27.800167083740234,-27.80014419555664,-27.80009651184082,-27.80006980895996,-27.800025939941406,-27.79999351501465,-27.79998016357422,-27.799793243408203,-27.800077438354492,-27.80004119873047,-27.79999351501465,-27.79994773864746,-27.799907684326172,-27.799867630004883,-27.79982566833496,-27.799785614013672,-27.799741744995117,-27.79970932006836,-27.79966926574707,-27.799640655517578,-27.799604415893555,-27.799571990966797,-27.799545288085938,-27.79952049255371,-27.79948616027832,-27.799455642700195,-27.79944610595703,-27.79940414428711,-27.79941177368164,-27.799388885498047,-27.79935646057129,-27.799341201782227,-27.79930877685547,-27.799285888671875,-27.79926109313965,-27.799230575561523,-27.79920768737793,-27.799182891845703,-27.799163818359375,-27.79915428161621,-27.79913330078125,-27.799121856689453,-27.799097061157227,-27.799091339111328,-27.799076080322266,-27.7990665435791,-27.799060821533203,-27.799036026000977,-27.799053192138672,-27.799047470092773,-27.799036026000977,-27.799026489257812,-27.799009323120117,-27.799007415771484,-27.798999786376953,-27.79899787902832,-27.798988342285156,-27.798988342285156,-27.798982620239258,-27.798982620239258,-27.79898452758789,-27.798986434936523,-27.79899024963379,-27.79899787902832,-27.798999786376953,-27.798999786376953,-27.799015045166016,-27.79901695251465,-27.79901123046875,-27.799057006835938,-27.799060821533203,-27.799070358276367,-27.798866271972656,-27.799299240112305,-27.799280166625977,-27.799283981323242,-27.79926300048828,-27.799245834350586,-27.799230575561523,-27.79921531677246,-27.799192428588867,-27.799179077148438,-27.799158096313477,-27.79914665222168,-27.79911994934082,-27.79912757873535,-27.79910659790039,-27.799087524414062,-27.7990665435791,-27.79904556274414,-27.799022674560547,-27.799007415771484,-27.798988342285156,-27.798969268798828,-27.7989559173584,-27.79893684387207,-27.79892349243164,-27.798912048339844,-27.798887252807617,-17.719541549682617,-27.798877716064453,-27.798866271972656,-27.798852920532227,-27.79883575439453,-27.79882049560547,-27.798810958862305,-27.798799514770508,-27.798778533935547,-27.798770904541016,-27.79875946044922,-27.798748016357422,-27.79873275756836,-27.79871940612793,-27.798707962036133,-27.79869842529297,-27.79868507385254,-27.79867935180664,-27.798664093017578,-27.798654556274414,-27.798641204833984,-27.798627853393555,-27.79861068725586,-27.798599243164062,-27.798583984375,-27.798564910888672,-27.798555374145508,-27.798540115356445,-27.798524856567383,-27.79850959777832,-27.798498153686523,-27.798484802246094,-27.79846954345703,-27.7984561920166,-27.798442840576172,-27.79844093322754,-27.798418045043945,-27.798398971557617,-27.79839515686035,-27.79837417602539,-27.79835319519043,-27.798309326171875,-27.79836654663086,-27.798337936401367,-27.798311233520508,-27.798282623291016,-27.79825210571289,-27.798227310180664,-27.798200607299805,-27.798171997070312,-27.798145294189453,-27.79811668395996,-27.798086166381836,-27.798059463500977,-27.79803466796875,-27.79800033569336,-27.7979736328125,-27.79794692993164,-27.797916412353516,-27.79789161682129,-27.797861099243164,-27.79783821105957,-27.797815322875977,-27.79778480529785,-27.79775619506836,-27.797731399536133,-27.79770278930664,-27.797672271728516,-27.79764747619629,-27.797622680664062,-27.797592163085938,-27.79756736755371,-27.79754066467285,-27.797515869140625,-27.797487258911133,-27.797460556030273,-27.797435760498047,-27.797409057617188,-27.79738426208496,-27.797359466552734,-27.797330856323242,-27.79730224609375,-27.797277450561523,-27.797250747680664,-27.797225952148438,-27.797199249267578,-27.797170639038086,-27.79714584350586,-27.7971248626709,-27.797100067138672,-27.797075271606445,-27.797048568725586,-27.79702377319336,-27.796998977661133,-27.796981811523438,-27.796953201293945,-27.796932220458984,-27.796905517578125,-27.7968807220459,-27.796855926513672,-27.796829223632812],"y":[-26.646106719970703,-26.64610481262207,-26.646120071411133,-26.646127700805664,-26.646141052246094,-26.646150588989258,-26.646163940429688,-26.646177291870117,-26.64618492126465,-26.646198272705078,-26.646209716796875,-26.64622688293457,-26.646236419677734,-26.646255493164062,-26.646270751953125,-26.646286010742188,-26.646303176879883,-26.64632225036621,-26.64634132385254,-26.646358489990234,-26.64637565612793,-26.64639663696289,-26.64640998840332,-26.64643096923828,-26.646448135375977,-26.64646339416504,-26.646474838256836,-26.64649200439453,-26.646512985229492,-26.64652442932129,-26.64653778076172,-26.646549224853516,-26.64655876159668,-26.646575927734375,-26.646575927734375,-26.6466007232666,-26.646610260009766,-26.646617889404297,-26.646629333496094,-26.646644592285156,-26.64665412902832,-26.64666175842285,-26.64667320251465,-26.646684646606445,-26.646696090698242,-26.64670753479004,-26.64672088623047,-26.646730422973633,-26.646739959716797,-26.646753311157227,-26.646759033203125,-26.646766662597656,-26.64678382873535,-26.646793365478516,-26.646804809570312,-26.64681625366211,-26.64682388305664,-26.6468563079834,-26.64681625366211,-26.646827697753906,-26.646839141845703,-26.6468505859375,-26.646860122680664,-26.64687156677246,-26.646881103515625,-26.646896362304688,-26.646900177001953,-26.646909713745117,-26.646921157836914,-26.64693260192871,-26.646936416625977,-26.646947860717773,-26.646949768066406,-26.646963119506836,-26.646968841552734,-26.646970748901367,-26.646976470947266,-26.646984100341797,-26.646987915039062,-26.646989822387695,-26.646995544433594,-26.646997451782227,-26.647005081176758,-26.647008895874023,-26.647016525268555,-26.647016525268555,-26.647024154663086,-26.64702796936035,-26.647031784057617,-26.647037506103516,-26.647037506103516,-26.64703941345215,-26.64703941345215,-26.64703941345215,-26.647043228149414,-26.64703941345215,-26.64703941345215,-26.647043228149414,-26.647035598754883,-26.647035598754883,-26.647035598754883,-26.64703369140625,-26.647031784057617,-26.647031784057617,-26.647031784057617,-26.64702606201172,-26.64702606201172,-26.647024154663086,-26.64702033996582,-26.647018432617188,-26.64702033996582,-26.647010803222656,-26.647016525268555,-26.647010803222656,-26.647010803222656,-26.64700698852539,-26.647003173828125,-26.647003173828125,-26.647005081176758,-26.64699363708496,-26.646997451782227,-26.646997451782227,-26.647029876708984,-26.646961212158203,-26.646968841552734,-26.6469669342041,-26.646974563598633,-26.64697265625,-26.64698028564453,-26.646982192993164,-26.646989822387695,-26.646995544433594,-26.64699935913086,-26.647005081176758,-26.647010803222656,-26.647010803222656,-26.64702033996582,-26.647024154663086,-26.64702796936035,-26.64703369140625,-26.647035598754883,-26.64704132080078,-26.64704704284668,-26.647052764892578,-26.64706039428711,-26.64706802368164,-26.647069931030273,-26.647075653076172,-26.647075653076172,-28.321306228637695,-26.64708137512207,-26.647092819213867,-26.647092819213867,-26.647096633911133,-26.647098541259766,-26.64710235595703,-26.647109985351562,-26.64710807800293,-26.647113800048828,-26.647117614746094,-26.647117614746094,-26.64712142944336,-26.647123336791992,-26.647127151489258,-26.647136688232422,-26.647130966186523,-26.647130966186523,-26.64713478088379,-26.647138595581055,-26.647140502929688,-26.647140502929688,-26.647136688232422,-26.647144317626953,-26.647144317626953,-26.64714813232422,-26.647146224975586,-26.64714813232422,-26.64714813232422,-26.64714813232422,-26.647153854370117,-26.647153854370117,-26.647153854370117,-26.64714813232422,-26.647153854370117,-26.647157669067383,-26.647151947021484,-26.647153854370117,-26.647153854370117,-26.64715576171875,-26.64715003967285,-26.64715576171875,-26.647144317626953,-26.64714813232422,-26.64714813232422,-26.64715003967285,-26.64715003967285,-26.64715003967285,-26.647151947021484,-26.64715576171875,-26.647159576416016,-26.64716339111328,-26.647159576416016,-26.647165298461914,-26.647165298461914,-26.647165298461914,-26.647171020507812,-26.647171020507812,-26.647174835205078,-26.647174835205078,-26.647178649902344,-26.647178649902344,-26.647186279296875,-26.647180557250977,-26.647186279296875,-26.647192001342773,-26.64719009399414,-26.647193908691406,-26.647199630737305,-26.647197723388672,-26.64720344543457,-26.647207260131836,-26.647212982177734,-26.647212982177734,-26.647216796875,-26.6472225189209,-26.647228240966797,-26.647228240966797,-26.647232055664062,-26.64723777770996,-26.647247314453125,-26.647245407104492,-26.64725112915039,-26.647254943847656,-26.647260665893555,-26.647262573242188,-26.647268295288086,-26.647274017333984,-26.647281646728516,-26.647287368774414,-26.647289276123047,-26.647293090820312,-26.647300720214844,-26.647308349609375,-26.64731788635254,-26.64731788635254,-26.647321701049805,-26.64732551574707,-26.647329330444336,-26.647335052490234,-26.6473388671875],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[20.775354385375977,20.775348663330078,20.775346755981445,20.775341033935547,20.775339126586914,20.775333404541016,20.775327682495117,20.775325775146484,20.775318145751953,20.775310516357422,20.775306701660156,20.775299072265625,20.77528953552246,20.775279998779297,20.7752742767334,20.775264739990234,20.775259017944336,20.775249481201172,20.775245666503906,20.775239944458008,20.775236129760742,20.775232315063477,20.775226593017578,20.775224685668945,20.775218963623047,20.77521514892578,20.775209426879883,20.775205612182617,20.77520179748535,20.77519989013672,20.77519989013672,20.775197982788086,20.77519989013672,20.775197982788086,20.775197982788086,20.775197982788086,20.775196075439453,20.775196075439453,20.77519416809082,20.77519416809082,20.77519416809082,20.77519416809082,20.77519416809082,20.775197982788086,20.77519989013672,20.775203704833984,20.775209426879883,20.77521514892578,20.775217056274414,20.775224685668945,20.775232315063477,20.775238037109375,20.775245666503906,20.775251388549805,20.77526092529297,20.7752685546875,20.775278091430664,20.775285720825195,20.77529525756836,20.77530288696289,20.775310516357422,20.775320053100586,20.775327682495117,20.77533531188965,20.77534294128418,20.77535057067871,20.775360107421875,20.775367736816406,20.775375366210938,20.775386810302734,20.775390625,20.7753963470459,20.775402069091797,20.775409698486328,20.775415420532227,20.775419235229492,20.77542495727539,20.775432586669922,20.775442123413086,20.775449752807617,20.775455474853516,20.775461196899414,20.775468826293945,20.775476455688477,20.775484085083008,20.775495529174805,20.77550506591797,20.775510787963867,20.77552032470703,20.775529861450195,20.77553939819336,20.775548934936523,20.775556564331055,20.775564193725586,20.77557373046875,20.775583267211914,20.775592803955078,20.77560043334961,20.77560806274414,20.775615692138672,20.775625228881836,20.775632858276367,20.775638580322266,20.775644302368164,20.775650024414062,20.77565574645996,20.775659561157227,20.775663375854492,20.77566909790039,20.775671005249023,20.77567481994629,20.775678634643555,20.775680541992188,20.775684356689453,20.775684356689453,20.775686264038086,20.775686264038086,20.77569007873535,20.77569007873535,20.775693893432617,20.775693893432617,20.775693893432617,20.775693893432617,20.775693893432617,20.775693893432617,20.775693893432617,20.775693893432617,20.775693893432617,20.775693893432617,20.77569007873535,20.77569007873535,20.775686264038086,20.775686264038086,20.775684356689453,20.775680541992188,20.775678634643555,20.77567481994629,20.775671005249023,20.77566909790039,20.775663375854492,20.77566146850586,20.775657653808594,20.77565574645996,20.775651931762695,20.77564811706543,20.775646209716797,20.77564239501953,20.7756404876709,20.775636672973633,20.775632858276367,20.775630950927734,20.77562713623047,20.775623321533203,20.775617599487305,20.775615692138672,20.775611877441406,20.775609970092773,20.775606155395508,20.775602340698242,20.775598526000977,20.77559471130371,20.775592803955078,20.775588989257812,20.775585174560547,20.775583267211914,20.77557945251465,20.77557945251465,20.775577545166016,20.77557373046875,20.775569915771484,20.77556800842285,20.775564193725586,20.775562286376953,20.775558471679688,20.775556564331055,20.775554656982422,20.77555274963379,20.775548934936523,20.77554702758789,20.775543212890625,20.77553939819336,20.775537490844727,20.775537490844727,20.77553367614746,20.775531768798828,20.775527954101562,20.775524139404297,20.775522232055664,20.77552032470703,20.775516510009766,20.775514602661133,20.7755126953125,20.775508880615234,20.775508880615234,20.7755069732666,20.7755069732666,20.775503158569336,20.775501251220703,20.775497436523438,20.775495529174805,20.775493621826172,20.775493621826172,20.77549171447754,20.775489807128906,20.775487899780273,20.77548599243164,20.77548599243164,20.77548599243164,20.775484085083008,20.775482177734375,20.775480270385742,20.775480270385742,20.77547836303711,20.77547836303711,20.775476455688477,20.775476455688477,20.775474548339844,20.775474548339844,20.775474548339844,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.775470733642578,20.775470733642578,20.775470733642578,20.775470733642578,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.77547264099121,20.775474548339844],"y":[17.331745147705078,17.331743240356445,17.33173942565918,17.331737518310547,17.33173370361328,17.331729888916016,17.331727981567383,17.331727981567383,17.331727981567383,17.331724166870117,17.33172607421875,17.33172607421875,17.33172607421875,17.33172607421875,17.331727981567383,17.331727981567383,17.331727981567383,17.33172607421875,17.331724166870117,17.331724166870117,17.331724166870117,17.331724166870117,17.331722259521484,17.331722259521484,17.33172035217285,17.33172035217285,17.331714630126953,17.331714630126953,17.33171272277832,17.331710815429688,17.331707000732422,17.33170509338379,17.33170509338379,17.331701278686523,17.331697463989258,17.331697463989258,17.331695556640625,17.331695556640625,17.33169174194336,17.33169174194336,17.33169174194336,17.331689834594727,17.331689834594727,17.331689834594727,17.331687927246094,17.331684112548828,17.331684112548828,17.33168601989746,17.331684112548828,17.33168601989746,17.331684112548828,17.331684112548828,17.33168601989746,17.331684112548828,17.331682205200195,17.331682205200195,17.331682205200195,17.331680297851562,17.331682205200195,17.331684112548828,17.331682205200195,17.331680297851562,17.331684112548828,17.331682205200195,17.331684112548828,17.331684112548828,17.331684112548828,17.331684112548828,17.331684112548828,17.331684112548828,17.331684112548828,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331680297851562,17.331680297851562,17.331682205200195,17.331680297851562,17.331676483154297,17.331676483154297,17.331676483154297,17.33167266845703,17.331674575805664,17.33167266845703,17.331668853759766,17.331668853759766,17.331666946411133,17.3316650390625,17.331663131713867,17.331661224365234,17.3316593170166,17.33165740966797,17.33165740966797,17.33165740966797,17.33165740966797,17.331653594970703,17.331653594970703,17.331653594970703,17.33165168762207,17.33165168762207,17.331649780273438,17.331647872924805,17.331647872924805,17.331647872924805,17.331647872924805,17.331649780273438,17.331649780273438,17.33165168762207,17.33165168762207,17.33165168762207,17.33165168762207,17.331655502319336,17.331655502319336,17.33165740966797,17.3316593170166,17.3316593170166,17.331661224365234,17.331663131713867,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.331663131713867,17.331661224365234,17.331661224365234,17.331661224365234,17.331661224365234,17.3316593170166,17.3316593170166,17.3316593170166,17.3316593170166,17.3316593170166,17.3316593170166,17.33165740966797,17.33165740966797,17.331655502319336,17.331655502319336,17.331655502319336,17.33165168762207,17.33165168762207,17.33165168762207,17.33165168762207,17.33165168762207,17.33165168762207,17.33165168762207,17.33165168762207,17.33165168762207,17.33165168762207,17.331653594970703,17.331653594970703,17.331655502319336,17.331655502319336,17.33165740966797,17.33165740966797,17.3316593170166,17.3316593170166,17.3316593170166,17.3316593170166,17.331661224365234,17.331663131713867,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.331666946411133,17.331666946411133,17.331666946411133,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.33167266845703,17.33167266845703,17.33167266845703,17.33167266845703,17.33167266845703,17.33167266845703,17.331674575805664,17.331674575805664,17.331674575805664,17.331676483154297,17.331676483154297,17.331676483154297,17.331676483154297,17.33167839050293,17.331680297851562,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331682205200195,17.331680297851562,17.331680297851562,17.331680297851562,17.331680297851562,17.33167839050293,17.331676483154297],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-33.79688262939453,-33.79689407348633,-33.796905517578125,-33.796913146972656,-33.79692459106445,-33.796932220458984,-33.796939849853516,-33.79695129394531,-33.79696273803711,-33.79696273803711,-33.79697799682617,-33.796993255615234,-33.797000885009766,-33.797000885009766,-33.79701614379883,-33.79701614379883,-33.797027587890625,-33.79703140258789,-33.797035217285156,-33.79704284667969,-33.79705047607422,-33.79706573486328,-33.79706573486328,-33.79707717895508,-33.79708480834961,-33.79709243774414,-33.79710006713867,-33.79710388183594,-33.7971076965332,-33.797119140625,-33.79712677001953,-33.79713439941406,-33.79714584350586,-33.79715347290039,-33.79716110229492,-33.79717254638672,-33.797183990478516,-33.79719161987305,-33.79719543457031,-33.797203063964844,-33.797210693359375,-33.79721450805664,-33.79722595214844,-33.7972297668457,-33.797237396240234,-33.797245025634766,-33.79725646972656,-33.79726028442383,-33.79726791381836,-33.797271728515625,-33.79727554321289,-33.79728317260742,-33.79729080200195,-33.79729461669922,-33.797306060791016,-33.797306060791016,-33.79731369018555,-33.79732131958008,-33.79731750488281,-33.79732131958008,-33.79732894897461,-33.797325134277344,-33.797325134277344,-33.79732131958008,-33.79731750488281,-33.79731369018555,-33.79731369018555,-33.79732131958008,-33.79731750488281,-33.79730987548828,-33.79731369018555,-33.79730224609375,-33.797306060791016,-33.79730224609375,-33.797298431396484,-33.79729080200195,-33.79728698730469,-33.79728698730469,-33.797279357910156,-33.797279357910156,-33.797271728515625,-33.797271728515625,-33.797264099121094,-33.79725646972656,-33.79724884033203,-33.7972412109375,-33.79723358154297,-33.79722595214844,-33.797218322753906,-33.797210693359375,-33.79719924926758,-33.79719543457031,-33.797183990478516,-33.797176361083984,-33.79716873168945,-33.797157287597656,-33.79714584350586,-33.79713439941406,-33.797122955322266,-33.797115325927734,-33.7971076965332,-33.797088623046875,-33.79707336425781,-33.797061920166016,-33.79705047607422,-33.79703903198242,-33.797027587890625,-33.79701232910156,-33.79700469970703,-33.7969970703125,-33.79698181152344,-33.796974182128906,-33.79696273803711,-33.79695129394531,-33.796939849853516,-33.79692840576172,-33.79692077636719,-33.796905517578125,-33.79689407348633,-33.7968864440918,-33.796875,-33.79686737060547,-33.79685592651367,-33.79684829711914,-33.79684066772461,-33.79683303833008,-33.79682540893555,-33.79681396484375,-33.796810150146484,-33.79680252075195,-33.79679489135742,-33.796791076660156,-33.796783447265625,-33.79677963256836,-33.796775817871094,-33.79677200317383,-33.79676818847656,-33.7967643737793,-33.79676055908203,-33.79676055908203,-33.796756744384766,-33.796749114990234,-33.79674530029297,-33.7967414855957,-33.79673767089844,-33.7967414855957,-33.79673767089844,-33.79673385620117,-33.79673767089844,-33.79673385620117,-33.79673385620117,-33.796730041503906,-33.79673385620117,-33.79673385620117,-33.79673385620117,-33.79673385620117,-33.79673385620117,-33.796730041503906,-33.796730041503906,-33.796730041503906,-33.79673385620117,-33.79673385620117,-33.79673385620117,-33.79673767089844,-33.79673767089844,-33.7967414855957,-33.79674530029297,-33.79674530029297,-33.796749114990234,-33.796749114990234,-33.7967529296875,-33.796756744384766,-33.796756744384766,-33.796756744384766,-33.79676055908203,-33.79676055908203,-33.79676818847656,-33.79676818847656,-33.796775817871094,-33.79677963256836,-33.79677963256836,-33.79678726196289,-33.796791076660156,-33.79679489135742,-33.79679870605469,-33.79680252075195,-33.79680633544922,-33.79680633544922,-33.79681396484375,-33.796817779541016,-33.79682159423828,-33.79682159423828,-33.79682922363281,-33.796836853027344,-33.79684066772461,-33.796844482421875,-33.796852111816406,-33.796852111816406,-33.79685974121094,-33.79685974121094,-33.79686737060547,-33.79686737060547,-33.796871185302734,-33.796878814697266,-33.796878814697266,-33.79688262939453,-33.7968864440918,-33.79689025878906,-33.79689407348633,-33.796897888183594,-33.79690170288086,-33.796905517578125,-33.79690933227539,-33.796913146972656,-33.796913146972656,-33.79691696166992,-33.79692077636719,-33.79692459106445,-33.79692840576172,-33.79692840576172,-33.796932220458984,-33.79693603515625,-33.796939849853516,-33.79694366455078,-33.79694366455078,-33.79694747924805,-33.79695129394531,-33.79695510864258,-33.79695510864258,-33.796958923339844,-33.796958923339844,-33.79696273803711,-33.79696273803711,-33.79696273803711,-33.796966552734375,-33.79697036743164,-33.796974182128906,-33.796974182128906,-33.796974182128906,-33.796974182128906,-33.79697799682617,-33.79698181152344,-33.79698181152344,-33.79698181152344,-33.79698181152344,-33.7969856262207,-33.7969856262207,-33.7969856262207,-33.79698944091797,-33.79698944091797],"y":[-1.465326189994812,-1.4653593301773071,-1.465391993522644,-1.465423822402954,-1.4654573202133179,-1.4654890298843384,-1.465519666671753,-1.4655499458312988,-1.4655793905258179,-1.46560800075531,-1.4656362533569336,-1.4656649827957153,-1.4656922817230225,-1.4657187461853027,-1.465745449066162,-1.4657704830169678,-1.465796947479248,-1.4658225774765015,-1.4658467769622803,-1.4658703804016113,-1.4658935070037842,-1.465915560722351,-1.4659368991851807,-1.4659568071365356,-1.465976595878601,-1.4659959077835083,-1.4660149812698364,-1.4660327434539795,-1.4660488367080688,-1.4660639762878418,-1.4660786390304565,-1.4660934209823608,-1.4661078453063965,-1.4661208391189575,-1.466132640838623,-1.4661439657211304,-1.4661556482315063,-1.466166615486145,-1.4661768674850464,-1.466186761856079,-1.466195821762085,-1.4662054777145386,-1.4662144184112549,-1.4662225246429443,-1.466231346130371,-1.466239333152771,-1.4662480354309082,-1.4662556648254395,-1.466264009475708,-1.466271162033081,-1.4662773609161377,-1.4662827253341675,-1.4662878513336182,-1.4662939310073853,-1.4663009643554688,-1.4663071632385254,-1.4663137197494507,-1.4663200378417969,-1.4663254022598267,-1.466330647468567,-1.466335654258728,-1.4663395881652832,-1.4663439989089966,-1.466347336769104,-1.466349720954895,-1.4663517475128174,-1.466353416442871,-1.4663550853729248,-1.4663586616516113,-1.4663621187210083,-1.4663655757904053,-1.4663677215576172,-1.46636962890625,-1.4663712978363037,-1.4663727283477783,-1.466374158859253,-1.4663748741149902,-1.4663758277893066,-1.4663764238357544,-1.4663771390914917,-1.4663782119750977,-1.4663794040679932,-1.466380000114441,-1.4663809537887573,-1.4663816690444946,-1.4663817882537842,-1.4663816690444946,-1.4663814306259155,-1.4663811922073364,-1.4663808345794678,-1.466380000114441,-1.4663796424865723,-1.4663788080215454,-1.4663784503936768,-1.466378927230835,-1.4663794040679932,-1.4663795232772827,-1.4663794040679932,-1.466378927230835,-1.4663783311843872,-1.46637761592865,-1.4663764238357544,-1.4663749933242798,-1.4663727283477783,-1.4663701057434082,-1.4663668870925903,-1.4663634300231934,-1.466359257698059,-1.4663548469543457,-1.4663499593734741,-1.4663448333740234,-1.4663392305374146,-1.4663335084915161,-1.4663280248641968,-1.4663220643997192,-1.4663158655166626,-1.4663093090057373,-1.4663026332855225,-1.4662960767745972,-1.4662894010543823,-1.4662824869155884,-1.4662754535675049,-1.4662680625915527,-1.4662610292434692,-1.4662542343139648,-1.4662474393844604,-1.4662405252456665,-1.466233730316162,-1.4662268161773682,-1.4662197828292847,-1.4662128686904907,-1.4662059545516968,-1.4661989212036133,-1.4661917686462402,-1.4661846160888672,-1.4661775827407837,-1.4661706686019897,-1.4661635160446167,-1.4661563634872437,-1.4661492109298706,-1.466141939163208,-1.466134786605835,-1.4661273956298828,-1.466120958328247,-1.4661145210266113,-1.466107964515686,-1.4661014080047607,-1.4660948514938354,-1.466088056564331,-1.4660813808441162,-1.4660747051239014,-1.466068148612976,-1.4660615921020508,-1.4660552740097046,-1.4660489559173584,-1.4660428762435913,-1.4660369157791138,-1.4660307168960571,-1.4660249948501587,-1.4660192728042603,-1.4660136699676514,-1.466008186340332,-1.4660025835037231,-1.4659972190856934,-1.4659920930862427,-1.465986967086792,-1.4659819602966309,-1.4659769535064697,-1.4659721851348877,-1.4659677743911743,-1.465963363647461,-1.4659591913223267,-1.4659550189971924,-1.4659513235092163,-1.4659477472305298,-1.4659444093704224,-1.4659415483474731,-1.4659388065338135,-1.465936303138733,-1.465933918952942,-1.46593177318573,-1.4659298658370972,-1.4659279584884644,-1.4659268856048584,-1.465925931930542,-1.4659250974655151,-1.465924620628357,-1.4659241437911987,-1.4659236669540405,-1.4659233093261719,-1.4659230709075928,-1.4659231901168823,-1.4659234285354614,-1.46592378616333,-1.4659242630004883,-1.465924859046936,-1.465925693511963,-1.4659266471862793,-1.4659277200698853,-1.4659289121627808,-1.4659301042556763,-1.4659316539764404,-1.4659333229064941,-1.4659351110458374,-1.4659370183944702,-1.4659390449523926,-1.465941309928894,-1.4659435749053955,-1.465945839881897,-1.465948224067688,-1.465950608253479,-1.4659531116485596,-1.465955376625061,-1.4659578800201416,-1.4659603834152222,-1.4659630060195923,-1.4659656286239624,-1.4659686088562012,-1.4659714698791504,-1.4659744501113892,-1.465977668762207,-1.465980887413025,-1.4659842252731323,-1.4659876823425293,-1.4659911394119263,-1.465994954109192,-1.4659987688064575,-1.4660025835037231,-1.4660066366195679,-1.4660110473632812,-1.4660154581069946,-1.4660199880599976,-1.466024398803711,-1.4660289287567139,-1.4660335779190063,-1.4660381078720093,-1.4660425186157227,-1.4660471677780151,-1.4660518169403076,-1.466056227684021,-1.4660606384277344,-1.4660648107528687,-1.466068983078003,-1.466072916984558,-1.4660768508911133,-1.4660804271697998,-1.4660840034484863,-1.4660876989364624,-1.4660911560058594,-1.4660943746566772],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}]},{"data":[{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-17.71932029724121,-17.7193603515625,-17.719404220581055,-17.719438552856445,-17.719478607177734,-17.71951675415039,-17.71955680847168,-17.719593048095703,-17.719629287719727,-17.719667434692383,-17.719707489013672,-17.719741821289062,-17.71977424621582,-17.719810485839844,-17.7198486328125,-17.71988296508789,-17.71991539001465,-17.71994972229004,-17.719982147216797,-17.720016479492188,-17.720048904418945,-17.720081329345703,-17.720109939575195,-17.720144271850586,-17.72017478942871,-17.7202091217041,-17.72023582458496,-17.720264434814453,-17.720294952392578,-17.720327377319336,-17.72035789489746,-17.72038459777832,-17.720409393310547,-17.720439910888672,-17.72046661376953,-17.720495223999023,-17.72052001953125,-17.720548629760742,-17.7205753326416,-17.72060203552246,-17.720630645751953,-17.72065544128418,-17.72068214416504,-17.720703125,-17.720727920532227,-17.720754623413086,-17.720779418945312,-17.72080421447754,-17.720829010009766,-17.720849990844727,-17.720874786376953,-17.720895767211914,-17.720922470092773,-17.7209415435791,-17.720964431762695,-17.72098731994629,-17.721006393432617,-17.721025466918945,-17.721050262451172,-17.721071243286133,-17.72109603881836,-17.721115112304688,-17.72113609313965,-17.72115707397461,-17.721176147460938,-17.721195220947266,-17.721216201782227,-17.721237182617188,-17.72125816345215,-17.721277236938477,-17.721296310424805,-17.721315383911133,-17.72133445739746,-17.721357345581055,-17.721370697021484,-17.72138786315918,-17.72140884399414,-17.721426010131836,-17.721445083618164,-17.721464157104492,-17.72148323059082,-17.721498489379883,-17.721515655517578,-17.721534729003906,-17.7215518951416,-17.72157096862793,-17.721588134765625,-17.72160530090332,-17.721622467041016,-17.721637725830078,-17.721654891967773,-17.7216739654541,-17.721689224243164,-17.721708297729492,-17.72172737121582,-17.721744537353516,-17.721757888793945,-17.721773147583008,-17.721790313720703,-17.721805572509766,-17.72182273864746,-17.721839904785156,-17.72185516357422,-17.72187042236328,-17.72188949584961,-17.721904754638672,-17.721920013427734,-17.721935272216797,-17.721948623657227,-17.72196388244629,-17.721981048583984,-17.72199821472168,-17.722015380859375,-17.722028732299805,-17.7220458984375,-17.722061157226562,-17.722076416015625,-17.722091674804688,-17.722110748291016,-17.722126007080078,-17.72214126586914,-17.722158432006836,-17.7221736907959,-17.722190856933594,-17.722206115722656,-17.72222328186035,-17.722238540649414,-17.72225570678711,-17.722272872924805,-17.722291946411133,-17.72231101989746,-17.722328186035156,-17.72234344482422,-17.722360610961914,-17.722379684448242,-17.722396850585938,-17.722415924072266,-17.722431182861328,-17.722448348999023,-17.722463607788086,-17.722482681274414,-17.722497940063477,-17.722515106201172,-17.722532272338867,-17.722549438476562,-17.722564697265625,-17.722583770751953,-17.722597122192383,-17.722618103027344,-17.72263526916504,-17.7226505279541,-17.722667694091797,-17.722684860229492,-17.722702026367188,-17.722719192504883,-17.722736358642578,-17.72275161743164,-17.722768783569336,-17.72278594970703,-17.722801208496094,-17.722820281982422,-17.722837448120117,-17.722854614257812,-17.722869873046875,-17.72288703918457,-17.7229061126709,-17.722923278808594,-17.722938537597656,-17.72295570373535,-17.722972869873047,-17.722990036010742,-17.723007202148438,-17.723024368286133,-17.723041534423828,-17.723058700561523,-17.72307586669922,-17.723093032836914,-17.723112106323242,-17.723129272460938,-17.723146438598633,-17.723163604736328,-17.723180770874023,-17.72319793701172,-17.723217010498047,-17.723234176635742,-17.72325325012207,-17.7232723236084,-17.723289489746094,-17.723308563232422,-17.723325729370117,-17.723344802856445,-17.72336196899414,-17.72338104248047,-17.723398208618164,-17.72341537475586,-17.723434448242188,-17.723453521728516,-17.723472595214844,-17.723491668701172,-17.723508834838867,-17.723526000976562,-17.723546981811523,-17.72356605529785,-17.723583221435547,-17.723602294921875,-17.72361946105957,-17.7236385345459,-17.723657608032227,-17.723676681518555,-17.723695755004883,-17.72371482849121,-17.72373390197754,-17.723751068115234,-17.723772048950195,-17.72378921508789,-17.72380828857422,-17.72382926940918,-17.723848342895508,-17.723867416381836,-17.723886489868164,-17.723907470703125,-17.723928451538086,-17.723947525024414,-17.723968505859375,-17.723987579345703,-17.72400665283203,-17.72402572631836,-17.724044799804688,-17.72406578063965,-17.724084854125977,-17.724103927612305,-17.724124908447266,-17.724143981933594,-17.724164962768555,-17.724184036254883,-17.72420310974121,-17.724224090576172,-17.724245071411133,-17.72426414489746,-17.724287033081055,-17.72430992126465,-17.72432518005371,-17.724348068237305,-17.724369049072266,-17.72438621520996,-17.724407196044922,-17.724430084228516,-17.724449157714844,-17.72446632385254,-17.7244873046875],"y":[-28.321346282958984,-28.321340560913086,-28.321338653564453,-28.321332931518555,-28.321331024169922,-28.32132911682129,-28.32132339477539,-28.321317672729492,-28.32131004333496,-28.32131004333496,-28.32130241394043,-28.321298599243164,-28.3212947845459,-28.321290969848633,-28.321285247802734,-28.321279525756836,-28.321273803710938,-28.321266174316406,-28.321264266967773,-28.32125473022461,-28.321252822875977,-28.321256637573242,-28.321245193481445,-28.32124137878418,-28.32123565673828,-28.32123374938965,-28.32122802734375,-28.32122230529785,-28.321210861206055,-28.321205139160156,-28.32120132446289,-28.321203231811523,-28.321197509765625,-28.321191787719727,-28.32118034362793,-28.321176528930664,-28.32117462158203,-28.321170806884766,-28.3211612701416,-28.321155548095703,-28.321149826049805,-28.321144104003906,-28.321142196655273,-28.321136474609375,-28.321134567260742,-28.321125030517578,-28.32111930847168,-28.32111358642578,-28.321107864379883,-28.321107864379883,-28.32109832763672,-28.321090698242188,-28.321086883544922,-28.321081161499023,-28.321077346801758,-28.321075439453125,-28.321069717407227,-28.32105827331543,-28.32105827331543,-28.32105255126953,-28.32105255126953,-28.321043014526367,-28.321041107177734,-28.321033477783203,-28.321025848388672,-28.321025848388672,-28.321020126342773,-28.321014404296875,-28.321006774902344,-28.321001052856445,-28.320999145507812,-28.320993423461914,-28.320993423461914,-28.320985794067383,-28.320974349975586,-28.320972442626953,-28.320968627929688,-28.320960998535156,-28.320960998535156,-28.32095718383789,-28.320953369140625,-28.320947647094727,-28.320940017700195,-28.32093620300293,-28.320932388305664,-28.320926666259766,-28.320924758911133,-28.320920944213867,-28.320919036865234,-28.320913314819336,-28.320905685424805,-28.320905685424805,-28.320903778076172,-28.320898056030273,-28.320894241333008,-28.32088851928711,-28.32088279724121,-28.320878982543945,-28.320877075195312,-28.320873260498047,-28.32086944580078,-28.32086753845215,-28.320863723754883,-28.320858001708984,-28.320858001708984,-28.320858001708984,-28.32085418701172,-28.320852279663086,-28.320842742919922,-28.32084083557129,-28.320837020874023,-28.32083511352539,-28.320833206176758,-28.32082748413086,-28.320825576782227,-28.32082176208496,-28.320819854736328,-28.320816040039062,-28.320816040039062,-28.320810317993164,-28.320810317993164,-28.320804595947266,-28.320804595947266,-28.320798873901367,-28.3207950592041,-28.3207950592041,-28.320791244506836,-28.320785522460938,-28.320785522460938,-28.320781707763672,-28.32077980041504,-28.32077980041504,-28.32077980041504,-28.320775985717773,-28.320772171020508,-28.320770263671875,-28.32076644897461,-28.32076644897461,-28.32076072692871,-28.32076072692871,-28.32076072692871,-28.320749282836914,-28.320749282836914,-28.320743560791016,-28.320743560791016,-28.320737838745117,-28.320737838745117,-28.320728302001953,-28.32073211669922,-28.320728302001953,-28.320724487304688,-28.32071876525879,-28.32071876525879,-28.320716857910156,-28.320716857910156,-28.320716857910156,-28.320711135864258,-28.320707321166992,-28.320703506469727,-28.320701599121094,-28.320701599121094,-28.320695877075195,-28.320695877075195,-28.32069206237793,-28.32069206237793,-28.320688247680664,-28.32068634033203,-28.320682525634766,-28.320680618286133,-28.320676803588867,-28.320676803588867,-28.3206729888916,-28.3206729888916,-28.32067108154297,-28.320667266845703,-28.32066535949707,-28.32066535949707,-28.320663452148438,-28.320661544799805,-28.32065773010254,-28.320655822753906,-28.320650100708008,-28.320648193359375,-28.320646286010742,-28.320642471313477,-28.320642471313477,-28.320640563964844,-28.320636749267578,-28.320632934570312,-28.32063102722168,-28.320627212524414,-28.32062530517578,-28.320621490478516,-28.320621490478516,-28.32061767578125,-28.320615768432617,-28.32061195373535,-28.32061004638672,-28.320606231689453,-28.320602416992188,-28.32059669494629,-28.320602416992188,-28.320600509643555,-28.320594787597656,-28.320594787597656,-28.320587158203125,-28.320587158203125,-28.320581436157227,-28.320581436157227,-28.320575714111328,-28.320575714111328,-28.32056999206543,-28.32056999206543,-28.32056427001953,-28.32056427001953,-28.320556640625,-28.320556640625,-28.3205509185791,-28.3205509185791,-28.32054901123047,-28.320545196533203,-28.320545196533203,-28.320539474487305,-28.320539474487305,-28.32053565979004,-28.320533752441406,-28.320528030395508,-28.320524215698242,-28.320520401000977,-28.320520401000977,-28.320518493652344,-28.320514678955078,-28.320512771606445,-28.320505142211914,-28.320505142211914,-28.320505142211914,-28.320497512817383,-28.32049560546875,-28.320493698120117,-28.320493698120117,-28.320491790771484,-28.320484161376953,-28.320480346679688,-28.320480346679688,-28.320472717285156,-28.32046890258789,-28.320466995239258,-28.320463180541992,-28.320457458496094,-28.320453643798828],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.456666946411133,18.456666946411133,18.4566707611084,18.4566707611084,18.45667266845703,18.45667266845703,18.456676483154297,18.456676483154297,18.456680297851562,18.456680297851562,18.456682205200195,18.456682205200195,18.45668601989746,18.45668601989746,18.456687927246094,18.456687927246094,18.456687927246094,18.456689834594727,18.45669174194336,18.45669174194336,18.456695556640625,18.456695556640625,18.456695556640625,18.456695556640625,18.456697463989258,18.456697463989258,18.45669937133789,18.45669937133789,18.456701278686523,18.456701278686523,18.456701278686523,18.456701278686523,18.456701278686523,18.456703186035156,18.456703186035156,18.456703186035156,18.456703186035156,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.45670509338379,18.456703186035156,18.456703186035156,18.456703186035156,18.456703186035156,18.456703186035156,18.456701278686523,18.456701278686523,18.456701278686523,18.456701278686523,18.45669937133789,18.45669937133789,18.45669937133789,18.456697463989258,18.456697463989258,18.456695556640625,18.456695556640625,18.456695556640625,18.45669174194336,18.45669174194336,18.45669174194336,18.456687927246094,18.456687927246094,18.456687927246094,18.45668601989746,18.456684112548828,18.456682205200195,18.456682205200195,18.456680297851562,18.456680297851562,18.45667839050293,18.456676483154297,18.456674575805664,18.45667266845703,18.45667266845703,18.4566707611084,18.456668853759766,18.456666946411133,18.456666946411133,18.4566650390625,18.4566650390625,18.4566650390625,18.456661224365234,18.456661224365234,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.456655502319336,18.456653594970703,18.45665168762207,18.456649780273438,18.456649780273438,18.456647872924805,18.456647872924805,18.456645965576172,18.456645965576172,18.456645965576172,18.45664405822754,18.45664405822754,18.456642150878906,18.456640243530273,18.456640243530273,18.456640243530273,18.45663833618164,18.45663833618164,18.45663833618164,18.45663833618164,18.456634521484375,18.456634521484375,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.45663070678711,18.45663070678711,18.45663070678711,18.45663070678711,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.45662498474121,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.456626892089844,18.45663070678711,18.45663070678711,18.45663070678711,18.45663070678711,18.45663070678711,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456632614135742,18.456636428833008,18.456636428833008,18.45663833618164,18.45663833618164,18.45663833618164,18.45663833618164,18.45663833618164,18.45663833618164,18.456640243530273,18.456640243530273,18.456640243530273,18.456642150878906,18.456642150878906,18.45664405822754,18.45664405822754,18.45664405822754,18.456645965576172,18.456645965576172,18.456645965576172,18.456645965576172,18.456647872924805,18.456647872924805,18.456649780273438,18.456649780273438,18.456649780273438,18.456649780273438,18.456649780273438,18.45665168762207,18.45665168762207,18.45665168762207,18.45665168762207,18.45665168762207,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.456655502319336,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797,18.45665740966797],"y":[-3.67580509185791,-3.6758058071136475,-3.675806999206543,-3.6758079528808594,-3.6758086681365967,-3.675809383392334,-3.6758105754852295,-3.675811290740967,-3.675812005996704,-3.6758131980895996,-3.675813913345337,-3.675814628601074,-3.6758155822753906,-3.675816297531128,-3.6758170127868652,-3.6758177280426025,-3.67581844329834,-3.6758193969726562,-3.6758196353912354,-3.6758203506469727,-3.675821304321289,-3.6758220195770264,-3.6758222579956055,-3.6758227348327637,-3.675823211669922,-3.675823450088501,-3.6758244037628174,-3.6758246421813965,-3.6758251190185547,-3.675825357437134,-3.675825834274292,-3.675825834274292,-3.67582631111145,-3.6758265495300293,-3.6758265495300293,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758272647857666,-3.6758270263671875,-3.6758265495300293,-3.6758265495300293,-3.6758265495300293,-3.67582631111145,-3.675825834274292,-3.675825834274292,-3.675825357437134,-3.6758251190185547,-3.6758251190185547,-3.6758246421813965,-3.6758244037628174,-3.675823926925659,-3.675823450088501,-3.6758227348327637,-3.6758220195770264,-3.6758220195770264,-3.675821304321289,-3.675821304321289,-3.6758203506469727,-3.6758196353912354,-3.675818920135498,-3.67581844329834,-3.6758177280426025,-3.6758174896240234,-3.675816535949707,-3.6758158206939697,-3.6758155822753906,-3.675814628601074,-3.675814390182495,-3.675813674926758,-3.6758127212524414,-3.675812005996704,-3.675811290740967,-3.6758105754852295,-3.675809860229492,-3.675808906555176,-3.6758081912994385,-3.6758079528808594,-3.675806999206543,-3.675806760787964,-3.6758058071136475,-3.67580509185791,-3.675804376602173,-3.6758036613464355,-3.6758029460906982,-3.675801992416382,-3.6758017539978027,-3.6758010387420654,-3.6758005619049072,-3.67579984664917,-3.6757991313934326,-3.675798177719116,-3.675797939300537,-3.675797462463379,-3.6757967472076416,-3.6757960319519043,-3.675795555114746,-3.675795316696167,-3.6757943630218506,-3.6757936477661133,-3.675793409347534,-3.675792932510376,-3.6757924556732178,-3.6757922172546387,-3.6757915019989014,-3.6757915019989014,-3.675790548324585,-3.675790548324585,-3.6757898330688477,-3.6757898330688477,-3.6757891178131104,-3.6757891178131104,-3.675788640975952,-3.675788402557373,-3.675788402557373,-3.675787925720215,-3.675787925720215,-3.675787925720215,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757867336273193,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.6757874488830566,-3.675787925720215,-3.675787925720215,-3.675787925720215,-3.675787925720215,-3.675788402557373,-3.675788402557373,-3.675788402557373,-3.675788640975952,-3.6757891178131104,-3.6757891178131104,-3.6757891178131104,-3.6757895946502686,-3.6757895946502686,-3.6757898330688477,-3.6757898330688477,-3.675790309906006,-3.675790309906006,-3.675790548324585,-3.675790548324585,-3.675791025161743,-3.675791025161743,-3.6757915019989014,-3.6757915019989014,-3.6757917404174805,-3.6757922172546387,-3.6757922172546387,-3.6757922172546387,-3.6757924556732178,-3.675792932510376,-3.675792932510376,-3.675792932510376,-3.675793409347534,-3.6757936477661133,-3.6757936477661133,-3.6757941246032715,-3.6757943630218506,-3.675794839859009,-3.675795316696167,-3.675795316696167,-3.675795555114746,-3.6757960319519043,-3.6757960319519043,-3.6757960319519043,-3.6757962703704834,-3.6757967472076416,-3.6757967472076416,-3.6757972240448,-3.675797462463379,-3.675797939300537,-3.675798177719116,-3.675798177719116,-3.6757986545562744,-3.6757991313934326,-3.6757991313934326,-3.6757991313934326,-3.6757993698120117,-3.67579984664917,-3.67579984664917,-3.67579984664917,-3.675800085067749,-3.6758005619049072,-3.6758005619049072,-3.6758005619049072,-3.6758010387420654,-3.6758012771606445,-3.6758012771606445,-3.6758012771606445,-3.6758012771606445,-3.6758017539978027,-3.6758017539978027,-3.6758017539978027,-3.6758017539978027,-3.675801992416382,-3.675801992416382,-3.675801992416382,-3.67580246925354,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758029460906982,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773,-3.6758031845092773],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.912996292114258,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.91299819946289,-10.912999153137207,-10.912999153137207,-10.912999153137207,-10.912999153137207,-10.913000106811523,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.91300106048584,-10.913002014160156,-10.913002014160156,-10.913002014160156,-10.913002014160156,-10.913002014160156,-10.913002014160156,-10.913002967834473,-10.913002967834473,-10.913002967834473,-10.913003921508789,-10.913003921508789,-10.913003921508789,-10.913003921508789,-10.913004875183105,-10.913004875183105,-10.913004875183105,-10.913004875183105,-10.913004875183105,-10.913005828857422,-10.913006782531738,-10.913006782531738,-10.913006782531738,-10.913006782531738,-10.913007736206055,-10.913007736206055,-10.913008689880371,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.91301155090332,-10.913012504577637,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.91301441192627,-10.91301441192627,-10.91301441192627,-10.913016319274902,-10.913016319274902,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913020133972168,-10.913020133972168,-10.913021087646484,-10.913021087646484,-10.913021087646484,-10.913021087646484,-10.9130220413208,-10.9130220413208,-10.9130220413208,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913023948669434,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.913022994995117,-10.9130220413208,-10.9130220413208,-10.9130220413208,-10.9130220413208,-10.913021087646484,-10.913021087646484,-10.913021087646484,-10.913021087646484,-10.913020133972168,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913019180297852,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913017272949219,-10.913016319274902,-10.913016319274902,-10.913016319274902,-10.913016319274902,-10.913015365600586,-10.913015365600586,-10.91301441192627,-10.91301441192627,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913013458251953,-10.913012504577637,-10.913012504577637,-10.91301155090332,-10.91301155090332,-10.91301155090332,-10.91301155090332,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913010597229004,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688,-10.913009643554688],"y":[23.639501571655273,23.639501571655273,23.63949966430664,23.63949966430664,23.63949966430664,23.63949966430664,23.639497756958008,23.639497756958008,23.639497756958008,23.639493942260742,23.639493942260742,23.639493942260742,23.639493942260742,23.639493942260742,23.639493942260742,23.639493942260742,23.639495849609375,23.639495849609375,23.639495849609375,23.639495849609375,23.639495849609375,23.63949966430664,23.63949966430664,23.63949966430664,23.63949966430664,23.63949966430664,23.639501571655273,23.639501571655273,23.639501571655273,23.639503479003906,23.639503479003906,23.63950538635254,23.639507293701172,23.639507293701172,23.639507293701172,23.639509201049805,23.639509201049805,23.639511108398438,23.63951301574707,23.63951301574707,23.639514923095703,23.639516830444336,23.639516830444336,23.639516830444336,23.63951873779297,23.63951873779297,23.639522552490234,23.639522552490234,23.639524459838867,23.639524459838867,23.639524459838867,23.6395263671875,23.639528274536133,23.639530181884766,23.6395320892334,23.6395320892334,23.6395320892334,23.639535903930664,23.639535903930664,23.639537811279297,23.63953971862793,23.63953971862793,23.63953971862793,23.639541625976562,23.639543533325195,23.639543533325195,23.63954734802246,23.63954734802246,23.639549255371094,23.639549255371094,23.639549255371094,23.63955307006836,23.63955307006836,23.639554977416992,23.639554977416992,23.639554977416992,23.639556884765625,23.63956069946289,23.63956069946289,23.639562606811523,23.639562606811523,23.639564514160156,23.639564514160156,23.63956642150879,23.639568328857422,23.639568328857422,23.639568328857422,23.639572143554688,23.639572143554688,23.639572143554688,23.63957405090332,23.63957405090332,23.639575958251953,23.639575958251953,23.639577865600586,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.63958168029785,23.63958168029785,23.639583587646484,23.639585494995117,23.639585494995117,23.639585494995117,23.639585494995117,23.639585494995117,23.63958740234375,23.63958740234375,23.63958740234375,23.63958740234375,23.63958740234375,23.63958740234375,23.639589309692383,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.63959312438965,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639591217041016,23.639589309692383,23.639589309692383,23.639589309692383,23.639589309692383,23.639589309692383,23.63958740234375,23.63958740234375,23.639585494995117,23.639585494995117,23.639585494995117,23.639585494995117,23.639583587646484,23.639583587646484,23.63958168029785,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.63957977294922,23.639577865600586,23.639575958251953,23.63957405090332,23.63957405090332,23.639572143554688,23.639572143554688,23.639572143554688,23.639572143554688,23.639572143554688,23.639570236206055,23.639568328857422,23.639568328857422,23.63956642150879,23.63956642150879,23.63956642150879,23.63956642150879,23.639564514160156,23.639562606811523,23.639562606811523,23.639562606811523,23.639562606811523,23.639562606811523,23.639562606811523,23.63956069946289,23.63956069946289,23.63956069946289,23.63956069946289,23.63956069946289,23.639558792114258,23.639558792114258,23.639558792114258,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992,23.639554977416992],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-27.796791076660156,-27.79676628112793,-27.79674530029297,-27.796724319458008,-27.79669761657715,-27.796674728393555,-27.796653747558594,-27.796632766723633,-27.796602249145508,-27.796585083007812,-27.796560287475586,-27.796539306640625,-27.796510696411133,-27.796493530273438,-27.79647445678711,-27.796449661254883,-27.796428680419922,-27.796409606933594,-27.796388626098633,-27.796367645263672,-27.79634666442871,-27.79632568359375,-27.796306610107422,-27.79628562927246,-27.7962646484375,-27.796245574951172,-27.796220779418945,-27.79619789123535,-27.796178817749023,-27.796157836914062,-27.796138763427734,-27.79612159729004,-27.79610252380371,-27.796079635620117,-27.796056747436523,-27.796039581298828,-27.796022415161133,-27.796005249023438,-27.795984268188477,-27.795969009399414,-27.795949935913086,-27.795930862426758,-27.795913696289062,-27.7958927154541,-27.795873641967773,-27.79585838317871,-27.795839309692383,-27.795822143554688,-27.79580307006836,-27.79578399658203,-27.79576873779297,-27.795751571655273,-27.795734405517578,-27.795713424682617,-27.795698165893555,-27.795677185058594,-27.795665740966797,-27.79564094543457,-27.79562759399414,-27.795612335205078,-27.79559326171875,-27.79557991027832,-27.79555892944336,-27.79553985595703,-27.79552459716797,-27.79550552368164,-27.795490264892578,-27.795467376708984,-27.795455932617188,-27.795433044433594,-27.795413970947266,-27.795398712158203,-27.79538345336914,-27.795366287231445,-27.795347213745117,-27.795331954956055,-27.795316696166992,-27.795297622680664,-27.7952823638916,-27.79526710510254,-27.79524803161621,-27.79523277282715,-27.795211791992188,-27.795196533203125,-27.795181274414062,-27.795166015625,-27.795148849487305,-27.795135498046875,-27.795114517211914,-27.79509925842285,-27.79508399963379,-27.795068740844727,-27.795053482055664,-27.795034408569336,-27.79501724243164,-27.79500389099121,-27.794984817504883,-27.794967651367188,-27.794952392578125,-27.794937133789062,-27.794921875,-27.794902801513672,-27.79488754272461,-27.79486846923828,-27.79485321044922,-27.794837951660156,-27.794818878173828,-27.794801712036133,-27.79478645324707,-27.794767379760742,-27.79475212097168,-27.79473304748535,-27.79471778869629,-27.794700622558594,-27.79468536376953,-27.794666290283203,-27.79465103149414,-27.794631958007812,-27.794612884521484,-27.794597625732422,-27.794578552246094,-27.7945613861084,-27.794540405273438,-27.79452896118164,-27.794509887695312,-27.794492721557617,-27.79447364807129,-27.794452667236328,-27.79443359375,-27.794414520263672,-27.794397354125977,-27.79437828063965,-27.79435920715332,-27.794342041015625,-27.794315338134766,-27.794296264648438,-27.794275283813477,-27.794254302978516,-27.79423713684082,-27.794219970703125,-27.794198989868164,-27.794179916381836,-27.794158935546875,-27.794139862060547,-27.79412078857422,-27.794103622436523,-27.794078826904297,-27.79405975341797,-27.794042587280273,-17.724519729614258,-27.794023513793945,-27.794002532958984,-27.793983459472656,-27.793964385986328,-27.793943405151367,-27.79392433166504,-27.793903350830078,-27.793886184692383,-27.793867111206055,-27.793848037719727,-27.793827056884766,-27.793806076049805,-27.793787002563477,-27.79376792907715,-27.793746948242188,-27.793725967407227,-27.7937068939209,-27.79368782043457,-27.79366683959961,-27.793649673461914,-27.79362678527832,-27.793609619140625,-27.79358673095703,-27.79356575012207,-27.793546676635742,-27.793529510498047,-27.793506622314453,-27.793485641479492,-27.793468475341797,-27.793445587158203,-27.793424606323242,-27.793405532836914,-27.79338836669922,-27.793365478515625,-27.793344497680664,-27.793325424194336,-27.793302536010742,-27.79328155517578,-27.793258666992188,-27.793241500854492,-27.7932186126709,-27.793197631835938,-27.79317855834961,-27.79315948486328,-27.793136596679688,-27.793115615844727,-27.7930965423584,-27.793075561523438,-27.793054580688477,-27.793031692504883,-27.793014526367188,-27.792991638183594,-27.7929744720459,-27.792951583862305,-27.79293441772461,-27.79291343688965,-27.79289436340332,-27.79287338256836,-27.792850494384766,-27.792829513549805,-27.792808532714844,-27.792789459228516,-27.792768478393555,-27.792747497558594,-27.79273223876953,-27.792709350585938,-27.792692184448242,-27.792673110961914,-27.792652130126953,-27.792633056640625,-27.792612075805664,-27.792593002319336,-27.792572021484375,-27.79254722595215,-27.792530059814453,-27.792510986328125,-27.792491912841797,-27.7924747467041,-27.792451858520508,-27.792434692382812,-27.79241180419922,-27.792390823364258,-27.792373657226562,-27.792354583740234,-27.792327880859375,-27.792308807373047,-27.79229164123535,-27.792272567749023,-27.792251586914062,-27.792232513427734,-27.792213439941406,-27.79219627380371,-27.792171478271484,-27.792152404785156,-27.79213523864746,-27.792112350463867,-27.792095184326172,-27.792076110839844,-27.792057037353516,-27.792036056518555],"y":[-26.64735221862793,-26.647357940673828,-26.647361755371094,-26.647367477416992,-26.647369384765625,-26.647375106811523,-26.647384643554688,-26.647384643554688,-26.647388458251953,-26.64739227294922,-26.647397994995117,-26.647401809692383,-26.64740753173828,-26.647411346435547,-26.647417068481445,-26.64742088317871,-26.64742660522461,-26.647432327270508,-26.64743995666504,-26.64743995666504,-26.647445678710938,-26.647449493408203,-26.6474552154541,-26.647459030151367,-26.647464752197266,-26.647470474243164,-26.64747428894043,-26.64746856689453,-26.647476196289062,-26.647480010986328,-26.647485733032227,-26.64748764038086,-26.64749526977539,-26.647491455078125,-26.647499084472656,-26.64750099182129,-26.647510528564453,-26.647510528564453,-26.64751625061035,-26.647520065307617,-26.647523880004883,-26.64752960205078,-26.64753532409668,-26.647533416748047,-26.647539138793945,-26.647539138793945,-26.647544860839844,-26.647550582885742,-26.647554397583008,-26.647558212280273,-26.647560119628906,-26.647563934326172,-26.64756965637207,-26.64756965637207,-26.647573471069336,-26.647573471069336,-26.647579193115234,-26.6475772857666,-26.6475830078125,-26.64759063720703,-26.647594451904297,-26.647594451904297,-26.647594451904297,-26.647598266601562,-26.647602081298828,-26.647607803344727,-26.64760971069336,-26.647607803344727,-26.647613525390625,-26.647615432739258,-26.647615432739258,-26.647619247436523,-26.647624969482422,-26.647624969482422,-26.647626876831055,-26.64763069152832,-26.64763641357422,-26.64763641357422,-26.647640228271484,-26.647642135620117,-26.647645950317383,-26.64764976501465,-26.64764976501465,-26.64765167236328,-26.64765167236328,-26.647659301757812,-26.647661209106445,-26.647661209106445,-26.647663116455078,-26.64766502380371,-26.64767074584961,-26.64767074584961,-26.647676467895508,-26.647674560546875,-26.647680282592773,-26.647680282592773,-26.647686004638672,-26.647686004638672,-26.647689819335938,-26.647693634033203,-26.647693634033203,-26.647695541381836,-26.6476993560791,-26.6476993560791,-26.647705078125,-26.647705078125,-26.6477108001709,-26.6477108001709,-26.64771842956543,-26.64771842956543,-26.647720336914062,-26.647724151611328,-26.64772605895996,-26.647729873657227,-26.647733688354492,-26.647735595703125,-26.64773941040039,-26.647741317749023,-26.64774513244629,-26.647747039794922,-26.64775276184082,-26.64775276184082,-26.64775848388672,-26.64776039123535,-26.647768020629883,-26.647768020629883,-26.64777374267578,-26.64777374267578,-26.64777946472168,-26.647785186767578,-26.647789001464844,-26.647790908813477,-26.647794723510742,-26.647798538208008,-26.647796630859375,-26.647798538208008,-26.647802352905273,-26.647804260253906,-26.647808074951172,-26.647811889648438,-26.647817611694336,-26.647817611694336,-26.647823333740234,-26.647823333740234,-26.647829055786133,-26.647829055786133,-26.6478328704834,-26.6478328704834,-26.647838592529297,-28.320451736450195,-26.647838592529297,-26.647846221923828,-26.647846221923828,-26.647851943969727,-26.647851943969727,-26.647857666015625,-26.647857666015625,-26.647863388061523,-26.647863388061523,-26.647871017456055,-26.647871017456055,-26.647876739501953,-26.647878646850586,-26.64788246154785,-26.647886276245117,-26.64788818359375,-26.64788818359375,-26.64789390563965,-26.64789390563965,-26.64790153503418,-26.64790153503418,-26.647907257080078,-26.647907257080078,-26.647912979125977,-26.647912979125977,-26.647918701171875,-26.647918701171875,-26.647926330566406,-26.64792823791504,-26.647932052612305,-26.647933959960938,-26.647937774658203,-26.64794158935547,-26.6479434967041,-26.647947311401367,-26.64794921875,-26.647951126098633,-26.647953033447266,-26.64795684814453,-26.647960662841797,-26.647966384887695,-26.647966384887695,-26.647974014282227,-26.647981643676758,-26.647977828979492,-26.647981643676758,-26.647987365722656,-26.647987365722656,-26.647994995117188,-26.64799690246582,-26.648000717163086,-26.648006439208984,-26.648006439208984,-26.648012161254883,-26.64801597595215,-26.64801597595215,-26.648025512695312,-26.648025512695312,-26.64803123474121,-26.648035049438477,-26.648035049438477,-26.648040771484375,-26.648040771484375,-26.648046493530273,-26.64805030822754,-26.648052215576172,-26.648059844970703,-26.6480655670166,-26.6480655670166,-26.6480712890625,-26.6480712890625,-26.6480770111084,-26.648080825805664,-26.64808464050293,-26.648086547851562,-26.648094177246094,-26.648094177246094,-26.648099899291992,-26.648099899291992,-26.64810562133789,-26.648109436035156,-26.648109436035156,-26.648115158081055,-26.648120880126953,-26.648117065429688,-26.648122787475586,-26.648122787475586,-26.648128509521484,-26.64813232421875,-26.648134231567383,-26.64813804626465,-26.648141860961914,-26.648143768310547,-26.648147583007812,-26.64815330505371,-26.648157119750977,-26.64815902709961,-26.648162841796875,-26.64816665649414,-26.648168563842773],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[20.775474548339844,20.775476455688477,20.775476455688477,20.775476455688477,20.775476455688477,20.775476455688477,20.77547836303711,20.77547836303711,20.77547836303711,20.77547836303711,20.77547836303711,20.77547836303711,20.775480270385742,20.775482177734375,20.775484085083008,20.775484085083008,20.77548599243164,20.77548599243164,20.77548599243164,20.775487899780273,20.775487899780273,20.775487899780273,20.775489807128906,20.77549171447754,20.775493621826172,20.775493621826172,20.775493621826172,20.775495529174805,20.775497436523438,20.77549934387207,20.775501251220703,20.775501251220703,20.775501251220703,20.775503158569336,20.775503158569336,20.7755069732666,20.7755069732666,20.7755069732666,20.775508880615234,20.775508880615234,20.775510787963867,20.7755126953125,20.775514602661133,20.775516510009766,20.775516510009766,20.7755184173584,20.77552032470703,20.77552032470703,20.775522232055664,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775527954101562,20.775527954101562,20.775531768798828,20.775531768798828,20.775531768798828,20.775531768798828,20.77553367614746,20.775535583496094,20.775535583496094,20.775537490844727,20.775537490844727,20.775537490844727,20.775537490844727,20.77553939819336,20.77553939819336,20.775541305541992,20.775541305541992,20.775543212890625,20.775543212890625,20.775543212890625,20.775543212890625,20.775545120239258,20.775545120239258,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.775548934936523,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.77554702758789,20.775545120239258,20.775545120239258,20.775543212890625,20.775543212890625,20.775543212890625,20.775541305541992,20.775541305541992,20.775541305541992,20.77553939819336,20.77553939819336,20.77553939819336,20.775537490844727,20.775537490844727,20.775537490844727,20.775537490844727,20.775535583496094,20.77553367614746,20.77553367614746,20.77553367614746,20.77553367614746,20.775531768798828,20.775531768798828,20.775531768798828,20.775531768798828,20.775531768798828,20.775529861450195,20.775529861450195,20.775529861450195,20.775527954101562,20.775527954101562,20.775527954101562,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775524139404297,20.775522232055664,20.775522232055664,20.775522232055664,20.7755184173584,20.7755184173584,20.7755184173584,20.7755184173584,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775514602661133,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.7755126953125,20.775514602661133,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.775516510009766,20.7755184173584,20.7755184173584,20.7755184173584,20.7755184173584,20.77552032470703,20.77552032470703,20.77552032470703,20.77552032470703,20.77552032470703],"y":[17.331676483154297,17.331676483154297,17.331676483154297,17.331676483154297,17.331676483154297,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.331674575805664,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.3316707611084,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.3316650390625,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331668853759766,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133,17.331666946411133],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","xy":[-1.4660975933074951,-1.4661005735397339,-1.4661036729812622,-1.4661065340042114,-1.4661091566085815,-1.4661117792129517,-1.4661142826080322,-1.4661167860031128,-1.4661189317703247,-1.4661211967468262,-1.4661232233047485,-1.4661251306533813,-1.4661270380020142,-1.4661288261413574,-1.4661303758621216,-1.4661319255828857,-1.4661333560943604,-1.466134786605835,-1.466135859489441,-1.4661370515823364,-1.4661381244659424,-1.4661390781402588,-1.4661400318145752,-1.466140866279602,-1.4661415815353394,-1.466142177581787,-1.4661427736282349,-1.4661433696746826,-1.4661437273025513,-1.46614408493042,-1.4661444425582886,-1.4661446809768677,-1.4661449193954468,-1.4661450386047363,-1.4661452770233154,-1.4661452770233154,-1.4661452770233154,-1.4661452770233154,-1.4661450386047363,-1.4661450386047363,-1.4661449193954468,-1.4661446809768677,-1.4661444425582886,-1.46614408493042,-1.4661438465118408,-1.4661434888839722,-1.466143012046814,-1.4661426544189453,-1.466142177581787,-1.466141700744629,-1.4661412239074707,-1.466140627861023,-1.4661401510238647,-1.466139554977417,-1.4661388397216797,-1.4661381244659424,-1.4661375284194946,-1.4661368131637573,-1.46613609790802,-1.4661352634429932,-1.4661345481872559,-1.4661338329315186,-1.4661328792572021,-1.4661320447921753,-1.4661312103271484,-1.4661303758621216,-1.4661294221878052,-1.4661285877227783,-1.466127634048462,-1.4661266803741455,-1.4661258459091187,-1.4661248922348022,-1.4661239385604858,-1.4661229848861694,-1.4661219120025635,-1.466120958328247,-1.4661197662353516,-1.4661188125610352,-1.4661178588867188,-1.4661167860031128,-1.4661158323287964,-1.4661146402359009,-1.4661136865615845,-1.466112494468689,-1.466111421585083,-1.4661104679107666,-1.466109275817871,-1.4661082029342651,-1.4661071300506592,-1.4661060571670532,-1.4661049842834473,-1.4661039113998413,-1.4661028385162354,-1.4661016464233398,-1.4661004543304443,-1.4660993814468384,-1.4660983085632324,-1.466097116470337,-1.4660961627960205,-1.466094970703125,-1.4660937786102295,-1.4660927057266235,-1.466091513633728,-1.4660903215408325,-1.4660892486572266,-1.4660882949829102,-1.4660871028900146,-1.4660860300064087,-1.4660849571228027,-1.4660837650299072,-1.4660826921463013,-1.4660816192626953,-1.466080665588379,-1.4660797119140625,-1.466078758239746,-1.4660775661468506,-1.4660766124725342,-1.4660757780075073,-1.466074824333191,-1.4660738706588745,-1.4660730361938477,-1.4660722017288208,-1.4660714864730835,-1.4660706520080566,-1.4660699367523193,-1.4660691022872925,-1.4660683870315552,-1.4660677909851074,-1.4660670757293701,-1.4660664796829224,-1.4660658836364746,-1.4660651683807373,-1.466064691543579,-1.466064214706421,-1.4660636186599731,-1.466063141822815,-1.4660626649856567,-1.466062307357788,-1.4660618305206299,-1.4660614728927612,-1.4660611152648926,-1.4660608768463135,-1.4660605192184448,-1.4660602807998657,-1.466059923171997,-1.4660598039627075,-1.4660595655441284,-1.4660594463348389,-1.4660592079162598,-1.4660592079162598,-1.4660590887069702,-1.4660589694976807,-1.4660589694976807,-1.4660589694976807,-1.4660589694976807,-1.4660589694976807,-1.4660590887069702,-1.4660592079162598,-1.4660593271255493,-1.4660594463348389,-1.4660595655441284,-1.466059684753418,-1.466059923171997,-1.4660602807998657,-1.4660604000091553,-1.4660606384277344,-1.4660608768463135,-1.4660613536834717,-1.4660617113113403,-1.4660619497299194,-1.466062307357788,-1.4660627841949463,-1.4660632610321045,-1.4660637378692627,-1.466064214706421,-1.4660645723342896,-1.4660650491714478,-1.4660656452178955,-1.4660661220550537,-1.466066598892212,-1.4660670757293701,-1.4660675525665283,-1.466068148612976,-1.4660687446594238,-1.4660693407058716,-1.4660699367523193,-1.466070532798767,-1.4660710096359253,-1.466071605682373,-1.4660722017288208,-1.4660727977752686,-1.4660733938217163,-1.466073989868164,-1.4660745859146118,-1.4660753011703491,-1.4660757780075073,-1.466076374053955,-1.4660769701004028,-1.4660776853561401,-1.466078281402588,-1.466078758239746,-1.4660793542861938,-1.4660799503326416,-1.466080665588379,-1.466081142425537,-1.4660817384719849,-1.4660823345184326,-1.4660828113555908,-1.4660834074020386,-1.4660840034484863,-1.4660844802856445,-1.4660850763320923,-1.46608567237854,-1.4660861492156982,-1.4660866260528564,-1.4660872220993042,-1.4660876989364624,-1.4660881757736206,-1.4660886526107788,-1.466089129447937,-1.4660896062850952,-1.4660900831222534,-1.4660905599594116,-1.4660909175872803,-1.466091275215149,-1.4660917520523071,-1.4660921096801758,-1.4660924673080444,-1.466092824935913,-1.4660931825637817,-1.4660935401916504,-1.46609365940094,-1.4660941362380981,-1.4660942554473877,-1.4660946130752563,-1.4660948514938354,-1.466095209121704,-1.4660953283309937,-1.4660955667495728,-1.4660956859588623,-1.4660959243774414,-1.466096043586731,-1.4660961627960205,-1.4660961627960205,-1.46609628200531,-1.4660964012145996,-1.4660965204238892,-1.4660965204238892,-1.4660966396331787,-1.4660966396331787],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}]}]);
                        }).then(function(){
                            
var gd = document.getElementById('da1905ce-daae-44fb-a7c9-5e15f048904c');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
</section>
</section>
<section id="optimized-implementation" class="level2">
<h2 class="anchored" data-anchor-id="optimized-implementation">Optimized Implementation</h2>
<p>The implementation above is roughly 1.5s which is slow. Let’s perform the algorithm on multiple data points simulataneously. We’ll then move the operations onto the GPU.</p>
<section id="calculate-distances-1" class="level3">
<h3 class="anchored" data-anchor-id="calculate-distances-1">Calculate Distances</h3>
<blockquote class="blockquote">
<p>For each data point <img src="https://latex.codecogs.com/png.latex?x"> in the dataset, calculate the distance between <img src="https://latex.codecogs.com/png.latex?x"> and every other data point in the dataset.</p>
</blockquote>
<div class="cell" data-outputid="53990085-1d07-4563-8dde-fccd9dab7a84" data-execution_count="40">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.clone()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> X.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>torch.Size([1500, 2])</code></pre>
</div>
</div>
<p>We’ll begin with a batch size of 8.</p>
<div class="cell" data-outputid="bddbd564-b7fd-431f-f62c-6cea8b0bf45e" data-execution_count="41">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb32-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[:bs, :]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>tensor([[-18.425, -32.047],
        [-19.443, -25.795],
        [-19.854, -28.213],
        [-17.302, -29.615],
        [-19.117, -26.414],
        [-15.678, -25.571],
        [-16.908, -26.670],
        [-17.445, -28.512]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="7f7020f8-b7bd-46c7-bac3-7d04a2b5ed1e" data-execution_count="42">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">x.shape, X.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>(torch.Size([8, 2]), torch.Size([1500, 2]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="aa33d309-9f2e-4a99-aa18-f84d75d3b299" data-execution_count="43">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">x[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :].shape, X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>(torch.Size([8, 1, 2]), torch.Size([1, 1500, 2]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="9d5050e9-9436-48fd-9270-fea031a26c5a" data-execution_count="44">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">x[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>tensor([[[  0.000,   0.000],
         [  1.018,  -6.253],
         [  1.429,  -3.834],
         ...,
         [ 10.646, -28.778],
         [ 13.661, -30.151],
         [ 12.676, -29.856]],

        [[ -1.018,   6.253],
         [  0.000,   0.000],
         [  0.411,   2.419],
         ...,
         [  9.629, -22.525],
         [ 12.644, -23.899],
         [ 11.658, -23.604]],

        [[ -1.429,   3.834],
         [ -0.411,  -2.419],
         [  0.000,   0.000],
         ...,
         [  9.217, -24.944],
         [ 12.232, -26.317],
         [ 11.247, -26.022]],

        ...,

        [[  2.748,   6.476],
         [  3.765,   0.223],
         [  4.177,   2.642],
         ...,
         [ 13.394, -22.302],
         [ 16.409, -23.675],
         [ 15.424, -23.380]],

        [[  1.517,   5.377],
         [  2.535,  -0.875],
         [  2.946,   1.543],
         ...,
         [ 12.164, -23.401],
         [ 15.179, -24.774],
         [ 14.193, -24.479]],

        [[  0.980,   3.535],
         [  1.997,  -2.718],
         [  2.409,  -0.299],
         ...,
         [ 11.626, -25.243],
         [ 14.641, -26.616],
         [ 13.656, -26.322]]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="74b432b9-7de8-4b73-ee8b-6ea625f8add2" data-execution_count="45">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">(x[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...]).shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>torch.Size([8, 1500, 2])</code></pre>
</div>
</div>
<div class="cell" data-outputid="28acbb4b-8dc3-4868-94df-f825ec83ec81" data-execution_count="46">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">dists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...]).square().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sqrt()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> dists, dists.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>(tensor([[ 0.000,  6.335,  4.092,  ..., 30.684, 33.102, 32.436],
         [ 6.335,  0.000,  2.453,  ..., 24.497, 27.037, 26.326],
         [ 4.092,  2.453,  0.000,  ..., 26.592, 29.021, 28.349],
         ...,
         [ 7.034,  3.772,  4.942,  ..., 26.015, 28.806, 28.010],
         [ 5.587,  2.682,  3.326,  ..., 26.373, 29.054, 28.296],
         [ 3.668,  3.373,  2.427,  ..., 27.792, 30.378, 29.653]]),
 torch.Size([8, 1500]))</code></pre>
</div>
</div>
</section>
<section id="calculate-weights-1" class="level3">
<h3 class="anchored" data-anchor-id="calculate-weights-1">Calculate Weights</h3>
<blockquote class="blockquote">
<p>Calculate weights for each point in the dataset by passing the calculated distances through the normal distribution.</p>
</blockquote>
<p>We can simplify the guassian kernel to a triangular kernel and still achieve the same results, with less computation.</p>
<div class="cell" data-outputid="8c7b2379-3a7b-4ba3-c0d1-3ae35ef10ad6" data-execution_count="50">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">plot_func(partial(gauss_kernel, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>                            <div id="45fb6bc9-3de1-4e73-bf9d-1adf5fa23c50" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("45fb6bc9-3de1-4e73-bf9d-1adf5fa23c50")) {                    Plotly.newPlot(                        "45fb6bc9-3de1-4e73-bf9d-1adf5fa23c50",                        [{"marker":{"color":"#d92310"},"x":[0.0,0.10101009905338287,0.20202019810676575,0.3030303120613098,0.4040403962135315,0.5050504803657532,0.6060606241226196,0.7070707082748413,0.808080792427063,0.9090908765792847,1.0101009607315063,1.111111044883728,1.2121212482452393,1.313131332397461,1.4141414165496826,1.5151515007019043,1.616161584854126,1.7171716690063477,1.8181817531585693,1.919191837310791,2.0202019214630127,2.1212120056152344,2.222222089767456,2.3232321739196777,2.4242424964904785,2.5252525806427,2.626262664794922,2.7272727489471436,2.8282828330993652,2.929292917251587,3.0303030014038086,3.1313130855560303,3.232323169708252,3.3333332538604736,3.4343433380126953,3.535353422164917,3.6363635063171387,3.7373735904693604,3.838383674621582,3.9393937587738037,4.040403842926025,4.141414165496826,4.242424011230469,4.3434343338012695,4.444444179534912,4.545454502105713,4.6464643478393555,4.747474670410156,4.848484992980957,4.9494948387146,5.0505051612854,5.151515007019043,5.252525329589844,5.3535356521606445,5.454545497894287,5.555555820465088,5.6565656661987305,5.757575988769531,5.858585834503174,5.959596157073975,6.060606002807617,6.161616325378418,6.2626261711120605,6.363636493682861,6.464646339416504,6.565656661987305,6.666666507720947,6.767676830291748,6.868687152862549,6.969696998596191,7.070707321166992,7.171717166900635,7.2727274894714355,7.373737335205078,7.474747657775879,7.5757575035095215,7.676767826080322,7.777777671813965,7.878787994384766,7.979797840118408,8.08080768585205,8.181818008422852,8.282828330993652,8.383838653564453,8.484848976135254,8.585858345031738,8.686868667602539,8.78787899017334,8.88888931274414,8.989898681640625,9.090909004211426,9.191919326782227,9.292929649353027,9.393939018249512,9.494949340820312,9.595959663391113,9.696969985961914,9.797979354858398,9.8989896774292,10.0],"y":[0.1595769077539444,0.15944671630859375,0.15905675292015076,0.15840892493724823,0.15750640630722046,0.15635357797145844,0.15495601296424866,0.15332044661045074,0.15145468711853027,0.1493675857782364,0.14706897735595703,0.144569531083107,0.14188076555728912,0.13901486992835999,0.13598470389842987,0.13280360400676727,0.1294853538274765,0.12604409456253052,0.12249413877725601,0.11885000765323639,0.11512617766857147,0.11133713275194168,0.10749714821577072,0.10362031310796738,0.09972036629915237,0.0958106592297554,0.09190409630537033,0.08801301568746567,0.08414918929338455,0.08032375574111938,0.07654716819524765,0.07282915711402893,0.06917870044708252,0.06560403108596802,0.06211260333657265,0.058711059391498566,0.055405277758836746,0.05220034345984459,0.04910058155655861,0.046109553426504135,0.043230101466178894,0.040464334189891815,0.037813760340213776,0.035279154777526855,0.03286076337099075,0.030558215454220772,0.028370661661028862,0.026296738535165787,0.024334654211997986,0.02248224802315235,0.020736966282129288,0.019095974043011665,0.017556147649884224,0.016114164143800735,0.014766494743525982,0.013509458862245083,0.01233927346765995,0.011252064257860184,0.01024391409009695,0.009310876950621605,0.008449019864201546,0.0076544322073459625,0.006923263426870108,0.006251719314604998,0.005636107642203569,0.005072826519608498,0.004558395594358444,0.0040894486010074615,0.0036627596709877253,0.0032752424012869596,0.0029239447321742773,0.0026060710661113262,0.002318964572623372,0.002060123486444354,0.0018271876033395529,0.0016179465455934405,0.0014303296338766813,0.0012624067021533847,0.0011123797157779336,0.0009785847505554557,0.000859478022903204,0.0007536362973041832,0.000659750250633806,0.0005766188842244446,0.0005031400360167027,0.00043830907088704407,0.00038120849058032036,0.0003310059546492994,0.0002869457530323416,0.0002483450516592711,0.0002145861799363047,0.00018511386588215828,0.00015942890604492277,0.00013708397455047816,0.00011767854448407888,0.00010085522080771625,8.629600051790476e-05,7.371818355750293e-05,6.287076394073665e-05,5.353209053282626e-05],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('45fb6bc9-3de1-4e73-bf9d-1adf5fa23c50');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<div class="cell" data-outputid="1546ea50-1408-43ad-caa7-3ca7f5fb274a" data-execution_count="51">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tri_kernel(x, bw): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bw).clamp_min(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>bw</span>
<span id="cb45-2">plot_func(partial(tri_kernel, bw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>                            <div id="b05a16f8-103b-40f1-903b-044a7c0a1329" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("b05a16f8-103b-40f1-903b-044a7c0a1329")) {                    Plotly.newPlot(                        "b05a16f8-103b-40f1-903b-044a7c0a1329",                        [{"marker":{"color":"#d92310"},"x":[0.0,0.10101009905338287,0.20202019810676575,0.3030303120613098,0.4040403962135315,0.5050504803657532,0.6060606241226196,0.7070707082748413,0.808080792427063,0.9090908765792847,1.0101009607315063,1.111111044883728,1.2121212482452393,1.313131332397461,1.4141414165496826,1.5151515007019043,1.616161584854126,1.7171716690063477,1.8181817531585693,1.919191837310791,2.0202019214630127,2.1212120056152344,2.222222089767456,2.3232321739196777,2.4242424964904785,2.5252525806427,2.626262664794922,2.7272727489471436,2.8282828330993652,2.929292917251587,3.0303030014038086,3.1313130855560303,3.232323169708252,3.3333332538604736,3.4343433380126953,3.535353422164917,3.6363635063171387,3.7373735904693604,3.838383674621582,3.9393937587738037,4.040403842926025,4.141414165496826,4.242424011230469,4.3434343338012695,4.444444179534912,4.545454502105713,4.6464643478393555,4.747474670410156,4.848484992980957,4.9494948387146,5.0505051612854,5.151515007019043,5.252525329589844,5.3535356521606445,5.454545497894287,5.555555820465088,5.6565656661987305,5.757575988769531,5.858585834503174,5.959596157073975,6.060606002807617,6.161616325378418,6.2626261711120605,6.363636493682861,6.464646339416504,6.565656661987305,6.666666507720947,6.767676830291748,6.868687152862549,6.969696998596191,7.070707321166992,7.171717166900635,7.2727274894714355,7.373737335205078,7.474747657775879,7.5757575035095215,7.676767826080322,7.777777671813965,7.878787994384766,7.979797840118408,8.08080768585205,8.181818008422852,8.282828330993652,8.383838653564453,8.484848976135254,8.585858345031738,8.686868667602539,8.78787899017334,8.88888931274414,8.989898681640625,9.090909004211426,9.191919326782227,9.292929649353027,9.393939018249512,9.494949340820312,9.595959663391113,9.696969985961914,9.797979354858398,9.8989896774292,10.0],"y":[1.0,0.9873737096786499,0.9747474789619446,0.9621211886405945,0.9494949579238892,0.9368686676025391,0.9242424368858337,0.9116161465644836,0.8989899158477783,0.8863636255264282,0.8737373948097229,0.8611111044883728,0.8484848737716675,0.8358585834503174,0.8232322931289673,0.810606062412262,0.7979798316955566,0.7853535413742065,0.7727272510528564,0.7601010203361511,0.7474747896194458,0.7348484992980957,0.7222222089767456,0.7095959782600403,0.6969696879386902,0.6843434572219849,0.6717171669006348,0.6590908765792847,0.6464646458625793,0.633838415145874,0.6212121248245239,0.6085858345031738,0.5959596037864685,0.5833333730697632,0.5707070827484131,0.558080792427063,0.5454545617103577,0.5328283309936523,0.5202020406723022,0.5075757503509521,0.4949495196342468,0.48232322931289673,0.4696969985961914,0.4570707082748413,0.444444477558136,0.4318181872367859,0.41919195652008057,0.40656566619873047,0.39393937587738037,0.38131314516067505,0.36868685483932495,0.35606062412261963,0.34343433380126953,0.33080804347991943,0.3181818127632141,0.305555522441864,0.2929292917251587,0.2803030014038086,0.26767677068710327,0.2550504803657532,0.24242424964904785,0.22979795932769775,0.21717172861099243,0.20454543828964233,0.191919207572937,0.17929291725158691,0.1666666865348816,0.1540403962135315,0.1414141058921814,0.12878787517547607,0.11616158485412598,0.10353535413742065,0.09090906381607056,0.07828283309936523,0.06565654277801514,0.053030312061309814,0.04040402173995972,0.027777791023254395,0.015151500701904297,0.0025252699851989746,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('b05a16f8-103b-40f1-903b-044a7c0a1329');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<div class="cell" data-outputid="dc34dede-9a59-44c0-974d-36067cf79bb7" data-execution_count="53">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit gauss_kernel(dists, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>332 µs ± 27.9 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</code></pre>
</div>
</div>
<div class="cell" data-outputid="ad0d8fa6-9b74-4391-eaff-5a39677dedea" data-execution_count="54">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit tri_kernel(dists, bw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>24.6 µs ± 656 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></pre>
</div>
</div>
<div class="cell" data-outputid="91601249-c9c7-4e82-9dd4-1575ece7da4f" data-execution_count="55">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">gauss_kernel(dists, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>), tri_kernel(dists, bw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>(tensor([[    0.160,     0.006,     0.042,  ...,     0.000,     0.000,     0.000],
         [    0.006,     0.160,     0.099,  ...,     0.000,     0.000,     0.000],
         [    0.042,     0.099,     0.160,  ...,     0.000,     0.000,     0.000],
         ...,
         [    0.003,     0.051,     0.023,  ...,     0.000,     0.000,     0.000],
         [    0.013,     0.090,     0.066,  ...,     0.000,     0.000,     0.000],
         [    0.054,     0.064,     0.100,  ...,     0.000,     0.000,     0.000]]),
 tensor([[1.000, 0.208, 0.489,  ..., 0.000, 0.000, 0.000],
         [0.208, 1.000, 0.693,  ..., 0.000, 0.000, 0.000],
         [0.489, 0.693, 1.000,  ..., 0.000, 0.000, 0.000],
         ...,
         [0.121, 0.529, 0.382,  ..., 0.000, 0.000, 0.000],
         [0.302, 0.665, 0.584,  ..., 0.000, 0.000, 0.000],
         [0.542, 0.578, 0.697,  ..., 0.000, 0.000, 0.000]]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="9f376038-dd77-4d6b-aa54-691758b21adc" data-execution_count="56">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri_kernel(dists, bw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ws.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>torch.Size([8, 1500])</code></pre>
</div>
</div>
</section>
<section id="move-the-points" class="level3">
<h3 class="anchored" data-anchor-id="move-the-points">Move the Points</h3>
<blockquote class="blockquote">
<p>Calculate the weighted average for all points in the dataset. This weighted average is the new location for <img src="https://latex.codecogs.com/png.latex?x"></p>
</blockquote>
<div class="cell" data-outputid="35dddd9e-c3bd-4d51-c71a-8413c56861bf" data-execution_count="59">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">ws.shape, X.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>(torch.Size([8, 1500]), torch.Size([1500, 2]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="40ef127f-6721-4cc6-aba0-ff40547b7409" data-execution_count="60">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">ws[..., <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>].shape, X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>(torch.Size([8, 1500, 1]), torch.Size([1, 1500, 2]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="ba30d8bf-e960-46b5-eac9-383b342846fb" data-execution_count="61">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">(ws[..., <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...]).shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>torch.Size([8, 1500, 2])</code></pre>
</div>
</div>
<div class="cell" data-outputid="4f743008-1361-4acb-f87a-26453fcc4682" data-execution_count="62">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">(ws[..., <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>torch.Size([8, 2])</code></pre>
</div>
</div>
<div class="cell" data-outputid="c507746b-c961-464f-e73f-4f89d46c77a3" data-execution_count="63">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit (ws[..., <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>125 µs ± 32.8 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></pre>
</div>
</div>
<p>Let’s have another look at formula for weighted average.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Csum%20wx%7D%7B%5Csum%20w%7D%0A"></p>
<p>The numerator is actually the <a href="https://en.wikipedia.org/wiki/Matrix_multiplication#Definition">definition</a> for matrix multiplication! Therefore we can speed up the operation above by using the <code>@</code> operator!</p>
<div class="cell" data-outputid="42717e32-9d2c-4180-afc6-4d8f0c2e84b9" data-execution_count="64">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>7.63 µs ± 177 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</code></pre>
</div>
</div>
<p>A roughly 40% speed up!</p>
<div class="cell" data-outputid="d5a01f1f-4469-4c68-dcdf-4617c383b687" data-execution_count="65">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ws.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>tensor([[-17.857, -29.269],
        [-18.770, -27.550],
        [-18.924, -28.182],
        [-17.472, -28.638],
        [-18.472, -27.755],
        [-16.909, -27.610],
        [-17.338, -27.890],
        [-17.535, -28.359]])</code></pre>
</div>
</div>
<p>And there you have it! We performed this algorithm on 8 data points simultaneously!</p>
<p>Let’s encapsulate the code so we can perform it over all data points and time it.</p>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">?<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="18cdb325-aedf-4906-ec77-7209bd0da188" data-execution_count="69">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">bs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>8</code></pre>
</div>
</div>
<div class="cell" data-outputid="16eaccff-16cf-4cff-854f-9f6b6a819167" data-execution_count="70">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1508</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<pre><code>1500</code></pre>
</div>
</div>
<div class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.clone()</span>
<span id="cb73-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span>
<span id="cb73-3">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb73-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, bs):</span>
<span id="cb73-5">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>(i, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs, n))</span>
<span id="cb73-6">    dists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X[s][:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...]).square().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sqrt()</span>
<span id="cb73-7">    ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> egauss_kernel(dists, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span>
<span id="cb73-8">    X[s] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ws.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="b0ccd3d2-c485-4a40-a37c-6a61dafc0cd6" data-execution_count="72">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">plot_data(centroids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, X, n_samples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>                            <div id="5de30267-e5a5-41d6-b2a1-bac7aaa8c2c3" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("5de30267-e5a5-41d6-b2a1-bac7aaa8c2c3")) {                    Plotly.newPlot(                        "5de30267-e5a5-41d6-b2a1-bac7aaa8c2c3",                        [{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-17.93345069885254,-18.674678802490234,-18.883930206298828,-17.391433715820312,-18.42670440673828,-16.60403060913086,-17.21559715270996,-17.476327896118164,-14.47259521484375,-17.845247268676758,-17.327695846557617,-16.297698974609375,-16.865022659301758,-17.9541072845459,-18.464862823486328,-18.490467071533203,-18.00127601623535,-16.07086181640625,-18.390918731689453,-18.572036743164062,-16.908161163330078,-15.216104507446289,-17.964868545532227,-16.240114212036133,-18.670194625854492,-17.80411148071289,-17.569761276245117,-16.83335304260254,-17.532194137573242,-15.96381950378418,-17.693391799926758,-18.839385986328125,-17.02113914489746,-15.846973419189453,-18.162370681762695,-18.288978576660156,-18.032209396362305,-17.12217903137207,-16.464893341064453,-16.982873916625977,-18.73305892944336,-18.008438110351562,-17.200572967529297,-16.90313720703125,-19.187217712402344,-14.258767127990723,-16.728065490722656,-17.210254669189453,-17.862979888916016,-16.99008560180664,-16.13878631591797,-16.198293685913086,-17.58769416809082,-17.00402069091797,-17.40186882019043,-17.561723709106445,-18.395347595214844,-17.59687042236328,-18.8662109375,-17.329626083374023,-17.292055130004883,-17.37352180480957,-16.573518753051758,-18.00495719909668,-17.010095596313477,-19.343252182006836,-17.477252960205078,-18.060070037841797,-17.346742630004883,-17.616220474243164,-15.412585258483887,-16.191944122314453,-17.906709671020508,-16.706912994384766,-17.4498348236084,-18.56003761291504,-18.78938865661621,-15.934283256530762,-16.806560516357422,-19.189435958862305,-20.05569839477539,-17.31553840637207,-16.680356979370117,-17.352750778198242,-18.27607536315918,-17.114940643310547,-16.846445083618164,-18.598426818847656,-17.56830406188965,-17.734344482421875,-17.31606101989746,-19.40069580078125,-18.466285705566406,-16.058996200561523,-17.556026458740234,-17.64699363708496,-16.108600616455078,-17.03436851501465,-18.1562557220459,-16.85558319091797,-16.505878448486328,-17.2246150970459,-17.270233154296875,-17.042829513549805,-15.782342910766602,-16.983661651611328,-17.049501419067383,-17.445518493652344,-19.41733169555664,-18.051944732666016,-17.5989990234375,-16.43100929260254,-17.33142852783203,-17.250823974609375,-16.95625877380371,-17.81572151184082,-16.53846549987793,-17.241857528686523,-17.149410247802734,-17.584270477294922,-17.213232040405273,-18.977371215820312,-18.00925064086914,-16.442176818847656,-21.554244995117188,-21.241262435913086,-18.978361129760742,-17.680997848510742,-18.215208053588867,-17.044918060302734,-17.244691848754883,-17.83055305480957,-18.749080657958984,-16.68599510192871,-17.256572723388672,-18.733068466186523,-17.492477416992188,-20.533737182617188,-18.87369728088379,-16.71506690979004,-18.213655471801758,-17.94037628173828,-17.290922164916992,-16.677209854125977,-17.301652908325195,-16.814613342285156,-17.306983947753906,-16.908214569091797,-17.921627044677734,-17.595523834228516,-16.378629684448242,-18.070274353027344,-16.53360366821289,-17.75689125061035,-18.572154998779297,-17.51020050048828,-17.255023956298828,-19.56728172302246,-16.579744338989258,-17.278657913208008,-18.31166648864746,-17.511125564575195,-18.443099975585938,-17.622604370117188,-16.836334228515625,-16.654661178588867,-17.237136840820312,-18.126995086669922,-17.757436752319336,-16.54850959777832,-16.742504119873047,-20.196475982666016,-17.261930465698242,-16.6452579498291,-17.384428024291992,-17.243467330932617,-17.688457489013672,-16.957664489746094,-17.07477378845215,-17.724544525146484,-16.42783546447754,-20.833581924438477,-16.227455139160156,-19.757068634033203,-17.916088104248047,-19.973424911499023,-18.982065200805664,-18.9495906829834,-16.558191299438477,-17.78377342224121,-17.27627182006836,-18.57354164123535,-17.53304672241211,-17.37432098388672,-17.369693756103516,-17.535661697387695,-17.112098693847656,-19.486988067626953,-17.05494499206543,-17.468652725219727,-20.70001220703125,-16.683475494384766,-17.624710083007812,-17.386091232299805,-17.83307647705078,-16.777746200561523,-16.1463623046875,-17.873939514160156,-17.6878719329834,-18.124181747436523,-17.60968589782715,-17.144407272338867,-18.2648868560791,-17.707326889038086,-18.728992462158203,-19.344276428222656,-20.556095123291016,-17.262269973754883,-18.045501708984375,-17.459314346313477,-17.02401351928711,-18.41411018371582,-17.386550903320312,-17.341705322265625,-17.154565811157227,-17.254968643188477,-19.900463104248047,-17.954652786254883,-17.0048885345459,-16.75183868408203,-17.318822860717773,-16.65650177001953,-17.459257125854492,-17.442989349365234,-17.150362014770508,-21.050477981567383,-17.255224227905273,-18.093698501586914,-20.979005813598633,-17.39739990234375,-17.33659553527832,-17.06194305419922,-17.422067642211914,-18.628978729248047,-17.55402183532715,-17.85149574279785,-17.685344696044922,-17.987306594848633,-17.618837356567383,-17.276769638061523],"y":[-29.820178985595703,-27.24870491027832,-28.237045288085938,-28.852907180786133,-27.518495559692383,-27.140865325927734,-27.634206771850586,-28.400474548339844,-26.548105239868164,-28.678739547729492,-27.83472442626953,-28.43045425415039,-28.293598175048828,-28.012901306152344,-28.493915557861328,-27.660839080810547,-29.727136611938477,-28.25292205810547,-29.194988250732422,-29.41352653503418,-28.906845092773438,-28.12740707397461,-28.549877166748047,-29.267667770385742,-28.48589324951172,-28.822538375854492,-29.311786651611328,-27.84916877746582,-28.133874893188477,-29.753173828125,-28.50821876525879,-28.408294677734375,-28.089866638183594,-27.803199768066406,-27.64933967590332,-28.515661239624023,-28.63399887084961,-27.26188850402832,-28.052858352661133,-28.35613250732422,-28.307594299316406,-26.97087287902832,-27.6756534576416,-28.605125427246094,-28.27730941772461,-30.715736389160156,-27.748552322387695,-29.600873947143555,-28.163362503051758,-27.071178436279297,-28.560670852661133,-28.200593948364258,-27.921213150024414,-26.957595825195312,-28.24563980102539,-27.803298950195312,-28.312082290649414,-28.23133659362793,-27.753305435180664,-27.48091697692871,-28.698318481445312,-27.82793426513672,-27.30713653564453,-28.590864181518555,-28.343093872070312,-27.904617309570312,-27.82920265197754,-28.151229858398438,-27.775177001953125,-27.243310928344727,-26.792722702026367,-27.383100509643555,-28.96915626525879,-28.13669776916504,-29.31075096130371,-28.979997634887695,-27.651342391967773,-28.758594512939453,-28.112932205200195,-28.897193908691406,-27.72341537475586,-27.868289947509766,-29.244577407836914,-27.918813705444336,-27.47933578491211,-28.765575408935547,-27.171236038208008,-27.58795928955078,-26.918766021728516,-29.071069717407227,-27.90605354309082,-27.26523208618164,-27.882064819335938,-28.606279373168945,-29.6009578704834,-28.43999671936035,-29.03928565979004,-28.67641830444336,-28.114376068115234,-28.648942947387695,-28.763864517211914,-28.399658203125,-27.596372604370117,-29.200063705444336,-27.17301368713379,-27.58031463623047,-28.398914337158203,-28.02988624572754,-27.89806365966797,-28.00728416442871,-29.062711715698242,-28.794767379760742,-28.93701934814453,-28.31496238708496,-28.390953063964844,-26.81585693359375,-27.264633178710938,-28.445404052734375,-28.376651763916016,-28.287715911865234,-28.008207321166992,-30.154125213623047,-28.371644973754883,-29.691133499145508,-28.640687942504883,-29.13492202758789,-28.765085220336914,-28.258508682250977,-28.450334548950195,-27.887807846069336,-28.51751136779785,-27.270414352416992,-28.955936431884766,-28.61368179321289,-28.597087860107422,-28.073307037353516,-27.408239364624023,-28.956289291381836,-28.69487190246582,-28.86046600341797,-27.587465286254883,-28.17770767211914,-28.775033950805664,-27.918861389160156,-28.38808250427246,-28.253328323364258,-28.198593139648438,-28.73427391052246,-27.79811668395996,-28.628219604492188,-28.210668563842773,-28.26071548461914,-28.63617515563965,-28.565494537353516,-28.202255249023438,-28.332990646362305,-28.74226188659668,-28.329702377319336,-28.96394157409668,-28.460521697998047,-28.357452392578125,-28.572059631347656,-28.546056747436523,-28.248397827148438,-27.876462936401367,-27.02414894104004,-28.23443603515625,-28.203990936279297,-28.2580623626709,-29.356359481811523,-29.238136291503906,-27.36905860900879,-28.892333984375,-27.771324157714844,-28.34584617614746,-28.422639846801758,-28.272377014160156,-28.19400405883789,-28.750804901123047,-28.04925537109375,-28.571840286254883,-29.015426635742188,-27.851926803588867,-29.109460830688477,-28.43642234802246,-28.127653121948242,-28.368974685668945,-28.678964614868164,-28.766332626342773,-28.727853775024414,-28.774200439453125,-28.312437057495117,-28.677244186401367,-28.774112701416016,-28.526601791381836,-28.529644012451172,-28.45006561279297,-27.241886138916016,-27.853439331054688,-28.294708251953125,-27.67993927001953,-28.194910049438477,-28.499563217163086,-28.025104522705078,-28.3398380279541,-28.193735122680664,-28.03479766845703,-28.68351936340332,-28.33326530456543,-28.23015022277832,-28.32234764099121,-28.132659912109375,-28.331464767456055,-28.137094497680664,-27.905803680419922,-27.772014617919922,-28.580036163330078,-28.555517196655273,-28.17824935913086,-28.432722091674805,-28.5693416595459,-28.44907569885254,-28.635709762573242,-29.661033630371094,-28.18851089477539,-28.46204948425293,-28.03852653503418,-28.470687866210938,-28.347768783569336,-28.338115692138672,-28.213699340820312,-29.568620681762695,-28.436843872070312,-28.375185012817383,-28.523555755615234,-28.277917861938477,-28.392980575561523,-28.23740577697754,-27.80777931213379,-28.333415985107422,-28.30863380432129,-28.351390838623047,-28.548561096191406,-28.119354248046875,-28.317834854125977,-28.476472854614258,-28.359413146972656,-28.27190399169922,-28.292476654052734,-28.489208221435547],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.311948776245117,19.603744506835938,17.851194381713867,18.002586364746094,20.210609436035156,19.752079010009766,19.10918426513672,16.782695770263672,21.77845573425293,19.62497901916504,18.510887145996094,18.619935989379883,18.47118377685547,17.315994262695312,20.435489654541016,18.17852783203125,18.536537170410156,18.719234466552734,18.462892532348633,17.591861724853516,19.679841995239258,16.8762264251709,16.96092414855957,18.094568252563477,18.577930450439453,18.98134994506836,19.44376564025879,19.97804069519043,17.089433670043945,18.060392379760742,17.773237228393555,18.551841735839844,18.56947898864746,20.255111694335938,20.846342086791992,18.846149444580078,18.541521072387695,18.494462966918945,18.529998779296875,19.886550903320312,18.096471786499023,18.722667694091797,17.422657012939453,19.833866119384766,17.410932540893555,19.195219039916992,19.647480010986328,17.215991973876953,18.87579345703125,18.374496459960938,23.128704071044922,19.007862091064453,17.67780876159668,18.835697174072266,17.625417709350586,18.468276977539062,19.324668884277344,20.28498649597168,18.727468490600586,17.474210739135742,17.06612777709961,17.13551139831543,18.11713218688965,18.873083114624023,19.280271530151367,18.357778549194336,18.09687042236328,18.00345230102539,18.45793914794922,18.107423782348633,19.040496826171875,17.997896194458008,18.894847869873047,17.050994873046875,16.68935775756836,16.518556594848633,18.8660945892334,18.226219177246094,17.951921463012695,17.707876205444336,17.904998779296875,18.090675354003906,17.36876678466797,18.156980514526367,17.660634994506836,18.327547073364258,18.330564498901367,19.082536697387695,17.550655364990234,18.51081085205078,18.2003116607666,18.71903419494629,19.066144943237305,17.669605255126953,18.087759017944336,18.486618041992188,18.15361213684082,18.19024085998535,19.04261016845703,17.60915184020996,18.10064125061035,19.00445556640625,17.548255920410156,19.476999282836914,17.26608657836914,19.141223907470703,18.61722755432129,17.394084930419922,17.959125518798828,18.470294952392578,18.805681228637695,17.648574829101562,18.34490394592285,18.496484756469727,18.346296310424805,18.166236877441406,17.985380172729492,18.47402572631836,18.385730743408203,19.818578720092773,18.292024612426758,19.055755615234375,19.37114906311035,18.37932586669922,19.45541763305664,20.832109451293945,18.379907608032227,18.800220489501953,19.838544845581055,15.670365333557129,18.420207977294922,18.288532257080078,18.737110137939453,18.58285903930664,17.861488342285156,18.64588737487793,17.38915252685547,17.21561622619629,18.235219955444336,18.488086700439453,18.12166976928711,18.537433624267578,18.675460815429688,18.088104248046875,18.788467407226562,17.434431076049805,18.26771354675293,18.711257934570312,18.537588119506836,20.079565048217773,18.243162155151367,18.57342529296875,18.26178741455078,20.043195724487305,18.63287925720215,18.214038848876953,17.85697364807129,17.361635208129883,17.48397445678711,18.46635627746582,17.79781723022461,18.732328414916992,18.443267822265625,18.374866485595703,17.055994033813477,17.7891788482666,18.0130558013916,18.901485443115234,18.17369842529297,20.068906784057617,19.254600524902344,18.844844818115234,18.464818954467773,18.466941833496094,18.09658432006836,18.543590545654297,18.468334197998047,17.922128677368164,18.385662078857422,17.965368270874023,18.168025970458984,18.383089065551758,18.926443099975586,18.714754104614258,18.476959228515625,18.713420867919922,18.474515914916992,19.497896194458008,18.331523895263672,18.623634338378906,19.2419490814209,19.81363296508789,17.948928833007812,18.409353256225586,19.003646850585938,17.738475799560547,17.974580764770508,18.658048629760742,18.456552505493164,20.40073585510254,18.714900970458984,18.53805923461914,18.43720054626465,19.053590774536133,20.153358459472656,17.888338088989258,18.943973541259766,18.631271362304688,18.716602325439453,18.494234085083008,18.937152862548828,18.313396453857422,18.363359451293945,18.413372039794922,18.32273292541504,18.427324295043945,18.813560485839844,17.97391700744629,18.386945724487305,18.61511993408203,19.186702728271484,18.697072982788086,18.751243591308594,17.930400848388672,18.453584671020508,18.40428924560547,17.82011604309082,18.857919692993164,17.970829010009766,18.500818252563477,18.11127281188965,18.25216293334961,18.928691864013672,18.27139663696289,18.222204208374023,17.917652130126953,18.090484619140625,18.05303192138672,18.243907928466797,17.95681381225586,18.535789489746094,18.36442756652832,18.248371124267578,18.443790435791016,19.602121353149414,18.452369689941406,18.5601749420166,18.3553409576416,18.2270450592041,18.471033096313477],"y":[-3.2253570556640625,-4.9808478355407715,-1.9335517883300781,-4.758462429046631,-3.715623378753662,-3.941917657852173,-3.835414409637451,-3.4106385707855225,-4.405287742614746,-3.5146098136901855,-3.916590452194214,-5.41279935836792,-3.1466574668884277,-3.0926201343536377,-5.159940719604492,-4.173109531402588,-4.35584020614624,-1.756971001625061,-5.469080924987793,-1.978850245475769,-6.176412105560303,-2.4026949405670166,-3.672140598297119,-3.7564802169799805,-3.8178367614746094,-4.630805492401123,-3.6944727897644043,-4.79443359375,-4.446558952331543,-3.0619688034057617,-2.8364689350128174,-4.47657585144043,-4.27891731262207,-2.898737907409668,-3.5302939414978027,-2.6462738513946533,-3.5303220748901367,-4.044797897338867,-3.541597604751587,-3.189927577972412,-4.25200080871582,-2.759673833847046,-3.938441514968872,-4.8162312507629395,-1.3198834657669067,-3.874375820159912,-3.4805216789245605,-4.382800102233887,-4.60899019241333,-3.3182449340820312,-3.2196576595306396,-4.3189263343811035,-4.542502403259277,-4.034346580505371,-3.4684810638427734,-2.441586494445801,-3.0011672973632812,-4.223474025726318,-4.369582176208496,-3.7852559089660645,-3.508690118789673,-3.7362265586853027,-4.027852535247803,-4.099894046783447,-2.863677740097046,-4.578558921813965,-4.351072311401367,-3.6205620765686035,-2.6730101108551025,-2.266514301300049,-2.6818923950195312,-4.579570770263672,-3.7487616539001465,-2.9156408309936523,-3.4501595497131348,-3.391342878341675,-3.368030071258545,-3.1631031036376953,-4.003145217895508,-3.0311059951782227,-3.7234902381896973,-2.6344223022460938,-4.04744291305542,-3.3628323078155518,-4.656842231750488,-5.147747993469238,-3.9785048961639404,-4.2408342361450195,-3.6660237312316895,-2.8396313190460205,-3.4763214588165283,-3.6472673416137695,-1.846547245979309,-3.630317449569702,-3.6984074115753174,-3.6649491786956787,-4.577883243560791,-4.259007930755615,-4.112941741943359,-3.7395129203796387,-3.7554726600646973,-3.4769845008850098,-2.251627206802368,-2.46964168548584,-2.8827717304229736,-3.058872699737549,-3.328273057937622,-5.107061862945557,-2.6560702323913574,-3.1412365436553955,-2.6452925205230713,-3.614844560623169,-3.9340286254882812,-3.4597854614257812,-3.037975311279297,-3.3870840072631836,-3.961679458618164,-3.553762435913086,-3.266233444213867,-4.1324143409729,-3.4511754512786865,-5.067033767700195,-3.726393699645996,-3.2973341941833496,-4.800973892211914,-4.485345840454102,-2.2810704708099365,-3.3351852893829346,-4.424283981323242,-4.093466281890869,-3.5650382041931152,-2.749636173248291,-3.518275499343872,-4.407888889312744,-3.351071357727051,-3.7288496494293213,-4.080722332000732,-3.7993173599243164,-4.539819240570068,-3.972660779953003,-3.9376049041748047,-3.6020069122314453,-4.282258033752441,-3.8182506561279297,-3.7378547191619873,-3.6029245853424072,-4.596966743469238,-4.135830402374268,-3.2798287868499756,-3.89631724357605,-2.944321870803833,-3.4440836906433105,-3.7534449100494385,-3.00264048576355,-3.530146837234497,-3.3047902584075928,-3.4563775062561035,-4.176971912384033,-3.724053382873535,-3.878349781036377,-3.252516269683838,-3.7234885692596436,-3.9460370540618896,-3.1053779125213623,-4.652249813079834,-2.7842235565185547,-2.8169593811035156,-3.9991722106933594,-3.6662120819091797,-4.604465007781982,-4.291986465454102,-2.86897349357605,-2.776925563812256,-4.005470275878906,-4.971142768859863,-4.143648147583008,-3.713383674621582,-3.705672264099121,-3.128676414489746,-3.857250452041626,-3.345867156982422,-3.6958484649658203,-3.4011049270629883,-3.3573622703552246,-3.7786779403686523,-3.923743486404419,-3.1981775760650635,-3.9331910610198975,-3.698028326034546,-2.7839674949645996,-3.749427556991577,-3.988161563873291,-4.3302507400512695,-3.06402850151062,-4.086489200592041,-3.885958433151245,-4.023754596710205,-3.9136924743652344,-3.691189765930176,-4.035412311553955,-3.97845721244812,-3.739598035812378,-3.152235269546509,-3.7223026752471924,-4.154178142547607,-3.2792768478393555,-4.123841762542725,-5.041432857513428,-3.649064064025879,-3.284437894821167,-4.049115180969238,-3.4821488857269287,-3.7560501098632812,-3.8670268058776855,-3.4671151638031006,-3.563250780105591,-3.521458864212036,-3.683347463607788,-3.400024652481079,-3.939873218536377,-3.651892900466919,-3.239497423171997,-3.6480586528778076,-3.946105718612671,-3.726571798324585,-3.430670976638794,-3.286766767501831,-3.850187301635742,-3.6224210262298584,-3.4840004444122314,-3.6705708503723145,-3.807985544204712,-3.7185559272766113,-3.6928954124450684,-3.9133241176605225,-3.5835671424865723,-3.7738895416259766,-3.5922703742980957,-3.6895501613616943,-3.6004297733306885,-3.775838851928711,-3.475935935974121,-3.77729868888855,-3.8974361419677734,-3.747368335723877,-3.572544574737549,-3.5828614234924316,-3.477508068084717,-3.6462533473968506,-3.7252285480499268],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-9.78909683227539,-12.365358352661133,-12.610018730163574,-12.881734848022461,-10.750737190246582,-9.91867446899414,-11.404662132263184,-10.524685859680176,-11.28754711151123,-9.866911888122559,-10.032060623168945,-10.754982948303223,-11.03693962097168,-11.522948265075684,-11.41596508026123,-9.703913688659668,-10.530941009521484,-8.044675827026367,-12.695252418518066,-11.026958465576172,-9.604558944702148,-12.36015510559082,-11.171134948730469,-14.922242164611816,-11.20840072631836,-9.86583423614502,-11.880392074584961,-11.519898414611816,-9.991522789001465,-8.928824424743652,-10.892870903015137,-8.639871597290039,-10.715279579162598,-10.886465072631836,-11.854893684387207,-9.657347679138184,-10.666858673095703,-11.402617454528809,-11.74564266204834,-10.589418411254883,-11.001289367675781,-10.820259094238281,-13.37293529510498,-12.59211540222168,-10.265039443969727,-9.694714546203613,-11.89575481414795,-12.655710220336914,-10.925024032592773,-12.087996482849121,-10.970884323120117,-10.985528945922852,-9.56241226196289,-11.611835479736328,-9.950268745422363,-10.342578887939453,-9.603796005249023,-10.709596633911133,-10.273641586303711,-10.989556312561035,-10.619284629821777,-12.488136291503906,-9.991249084472656,-11.128560066223145,-10.564347267150879,-10.778172492980957,-10.805938720703125,-11.67447280883789,-11.781907081604004,-11.166486740112305,-10.718091011047363,-10.34648323059082,-10.712552070617676,-9.026490211486816,-11.709742546081543,-10.09750747680664,-10.170963287353516,-10.29367446899414,-12.305000305175781,-11.71271800994873,-9.886263847351074,-12.031671524047852,-9.72965145111084,-12.10482406616211,-10.1827392578125,-10.344690322875977,-10.681815147399902,-11.38516902923584,-10.722132682800293,-11.532936096191406,-9.598937034606934,-11.087423324584961,-11.087255477905273,-11.47580337524414,-9.966917991638184,-10.395466804504395,-11.760420799255371,-11.746611595153809,-10.65713882446289,-11.21615982055664,-10.266289710998535,-10.105423927307129,-11.95565128326416,-11.277514457702637,-10.501790046691895,-10.77504825592041,-13.15858268737793,-11.475504875183105,-10.546812057495117,-12.343047142028809,-10.308573722839355,-11.136892318725586,-12.748013496398926,-9.845837593078613,-11.175067901611328,-12.643034934997559,-10.576735496520996,-11.410118103027344,-10.130146026611328,-11.154367446899414,-10.964923858642578,-10.461127281188965,-10.88134765625,-11.992445945739746,-10.67487907409668,-10.661702156066895,-10.888205528259277,-9.331563949584961,-13.353275299072266,-9.976962089538574,-10.059256553649902,-10.493359565734863,-11.837529182434082,-9.533018112182617,-10.445782661437988,-11.43005084991455,-11.106782913208008,-11.424986839294434,-11.2086820602417,-11.098149299621582,-11.237774848937988,-11.524456024169922,-11.402474403381348,-10.327652931213379,-10.734810829162598,-12.029382705688477,-11.499542236328125,-11.13373851776123,-11.480984687805176,-10.908021926879883,-11.417065620422363,-11.139774322509766,-10.987565994262695,-10.507438659667969,-10.346684455871582,-10.635150909423828,-10.717649459838867,-11.449785232543945,-9.847662925720215,-11.120890617370605,-10.532322883605957,-10.973684310913086,-10.886892318725586,-10.749588012695312,-10.415244102478027,-10.596614837646484,-10.668604850769043,-10.757718086242676,-10.962237358093262,-11.050456047058105,-10.894371032714844,-11.267693519592285,-9.980024337768555,-11.580039024353027,-9.184971809387207,-10.461955070495605,-11.379897117614746,-11.972546577453613,-11.045202255249023,-9.978343963623047,-10.719504356384277,-10.78834056854248,-9.263376235961914,-10.776032447814941,-10.649312973022461,-10.558218955993652,-11.230729103088379,-10.263998031616211,-11.091365814208984,-11.705431938171387,-11.36508560180664,-10.725994110107422,-10.517903327941895,-11.165371894836426,-11.429933547973633,-11.11201000213623,-8.76386547088623,-10.768600463867188,-11.10210132598877,-10.780174255371094,-11.627034187316895,-11.18197250366211,-10.439509391784668,-10.571660041809082,-11.67513656616211,-10.480751037597656,-11.19184398651123,-10.76046371459961,-10.772180557250977,-11.074202537536621,-10.544744491577148,-11.857247352600098,-10.619882583618164,-11.588884353637695,-10.857022285461426,-11.078042030334473,-10.909130096435547,-11.136801719665527,-10.991218566894531,-11.27169418334961,-10.679183006286621,-10.846348762512207,-11.396961212158203,-10.801604270935059,-10.966974258422852,-10.807024955749512,-10.042969703674316,-10.78688907623291,-11.155235290527344,-10.880010604858398,-11.17570972442627,-10.54375171661377,-10.832813262939453,-9.760891914367676,-11.140649795532227,-10.990500450134277,-10.735539436340332,-11.168965339660645,-10.932400703430176,-11.122954368591309,-11.08505916595459,-11.048821449279785,-11.234233856201172,-10.930253982543945,-10.963637351989746,-10.993345260620117,-11.054360389709473,-10.687182426452637,-10.882187843322754,-10.99907112121582],"y":[23.966825485229492,24.07982635498047,23.929576873779297,23.6854305267334,25.12760353088379,22.978599548339844,24.374956130981445,23.91933250427246,21.665632247924805,23.89617156982422,25.19670295715332,23.03937530517578,22.11868667602539,24.591705322265625,24.627086639404297,23.89777374267578,23.61348533630371,21.833255767822266,24.393388748168945,22.22493553161621,25.795623779296875,25.27046012878418,23.996726989746094,22.015478134155273,23.73076057434082,25.821794509887695,21.887136459350586,23.6982364654541,24.404233932495117,23.858661651611328,25.486040115356445,24.633216857910156,24.621389389038086,23.955461502075195,24.58214569091797,24.749439239501953,23.383920669555664,23.534168243408203,23.527605056762695,24.34304428100586,21.55121612548828,24.352760314941406,23.262636184692383,22.413190841674805,22.012836456298828,24.783498764038086,22.203502655029297,26.031597137451172,22.02898597717285,25.457901000976562,24.216808319091797,24.597963333129883,22.779489517211914,24.168521881103516,23.770488739013672,23.56511878967285,22.269969940185547,23.61941146850586,22.95513153076172,24.381200790405273,23.834888458251953,25.71307373046875,22.08673095703125,21.253324508666992,25.07756996154785,23.585262298583984,23.920982360839844,24.583114624023438,24.92084312438965,22.45368766784668,22.78595542907715,23.494449615478516,24.11937141418457,24.535417556762695,25.304269790649414,24.543289184570312,24.062389373779297,23.35111427307129,24.79996681213379,24.17347526550293,23.162199020385742,23.27813720703125,23.78749656677246,22.089157104492188,24.72193145751953,24.043851852416992,24.307491302490234,24.660436630249023,22.578983306884766,23.013948440551758,23.076765060424805,22.815689086914062,23.565921783447266,22.904436111450195,23.548091888427734,24.4882869720459,24.069915771484375,21.71084213256836,25.176443099975586,24.059072494506836,24.914758682250977,23.63697052001953,24.970781326293945,23.42477035522461,23.399585723876953,22.668188095092773,23.423673629760742,24.61988639831543,23.437807083129883,22.561782836914062,21.479726791381836,24.498031616210938,23.700597763061523,24.24683952331543,24.55419158935547,24.38100814819336,22.7698917388916,21.437835693359375,22.7990665435791,24.2415714263916,24.031679153442383,24.516902923583984,22.34435272216797,24.268741607666016,22.93779182434082,23.45993423461914,23.326702117919922,22.891820907592773,23.17100715637207,22.30530548095703,23.683185577392578,24.176979064941406,23.264808654785156,23.2059268951416,24.004968643188477,23.698667526245117,24.24297332763672,23.53653907775879,23.017274856567383,24.42847442626953,24.026952743530273,25.323686599731445,23.991735458374023,24.462631225585938,24.321455001831055,23.620941162109375,23.82742691040039,23.4726505279541,24.259048461914062,24.149354934692383,23.951690673828125,24.11574935913086,23.814748764038086,22.90070152282715,24.084627151489258,24.32082748413086,23.269800186157227,24.599552154541016,23.614469528198242,22.788076400756836,22.217716217041016,24.21843719482422,24.7277889251709,23.236482620239258,23.20487403869629,24.006763458251953,24.58568000793457,23.55575942993164,23.72772789001465,23.18109130859375,22.255624771118164,24.076675415039062,23.51525115966797,24.30712127685547,22.459217071533203,23.97418212890625,23.906579971313477,23.585237503051758,23.745452880859375,23.752365112304688,23.98676300048828,22.945077896118164,22.77285385131836,23.362205505371094,24.13874626159668,23.4191951751709,23.320772171020508,23.332414627075195,23.56854248046875,23.11810874938965,23.711881637573242,23.570865631103516,23.060258865356445,23.77260971069336,23.957223892211914,23.14317512512207,22.35841178894043,23.603260040283203,22.462209701538086,23.919113159179688,22.331661224365234,22.13623809814453,23.077739715576172,23.61052894592285,24.35890007019043,23.53879165649414,23.379056930541992,24.020875930786133,23.830041885375977,23.78331184387207,23.670612335205078,22.05486297607422,23.429309844970703,24.307125091552734,24.530067443847656,23.614906311035156,23.294275283813477,23.995452880859375,23.505592346191406,23.157081604003906,23.171138763427734,23.788358688354492,24.154544830322266,23.27069854736328,23.979469299316406,22.88324737548828,23.282421112060547,23.860620498657227,23.556549072265625,23.5495548248291,23.439884185791016,23.82493782043457,23.600727081298828,24.64661407470703,23.916065216064453,23.572574615478516,24.124399185180664,23.041030883789062,23.86180877685547,23.245656967163086,23.81367301940918,23.48261070251465,23.37566375732422,24.023178100585938,23.80852699279785,23.529111862182617,23.874319076538086,23.86717414855957,23.500450134277344,23.78108024597168],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-24.56632423400879,-27.3061580657959,-28.491363525390625,-27.93511962890625,-27.365768432617188,-28.245288848876953,-26.77198600769043,-26.371055603027344,-29.421728134155273,-26.385356903076172,-27.51699447631836,-27.318899154663086,-27.977615356445312,-28.301652908325195,-27.27898406982422,-27.044198989868164,-27.66106414794922,-27.760047912597656,-27.234861373901367,-28.16919708251953,-29.05512046813965,-27.753686904907227,-26.60041046142578,-27.525489807128906,-27.346111297607422,-27.88117218017578,-28.522037506103516,-29.583393096923828,-27.62320327758789,-27.45235252380371,-27.79928207397461,-26.81192398071289,-29.409503936767578,-25.931989669799805,-29.01304817199707,-26.677898406982422,-26.745887756347656,-27.90898323059082,-29.037900924682617,-26.9152889251709,-26.649005889892578,-28.483924865722656,-28.928865432739258,-26.81458282470703,-25.70384407043457,-29.036266326904297,-28.56206512451172,-28.373821258544922,-27.624940872192383,-27.200679779052734,-27.052467346191406,-30.02429962158203,-27.97422981262207,-29.384706497192383,-27.66697120666504,-26.77388572692871,-29.044960021972656,-23.80736541748047,-27.549856185913086,-27.878875732421875,-27.90020179748535,-27.88597869873047,-27.54183578491211,-28.018320083618164,-28.285688400268555,-28.665271759033203,-28.471633911132812,-28.723115921020508,-27.957857131958008,-28.50541877746582,-28.045923233032227,-27.025100708007812,-28.99214744567871,-29.398530960083008,-27.639469146728516,-26.761072158813477,-30.05155372619629,-24.975379943847656,-26.504531860351562,-28.128572463989258,-26.131540298461914,-29.01158332824707,-28.046321868896484,-28.178203582763672,-28.88644027709961,-28.715618133544922,-29.067663192749023,-27.490510940551758,-27.6199893951416,-28.317766189575195,-28.383037567138672,-29.013370513916016,-27.898967742919922,-28.196256637573242,-28.065919876098633,-28.132871627807617,-28.482940673828125,-25.32460594177246,-27.380144119262695,-28.643287658691406,-28.776287078857422,-28.045101165771484,-27.59210205078125,-27.65662384033203,-27.809099197387695,-29.92877769470215,-28.354711532592773,-28.20310401916504,-27.917495727539062,-28.918737411499023,-27.20806884765625,-28.557357788085938,-27.617231369018555,-29.257633209228516,-28.79245948791504,-27.592607498168945,-28.624591827392578,-28.63843536376953,-25.13141632080078,-29.02292823791504,-27.145063400268555,-28.29555892944336,-23.890344619750977,-27.82062530517578,-25.329957962036133,-27.69268035888672,-26.246370315551758,-28.585224151611328,-27.280174255371094,-28.779054641723633,-27.371620178222656,-28.53291893005371,-28.194721221923828,-27.842683792114258,-25.091413497924805,-27.828824996948242,-28.1479549407959,-28.448707580566406,-27.59638023376465,-28.688762664794922,-27.029644012451172,-28.455575942993164,-29.69358253479004,-28.68877601623535,-27.9138240814209,-28.813899993896484,-27.885452270507812,-28.145774841308594,-27.92706871032715,-21.7007999420166,-29.04755973815918,-26.341228485107422,-28.324052810668945,-28.361391067504883,-27.64888572692871,-29.760623931884766,-28.63013458251953,-27.7006778717041,-27.918176651000977,-27.77826690673828,-28.235145568847656,-28.09891700744629,-28.223182678222656,-28.281654357910156,-27.2657470703125,-25.898786544799805,-28.768449783325195,-26.941699981689453,-27.14154815673828,-27.760868072509766,-26.621295928955078,-28.196388244628906,-28.598941802978516,-27.528467178344727,-27.522184371948242,-28.074085235595703,-28.25655174255371,-27.801599502563477,-28.043785095214844,-27.195486068725586,-27.558412551879883,-28.880020141601562,-27.10137176513672,-25.810503005981445,-28.349409103393555,-28.057613372802734,-26.360984802246094,-28.020586013793945,-28.39875602722168,-27.448211669921875,-24.282848358154297,-27.658241271972656,-27.993324279785156,-27.385543823242188,-27.73162269592285,-25.983226776123047,-27.886295318603516,-28.095136642456055,-27.4877986907959,-28.24156379699707,-27.680641174316406,-27.87140464782715,-28.274959564208984,-28.244951248168945,-27.42159652709961,-27.800573348999023,-28.166339874267578,-28.501604080200195,-27.68793296813965,-28.177059173583984,-25.952838897705078,-28.153005599975586,-28.230844497680664,-27.97462272644043,-27.75823211669922,-27.959089279174805,-28.099557876586914,-28.17374610900879,-27.488862991333008,-27.92644500732422,-27.93730354309082,-26.33120346069336,-27.969837188720703,-27.438526153564453,-27.771648406982422,-27.96624183654785,-27.711971282958984,-27.805822372436523,-27.9029541015625,-27.8570499420166,-27.678802490234375,-28.49014663696289,-28.121078491210938,-28.083267211914062,-27.596708297729492,-27.850543975830078,-27.775102615356445,-27.829933166503906,-27.616308212280273,-28.05099105834961,-27.651315689086914,-28.17888641357422,-28.006465911865234,-27.943439483642578,-27.807344436645508,-27.99053192138672,-27.894351959228516,-27.948760986328125,-27.927907943725586,-27.718050003051758],"y":[-25.290620803833008,-26.82866096496582,-28.27611541748047,-25.074787139892578,-26.737258911132812,-27.131877899169922,-25.57168960571289,-26.509113311767578,-29.34711456298828,-26.294414520263672,-26.34008026123047,-27.96283721923828,-28.301054000854492,-27.465848922729492,-28.512340545654297,-26.836299896240234,-25.794082641601562,-27.986160278320312,-25.058069229125977,-26.67792510986328,-28.031558990478516,-26.074832916259766,-27.031625747680664,-25.476680755615234,-27.08010482788086,-26.65797996520996,-25.997303009033203,-24.91859245300293,-26.652070999145508,-26.27996253967285,-25.72193145751953,-26.417034149169922,-27.838171005249023,-27.652746200561523,-25.519020080566406,-26.739852905273438,-24.986400604248047,-27.7243709564209,-26.415761947631836,-26.740968704223633,-27.63292694091797,-26.16613006591797,-26.423206329345703,-27.887815475463867,-25.978923797607422,-27.54444122314453,-25.641115188598633,-25.429906845092773,-28.319677352905273,-26.24368667602539,-27.279582977294922,-27.50267219543457,-26.920679092407227,-26.641883850097656,-26.365007400512695,-26.921897888183594,-27.009721755981445,-26.395061492919922,-26.25937271118164,-26.42437171936035,-26.511333465576172,-27.117286682128906,-25.54376220703125,-26.81940269470215,-27.763338088989258,-25.738887786865234,-27.000112533569336,-26.05167007446289,-27.31463050842285,-26.102346420288086,-26.30048942565918,-27.01926612854004,-26.397794723510742,-25.138774871826172,-27.91311264038086,-26.770511627197266,-26.703702926635742,-26.00216293334961,-26.062936782836914,-26.206491470336914,-27.09103012084961,-26.830638885498047,-28.03829002380371,-26.85059928894043,-25.348499298095703,-25.633766174316406,-27.503110885620117,-25.9948673248291,-25.388219833374023,-27.259571075439453,-26.19609832763672,-26.008037567138672,-25.625717163085938,-26.66353988647461,-27.18134117126465,-26.444425582885742,-25.579301834106445,-26.673873901367188,-26.092636108398438,-26.41682243347168,-26.945209503173828,-25.708677291870117,-26.273744583129883,-25.91184425354004,-26.77558708190918,-26.389223098754883,-26.665382385253906,-25.650850296020508,-26.67310905456543,-27.96932601928711,-25.672962188720703,-25.38765525817871,-27.909639358520508,-26.502586364746094,-27.623079299926758,-26.31074333190918,-26.560455322265625,-27.374317169189453,-28.032346725463867,-27.778228759765625,-26.41388511657715,-25.79783821105957,-28.057802200317383,-26.48459815979004,-27.078161239624023,-26.114107131958008,-26.754940032958984,-27.34868049621582,-26.373077392578125,-27.232925415039062,-27.59707260131836,-26.985166549682617,-27.463014602661133,-25.977598190307617,-27.537792205810547,-26.797500610351562,-26.48658561706543,-27.111183166503906,-25.730079650878906,-26.22063446044922,-26.500818252563477,-25.96546173095703,-29.30585479736328,-27.577774047851562,-26.44782066345215,-26.370941162109375,-26.494470596313477,-27.401803970336914,-26.892017364501953,-27.92245864868164,-26.33197784423828,-26.58635711669922,-26.603336334228516,-26.072715759277344,-26.60633659362793,-25.912832260131836,-25.86823844909668,-27.422468185424805,-26.74534797668457,-27.15262794494629,-26.757997512817383,-26.65260887145996,-26.798738479614258,-26.103527069091797,-26.918359756469727,-27.13662338256836,-25.56316375732422,-25.988651275634766,-25.93939208984375,-27.276254653930664,-26.463598251342773,-26.635656356811523,-27.62195587158203,-27.187965393066406,-26.60698127746582,-26.519920349121094,-27.00701332092285,-26.65467643737793,-26.542177200317383,-25.491018295288086,-26.17534828186035,-26.254905700683594,-27.08787727355957,-27.279401779174805,-26.6368408203125,-25.29969024658203,-26.973560333251953,-26.151615142822266,-26.138835906982422,-27.589298248291016,-27.52544593811035,-26.66932487487793,-26.281593322753906,-26.486141204833984,-26.562744140625,-26.937320709228516,-26.25127410888672,-25.867694854736328,-26.62639808654785,-26.72532081604004,-26.847496032714844,-26.178985595703125,-26.288484573364258,-26.41864776611328,-26.563302993774414,-26.428367614746094,-26.787799835205078,-26.74246597290039,-26.511133193969727,-26.28350830078125,-26.911375045776367,-27.168066024780273,-26.49750328063965,-26.813499450683594,-26.449813842773438,-26.168607711791992,-27.03390121459961,-26.674516677856445,-26.73297882080078,-26.792564392089844,-26.417810440063477,-26.446998596191406,-26.38692855834961,-26.639324188232422,-26.640819549560547,-26.64604949951172,-26.72052574157715,-26.818946838378906,-26.45532989501953,-26.823118209838867,-26.981853485107422,-26.857563018798828,-27.447099685668945,-26.731935501098633,-26.886234283447266,-26.945554733276367,-26.355831146240234,-26.781932830810547,-26.738332748413086,-26.908184051513672,-26.35917854309082,-26.625978469848633,-26.324281692504883,-26.67414093017578,-27.135164260864258,-26.820783615112305,-26.785633087158203,-26.673940658569336,-26.61258888244629,-26.779052734375],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[21.70203971862793,19.207317352294922,20.397974014282227,20.119747161865234,21.021745681762695,20.55527114868164,17.65885353088379,22.620342254638672,21.007875442504883,20.003131866455078,17.790512084960938,21.846981048583984,20.915441513061523,22.184871673583984,20.28729248046875,20.703779220581055,21.170101165771484,21.910215377807617,20.25893211364746,21.247591018676758,20.58298683166504,20.22760009765625,19.621673583984375,19.332048416137695,20.207612991333008,21.27672576904297,21.948774337768555,22.17030143737793,22.18667221069336,20.38461685180664,22.022666931152344,17.556446075439453,21.47602653503418,20.25496482849121,21.081892013549805,20.826452255249023,20.246187210083008,20.800758361816406,20.02705955505371,21.024641036987305,21.541479110717773,23.117435455322266,20.363611221313477,21.68599510192871,20.964794158935547,20.408248901367188,20.961793899536133,21.74643898010254,21.49992561340332,22.052684783935547,20.602872848510742,21.602474212646484,22.185184478759766,20.180198669433594,22.666948318481445,21.834346771240234,19.511449813842773,19.496923446655273,20.600496292114258,21.330228805541992,21.31318473815918,20.117643356323242,20.473953247070312,21.092266082763672,21.206701278686523,21.171693801879883,21.1048526763916,20.652006149291992,20.433746337890625,18.790483474731445,19.4875545501709,20.17294692993164,20.358688354492188,21.157516479492188,21.174245834350586,20.9105167388916,20.906457901000977,20.795604705810547,20.931381225585938,20.823009490966797,21.11040687561035,20.939952850341797,23.36693000793457,21.434715270996094,21.557022094726562,20.563392639160156,20.68471908569336,20.90485954284668,20.72332763671875,20.915319442749023,21.028837203979492,21.184364318847656,21.128753662109375,19.665691375732422,21.84454345703125,21.075273513793945,21.246482849121094,21.717544555664062,21.42352294921875,21.197423934936523,17.381067276000977,20.938146591186523,19.97743034362793,20.243667602539062,20.70071029663086,20.980045318603516,19.895700454711914,20.663366317749023,21.187335968017578,20.229848861694336,20.773941040039062,20.980854034423828,19.39165496826172,20.604524612426758,20.224348068237305,20.07391357421875,21.57982635498047,21.205934524536133,20.936145782470703,21.15043830871582,20.853065490722656,21.58538055419922,19.992755889892578,20.52278709411621,20.344974517822266,21.282421112060547,21.888647079467773,19.999319076538086,20.774696350097656,18.796905517578125,21.655166625976562,20.497777938842773,20.19007110595703,20.825380325317383,19.645580291748047,19.390209197998047,20.003585815429688,20.04960060119629,20.559322357177734,21.122604370117188,21.376333236694336,21.350013732910156,20.5189208984375,20.580848693847656,20.24640464782715,21.655338287353516,20.680194854736328,20.773574829101562,21.58966636657715,20.661211013793945,20.65964698791504,19.793453216552734,21.316606521606445,21.0162353515625,19.503055572509766,19.73099136352539,21.155046463012695,21.09716033935547,20.968677520751953,21.040843963623047,20.478355407714844,20.685924530029297,20.807872772216797,20.44632911682129,21.873960494995117,20.906930923461914,22.30979347229004,20.18796730041504,20.719524383544922,19.667268753051758,20.530614852905273,20.83538055419922,21.196237564086914,20.903642654418945,21.879840850830078,20.615074157714844,20.571046829223633,20.145200729370117,21.115934371948242,20.479440689086914,21.0538387298584,20.401037216186523,20.015506744384766,21.302459716796875,20.264427185058594,20.961835861206055,20.719629287719727,20.43073844909668,20.72421646118164,20.875574111938477,20.645965576171875,20.397912979125977,20.994495391845703,20.915693283081055,21.19630241394043,21.108137130737305,20.619304656982422,20.81853485107422,21.07779884338379,20.92528533935547,20.6261043548584,20.715360641479492,20.917762756347656,20.872743606567383,20.59416961669922,20.764404296875,20.43219757080078,20.675243377685547,20.57695770263672,20.415693283081055,20.75052833557129,21.117843627929688,20.808271408081055,20.652822494506836,21.63975715637207,20.53551483154297,20.877342224121094,20.822078704833984,21.030567169189453,21.107521057128906,20.725215911865234,20.793685913085938,20.686647415161133,21.139257431030273,20.386381149291992,20.890867233276367,20.948328018188477,20.900644302368164,20.71377944946289,20.907024383544922,20.36615562438965,21.08196449279785,20.62307357788086,21.164939880371094,20.764883041381836,20.857921600341797,20.591411590576172,20.73524284362793,20.540544509887695,20.61438751220703,20.69382095336914,21.015005111694336,20.680299758911133,20.788164138793945,20.70621109008789,20.820392608642578,21.182415008544922,20.80968475341797,20.649930953979492,20.876708984375],"y":[16.617191314697266,16.994325637817383,17.333446502685547,16.72925567626953,18.329023361206055,19.65228843688965,18.527990341186523,16.16362762451172,18.227340698242188,17.01666259765625,18.2204532623291,17.400678634643555,17.188127517700195,16.512449264526367,17.82025909423828,18.13250160217285,17.578824996948242,17.251638412475586,17.644651412963867,17.262821197509766,15.743168830871582,16.908727645874023,15.600543022155762,17.647506713867188,17.529813766479492,17.622051239013672,17.209779739379883,16.506731033325195,17.41207504272461,16.98995590209961,16.05547332763672,17.762510299682617,17.347232818603516,16.68329620361328,18.201570510864258,17.3664493560791,18.389455795288086,17.105300903320312,18.06694793701172,17.02889633178711,16.930246353149414,16.81327247619629,17.544593811035156,16.612590789794922,18.444934844970703,17.76810646057129,16.653078079223633,17.140127182006836,17.339244842529297,18.3164005279541,17.3842716217041,17.017436981201172,16.969913482666016,17.856416702270508,18.174625396728516,17.36700439453125,17.49625015258789,17.060136795043945,17.153085708618164,17.317604064941406,18.466732025146484,18.18859100341797,17.03200912475586,17.071582794189453,17.247169494628906,17.715572357177734,17.793729782104492,17.067663192749023,16.937145233154297,17.066574096679688,17.38651466369629,18.008607864379883,17.36251449584961,16.96000099182129,17.226560592651367,17.511281967163086,17.242355346679688,15.532279014587402,17.400775909423828,17.73099136352539,17.419456481933594,16.591415405273438,18.432886123657227,17.196645736694336,16.650897979736328,17.400484085083008,17.156808853149414,16.934886932373047,17.31587791442871,16.624876022338867,17.35517692565918,16.89251708984375,17.471603393554688,18.645952224731445,17.409759521484375,17.08199691772461,17.053550720214844,17.25372314453125,17.062559127807617,17.12432289123535,17.616323471069336,17.08905792236328,16.40104866027832,16.651329040527344,17.69367218017578,18.111387252807617,18.514389038085938,17.88463592529297,17.387948989868164,18.56806182861328,17.386276245117188,17.52247428894043,17.576244354248047,17.680152893066406,17.57410430908203,17.52451515197754,17.43413734436035,17.467945098876953,17.3310546875,17.394088745117188,17.15864372253418,17.036115646362305,18.86287498474121,17.52516746520996,16.984745025634766,16.243881225585938,16.67131233215332,16.943763732910156,17.023487091064453,17.079275131225586,16.0246639251709,17.834667205810547,18.028059005737305,17.517642974853516,16.833465576171875,17.594911575317383,17.95396614074707,17.645549774169922,17.432146072387695,17.166841506958008,17.101661682128906,17.237768173217773,17.544475555419922,17.6379451751709,17.606746673583984,16.636232376098633,17.140161514282227,17.55674171447754,17.20748519897461,16.951797485351562,17.289533615112305,17.634485244750977,16.738515853881836,16.702550888061523,17.695241928100586,16.867490768432617,17.245765686035156,17.04823112487793,16.899147033691406,17.038127899169922,17.473024368286133,16.992935180664062,17.379558563232422,17.473159790039062,17.486034393310547,17.345327377319336,17.673095703125,18.05583381652832,17.136188507080078,18.044118881225586,17.343563079833984,17.308883666992188,17.576560974121094,17.113950729370117,17.37220001220703,17.186979293823242,17.271194458007812,17.879331588745117,17.768598556518555,17.867582321166992,17.343721389770508,17.580591201782227,17.152036666870117,17.174943923950195,17.55341148376465,17.372581481933594,17.242298126220703,17.670228958129883,17.107717514038086,17.95140838623047,16.129159927368164,17.243457794189453,17.133451461791992,17.526264190673828,17.241437911987305,17.134124755859375,17.241641998291016,17.38345718383789,17.284971237182617,17.285383224487305,16.91954803466797,17.224281311035156,17.19533920288086,17.12293243408203,17.40970802307129,17.545095443725586,17.13616371154785,17.25473976135254,17.67860221862793,17.141061782836914,17.1717529296875,17.130359649658203,17.378768920898438,16.78870964050293,17.3917293548584,17.535940170288086,17.745710372924805,17.850614547729492,17.438655853271484,18.093971252441406,17.766237258911133,17.464595794677734,17.32132911682129,17.536270141601562,17.427282333374023,17.3144474029541,17.25037956237793,17.48516845703125,17.341033935546875,17.240558624267578,17.38955307006836,17.130781173706055,17.288101196289062,16.97901153564453,17.367238998413086,16.78419303894043,17.03446388244629,17.465839385986328,17.288097381591797,17.30928611755371,17.273033142089844,17.407676696777344,17.258481979370117,17.29046058654785,17.380720138549805,17.260175704956055,17.277494430541992,17.30910873413086,17.124853134155273,17.4849853515625],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-34.27168273925781,-33.43918228149414,-33.67108154296875,-35.43434524536133,-33.61682891845703,-33.570377349853516,-32.834754943847656,-34.48127365112305,-34.35315704345703,-32.756927490234375,-33.37025451660156,-33.95114517211914,-34.487449645996094,-32.23048400878906,-33.97509765625,-33.62238693237305,-32.901275634765625,-33.61418533325195,-34.24711990356445,-35.93503189086914,-33.41142272949219,-34.47265625,-33.42583465576172,-32.68059539794922,-33.2579345703125,-33.90900421142578,-35.310420989990234,-34.851783752441406,-34.28697967529297,-33.967872619628906,-32.89978790283203,-33.43302536010742,-34.48747634887695,-34.503170013427734,-32.86747741699219,-33.93436813354492,-35.68868637084961,-32.00489807128906,-32.27522659301758,-34.3275146484375,-34.7944221496582,-34.100040435791016,-35.24492263793945,-34.53171157836914,-33.76811218261719,-32.71623611450195,-32.099491119384766,-35.61720657348633,-33.24350357055664,-34.95553970336914,-34.3528938293457,-34.02956771850586,-32.398406982421875,-33.43082046508789,-33.97211456298828,-34.10028839111328,-33.681941986083984,-32.54697036743164,-33.822120666503906,-31.1262264251709,-33.826541900634766,-34.505889892578125,-32.01188278198242,-33.790897369384766,-34.29852294921875,-34.855247497558594,-31.946107864379883,-34.40329360961914,-33.27933883666992,-33.339996337890625,-34.195068359375,-33.326454162597656,-33.66477584838867,-35.39775466918945,-33.94026565551758,-33.8482780456543,-33.50864028930664,-34.399200439453125,-33.67763900756836,-32.555908203125,-31.235496520996094,-33.36210250854492,-33.24433135986328,-35.258419036865234,-33.580841064453125,-34.378562927246094,-33.593257904052734,-34.259117126464844,-33.4163818359375,-33.66262435913086,-32.20561981201172,-35.062049865722656,-32.85438919067383,-33.78786087036133,-33.227962493896484,-33.661075592041016,-33.81132507324219,-32.821590423583984,-33.34296798706055,-33.148868560791016,-33.07285690307617,-33.37843704223633,-33.65757369995117,-32.99531936645508,-32.89409255981445,-34.45365905761719,-33.70454406738281,-34.11145782470703,-33.4279670715332,-32.7861328125,-33.45527267456055,-33.67715072631836,-34.024681091308594,-33.78315353393555,-33.39067459106445,-33.39109802246094,-33.34431838989258,-34.29425048828125,-32.65707778930664,-32.83785629272461,-33.87395095825195,-33.75881576538086,-33.99017333984375,-32.925785064697266,-34.54832458496094,-34.34883499145508,-34.256717681884766,-34.83869934082031,-33.27696228027344,-34.547454833984375,-33.980796813964844,-33.220821380615234,-33.80644607543945,-34.07115173339844,-34.9202766418457,-34.47081756591797,-33.686195373535156,-34.13292694091797,-33.830810546875,-33.69020462036133,-34.30397033691406,-33.64972686767578,-33.507625579833984,-34.29195022583008,-33.93328857421875,-34.32407760620117,-33.29731750488281,-34.115623474121094,-34.3392448425293,-33.971038818359375,-34.148075103759766,-34.032867431640625,-33.377201080322266,-34.1418342590332,-33.558753967285156,-33.500221252441406,-34.26092529296875,-33.62225341796875,-34.42035675048828,-35.504886627197266,-33.836673736572266,-32.96366500854492,-32.965545654296875,-33.8066291809082,-33.212669372558594,-34.071903228759766,-33.43073654174805,-33.25193786621094,-33.709190368652344,-34.43390655517578,-33.58803939819336,-33.37400436401367,-35.62425994873047,-33.49800109863281,-33.48088455200195,-34.13791275024414,-33.53469467163086,-34.922489166259766,-33.85414505004883,-34.26713180541992,-33.58810806274414,-32.87171173095703,-34.772945404052734,-33.51283264160156,-33.87437057495117,-33.55744934082031,-33.77082443237305,-34.167724609375,-34.460670471191406,-34.56864929199219,-34.06008529663086,-34.14078903198242,-33.77893829345703,-33.845951080322266,-34.00698471069336,-33.214603424072266,-33.271732330322266,-33.99555587768555,-34.289852142333984,-33.520870208740234,-34.376766204833984,-33.509010314941406,-33.8282356262207,-33.87685012817383,-33.36353302001953,-33.9005126953125,-34.000282287597656,-33.690345764160156,-33.759788513183594,-33.662017822265625,-33.60173034667969,-32.90589141845703,-33.69614028930664,-33.97890090942383,-33.72520065307617,-34.00217819213867,-33.962669372558594,-34.016990661621094,-33.63871383666992,-34.0621223449707,-33.3344841003418,-34.16568374633789,-34.45768737792969,-34.82211685180664,-33.72687530517578,-33.64262390136719,-33.57773208618164,-32.999427795410156,-33.8627815246582,-33.384681701660156,-34.134239196777344,-33.858009338378906,-34.10477828979492,-34.04005432128906,-34.24480056762695,-33.32534408569336,-33.0638313293457,-34.04194259643555,-34.060916900634766,-33.98565673828125,-33.187774658203125,-33.86245346069336,-33.74796676635742,-33.659027099609375,-33.62896728515625,-33.76349639892578,-34.058998107910156,-33.24879837036133,-33.63901901245117,-33.54335021972656],"y":[-1.336443305015564,-1.4509469270706177,-3.057135820388794,-0.6266283392906189,-0.7413970232009888,-1.2936651706695557,-0.877650797367096,-1.995679497718811,-0.7649492621421814,-2.2916805744171143,-0.5564902424812317,-1.4273631572723389,-1.8119817972183228,-0.6654422283172607,-2.793562650680542,-1.5159326791763306,-0.4379076659679413,-1.0992693901062012,-1.4964486360549927,-0.8110455274581909,-1.486859679222107,-0.1689012050628662,-2.0150933265686035,-1.1162705421447754,-1.9064033031463623,-0.15552428364753723,-0.17637738585472107,-0.3251563608646393,-1.9308370351791382,-1.5750267505645752,-1.590399980545044,-0.32757800817489624,-0.09348993003368378,-1.1734142303466797,-2.079249620437622,-1.0465562343597412,-1.0490671396255493,-1.0159043073654175,-0.9590371251106262,-2.457064151763916,-0.8111977577209473,-0.9825325608253479,-2.4887001514434814,-0.8208659291267395,-2.528092384338379,-0.6919846534729004,-2.3883700370788574,-0.5318657755851746,0.06738433241844177,-0.6285915970802307,-1.4625250101089478,-2.9942991733551025,-2.934101104736328,-0.8200177550315857,-2.135596513748169,-1.8016823530197144,-0.5663225650787354,-1.7656888961791992,-1.0985182523727417,-0.5577393174171448,-2.7087364196777344,-0.07071246206760406,-0.5373492240905762,-1.0765292644500732,-0.7568871378898621,-1.732003927230835,-4.487837314605713,-1.1173646450042725,-1.4106509685516357,0.006598100531846285,-0.857038140296936,-1.5425021648406982,-1.542872667312622,-1.231487512588501,-0.32171154022216797,-2.317505359649658,-0.4945831000804901,-1.6191422939300537,-2.856241226196289,-1.652307152748108,-0.7040682435035706,-2.5370657444000244,-1.1498613357543945,-0.5449573397636414,-1.3342951536178589,-1.5527551174163818,-1.6776745319366455,-1.336205244064331,-1.2478998899459839,-2.1257081031799316,-1.4268488883972168,-2.2185561656951904,-4.128550052642822,-1.8695980310440063,-1.0358948707580566,-1.615242838859558,-1.6028393507003784,-1.6277388334274292,-1.7685586214065552,-2.06638765335083,-1.269891381263733,-0.11836369335651398,-1.8359977006912231,-0.7726906538009644,-0.6343383193016052,-1.089861512184143,-0.7923251986503601,-0.9561085104942322,-0.7666037082672119,-0.6182012557983398,-1.8644205331802368,-1.756890058517456,-1.3208580017089844,-0.596474826335907,-0.4748436212539673,-1.9452385902404785,-1.5736560821533203,-0.990549623966217,-1.051612377166748,-0.6306942105293274,-0.6493222713470459,-1.9813488721847534,-2.538496732711792,-1.1129283905029297,-1.8899121284484863,-1.6354869604110718,-1.0405092239379883,-1.3499318361282349,-1.3677186965942383,-1.8546130657196045,-1.224379062652588,-1.3849660158157349,-1.0842115879058838,-1.343833565711975,-1.709140419960022,-1.243005394935608,-1.4505831003189087,-1.239149808883667,-1.2803579568862915,-1.1355472803115845,-1.3667113780975342,-3.1128311157226562,-2.1091806888580322,-0.4536355137825012,-1.8423107862472534,-1.1416926383972168,-0.17450451850891113,-1.5910784006118774,-1.2814217805862427,-1.475248098373413,-0.9719246029853821,-2.146271228790283,-1.6078541278839111,-1.404358983039856,-1.1712177991867065,-1.4374427795410156,-1.928647518157959,-1.1584043502807617,-1.6424225568771362,-1.576792597770691,-1.1376078128814697,-1.3544875383377075,-1.8305017948150635,-1.1116148233413696,-1.3502930402755737,-1.3021265268325806,-0.38321736454963684,-3.014373302459717,-0.2841779291629791,-0.8527125716209412,-1.184144377708435,-1.8703763484954834,-1.3001387119293213,-1.380698323249817,-1.9125053882598877,-2.2112598419189453,-1.4732167720794678,-1.3142672777175903,-1.37480890750885,-1.407774806022644,-1.1631919145584106,-3.720527172088623,-1.6518665552139282,-1.6292399168014526,-1.6673293113708496,-1.2846553325653076,-1.2683501243591309,-1.343017339706421,-1.532227873802185,-1.5228995084762573,-1.7653570175170898,-1.6635825634002686,-1.2188036441802979,-1.4371178150177002,-1.9437130689620972,-1.4426239728927612,-1.5780985355377197,-1.183030366897583,-1.1075459718704224,-2.161013126373291,-1.5405360460281372,-1.6532634496688843,-1.4157048463821411,-1.9272549152374268,-2.4558849334716797,-1.4863086938858032,-1.435260534286499,-1.4288241863250732,-1.6876364946365356,-1.4197076559066772,-0.957298994064331,-1.3266384601593018,-1.2782061100006104,-1.3659592866897583,-1.2955392599105835,-1.453205943107605,-1.456016182899475,-1.3526298999786377,-1.9864716529846191,-1.1368550062179565,-1.2771937847137451,-1.3720461130142212,-1.418861985206604,-2.389284610748291,-1.1145015954971313,-1.282052993774414,-1.5755375623703003,-4.130682945251465,-1.412063479423523,-1.402529239654541,-1.3929877281188965,-1.6222485303878784,-1.5275757312774658,-1.617692232131958,-1.6316800117492676,-2.719006299972534,-1.8592594861984253,-1.90023934841156,-1.453260064125061,-1.4438244104385376,-1.267889380455017,-1.5882240533828735,-1.609988808631897,-1.3489590883255005,-1.165694236755371,-1.4615410566329956,-1.4587997198104858,-1.6465452909469604,-1.4654394388198853,-1.4977198839187622],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}},"xaxis":{"zeroline":false},"yaxis":{"zeroline":false}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('5de30267-e5a5-41d6-b2a1-bac7aaa8c2c3');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<div class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(X):</span>
<span id="cb75-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, bs):</span>
<span id="cb75-3">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>(i, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs, n))</span>
<span id="cb75-4">    dists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X[s][:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...]).square().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sqrt()</span>
<span id="cb75-5">    ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> egauss_kernel(dists, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span>
<span id="cb75-6">    X[s] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ws.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb75-7"></span>
<span id="cb75-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> meanshift(data):</span>
<span id="cb75-9">   X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.clone()</span>
<span id="cb75-10">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): update(X)</span>
<span id="cb75-11">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X</span></code></pre></div>
</div>
<div class="cell" data-outputid="15ddeb85-78c3-4d92-fe82-d223f48bb50e" data-execution_count="74">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">plot_data(centroids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, meanshift(data), n_samples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>                            <div id="654d9cc7-3614-41d0-b4ce-08eacb514c96" class="plotly-graph-div" style="height:576px; width:1024px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("654d9cc7-3614-41d0-b4ce-08eacb514c96")) {                    Plotly.newPlot(                        "654d9cc7-3614-41d0-b4ce-08eacb514c96",                        [{"marker":{"color":"#636EFA","size":3},"mode":"markers","name":"cluster 0","x":[-17.712263107299805,-17.712265014648438,-17.712265014648438,-17.712263107299805,-17.712265014648438,-17.712261199951172,-17.712263107299805,-17.712263107299805,-17.712583541870117,-17.712583541870117,-17.712583541870117,-17.712583541870117,-17.712583541870117,-17.712583541870117,-17.712583541870117,-17.712583541870117,-17.71286964416504,-17.71286964416504,-17.71286964416504,-17.71286964416504,-17.71286964416504,-17.71286964416504,-17.71286964416504,-17.71286964416504,-17.713134765625,-17.713134765625,-17.713134765625,-17.713134765625,-17.713134765625,-17.713134765625,-17.713134765625,-17.713134765625,-17.71337890625,-17.71337890625,-17.71337890625,-17.71337890625,-17.71337890625,-17.71337890625,-17.713380813598633,-17.713380813598633,-17.713594436645508,-17.713594436645508,-17.713594436645508,-17.713594436645508,-17.713594436645508,-17.713594436645508,-17.713594436645508,-17.713594436645508,-17.713804244995117,-17.713804244995117,-17.713804244995117,-17.713804244995117,-17.713804244995117,-17.713804244995117,-17.713804244995117,-17.713804244995117,-17.71398162841797,-17.71398162841797,-17.71398162841797,-17.71398162841797,-17.71398162841797,-17.71398162841797,-17.7139835357666,-17.71398162841797,-17.714149475097656,-17.714149475097656,-17.714149475097656,-17.714149475097656,-17.714149475097656,-17.714149475097656,-17.71415138244629,-17.71415138244629,-17.714303970336914,-17.714303970336914,-17.714303970336914,-17.714303970336914,-17.714303970336914,-17.714303970336914,-17.714303970336914,-17.714303970336914,-17.714448928833008,-17.714448928833008,-17.714448928833008,-17.714448928833008,-17.714448928833008,-17.714448928833008,-17.714448928833008,-17.714448928833008,-17.714584350585938,-17.714584350585938,-17.714584350585938,-17.714584350585938,-17.714584350585938,-17.714584350585938,-17.714584350585938,-17.714584350585938,-17.7147159576416,-17.7147159576416,-17.7147159576416,-17.7147159576416,-17.7147159576416,-17.7147159576416,-17.714712142944336,-17.714712142944336,-17.7148494720459,-17.7148494720459,-17.7148494720459,-17.7148494720459,-17.7148494720459,-17.7148494720459,-17.714845657348633,-17.714845657348633,-17.7149658203125,-17.7149658203125,-17.7149658203125,-17.7149658203125,-17.7149658203125,-17.7149658203125,-17.714962005615234,-17.714962005615234,-17.7150821685791,-17.7150821685791,-17.7150821685791,-17.7150821685791,-17.715084075927734,-17.7150821685791,-17.71508026123047,-17.71508026123047,-17.715200424194336,-17.715200424194336,-17.715200424194336,-17.715200424194336,-17.715200424194336,-17.715200424194336,-17.71519660949707,-17.71519660949707,-17.715330123901367,-17.715330123901367,-17.715330123901367,-17.715330123901367,-17.715330123901367,-17.715330123901367,-17.715328216552734,-17.715328216552734,-17.7154598236084,-17.7154598236084,-17.7154598236084,-17.7154598236084,-17.7154598236084,-17.7154598236084,-17.715457916259766,-17.715457916259766,-17.715591430664062,-17.715591430664062,-17.715591430664062,-17.715591430664062,-17.715591430664062,-17.715591430664062,-17.71558952331543,-17.71558952331543,-17.715715408325195,-17.715715408325195,-17.715715408325195,-17.715715408325195,-17.715715408325195,-17.715715408325195,-17.715713500976562,-17.715713500976562,-17.715843200683594,-17.715843200683594,-17.715843200683594,-17.715843200683594,-17.715843200683594,-17.715843200683594,-17.715839385986328,-17.715839385986328,-17.715970993041992,-17.715970993041992,-17.715970993041992,-17.715970993041992,-17.715970993041992,-17.715970993041992,-17.715967178344727,-17.715967178344727,-17.716100692749023,-17.716100692749023,-17.716100692749023,-17.716100692749023,-17.716100692749023,-17.716100692749023,-17.71609878540039,-17.71609878540039,-17.71624183654785,-17.71624183654785,-17.71624183654785,-17.71624183654785,-17.71624183654785,-17.71624183654785,-17.716238021850586,-17.716238021850586,-17.71637535095215,-17.71637535095215,-17.71637535095215,-17.71637535095215,-17.71637535095215,-17.71637535095215,-17.716373443603516,-17.716373443603516,-17.71651840209961,-17.71651840209961,-17.71651840209961,-17.71651840209961,-17.71651840209961,-17.71651840209961,-17.716514587402344,-17.716514587402344,-17.716663360595703,-17.716663360595703,-17.716663360595703,-17.716663360595703,-17.716663360595703,-17.716663360595703,-17.71666145324707,-17.71666145324707,-17.716812133789062,-17.716812133789062,-17.716812133789062,-17.716812133789062,-17.716812133789062,-17.716812133789062,-17.716812133789062,-17.716812133789062,-17.716957092285156,-17.716957092285156,-17.716957092285156,-17.716957092285156,-17.716957092285156,-17.716957092285156,-17.716957092285156,-17.716957092285156,-17.717111587524414,-17.717111587524414,-17.717111587524414,-17.717111587524414,-17.717111587524414,-17.717111587524414,-17.717111587524414,-17.717111587524414,-17.717269897460938,-17.717269897460938],"y":[-28.322824478149414,-28.322824478149414,-28.322824478149414,-28.322824478149414,-28.322824478149414,-28.322824478149414,-28.322824478149414,-28.322824478149414,-28.322784423828125,-28.32278823852539,-28.32278823852539,-28.32278823852539,-28.32278823852539,-28.32278823852539,-28.32278823852539,-28.32278823852539,-28.32274055480957,-28.32274055480957,-28.32274055480957,-28.32274055480957,-28.32274055480957,-28.32274055480957,-28.32274055480957,-28.32274055480957,-28.322708129882812,-28.322708129882812,-28.322708129882812,-28.322708129882812,-28.322708129882812,-28.322708129882812,-28.322708129882812,-28.322708129882812,-28.32267951965332,-28.32267951965332,-28.32267951965332,-28.32267951965332,-28.32267951965332,-28.32267951965332,-28.32267951965332,-28.32267951965332,-28.32265281677246,-28.32265281677246,-28.32265281677246,-28.32265281677246,-28.32265281677246,-28.32265281677246,-28.32265281677246,-28.32265281677246,-28.322608947753906,-28.322608947753906,-28.322608947753906,-28.322608947753906,-28.322608947753906,-28.322608947753906,-28.322612762451172,-28.322612762451172,-28.32256507873535,-28.32256507873535,-28.32256507873535,-28.32256507873535,-28.32256507873535,-28.32256507873535,-28.322568893432617,-28.32256507873535,-28.322532653808594,-28.322532653808594,-28.322532653808594,-28.322532653808594,-28.322532653808594,-28.322532653808594,-28.322532653808594,-28.322532653808594,-28.322486877441406,-28.322486877441406,-28.322486877441406,-28.322486877441406,-28.322486877441406,-28.322486877441406,-28.322492599487305,-28.322492599487305,-28.322452545166016,-28.322452545166016,-28.322452545166016,-28.322452545166016,-28.322452545166016,-28.322452545166016,-28.322452545166016,-28.322452545166016,-28.322418212890625,-28.322418212890625,-28.322418212890625,-28.322418212890625,-28.322418212890625,-28.322418212890625,-28.322418212890625,-28.322418212890625,-28.322378158569336,-28.322378158569336,-28.322378158569336,-28.322378158569336,-28.322378158569336,-28.322378158569336,-28.322378158569336,-28.322378158569336,-28.32234764099121,-28.32234764099121,-28.32234764099121,-28.32234764099121,-28.32234764099121,-28.32234764099121,-28.322351455688477,-28.322351455688477,-28.322324752807617,-28.322324752807617,-28.322324752807617,-28.322324752807617,-28.322324752807617,-28.322324752807617,-28.32232093811035,-28.32232093811035,-28.32229995727539,-28.32229995727539,-28.32229995727539,-28.32229995727539,-28.322298049926758,-28.322298049926758,-28.322303771972656,-28.322303771972656,-28.322275161743164,-28.322275161743164,-28.322275161743164,-28.322275161743164,-28.322275161743164,-28.322275161743164,-28.322277069091797,-28.322277069091797,-28.322254180908203,-28.322254180908203,-28.322254180908203,-28.322254180908203,-28.322254180908203,-28.322254180908203,-28.322254180908203,-28.322254180908203,-28.322227478027344,-28.322227478027344,-28.322227478027344,-28.322227478027344,-28.322227478027344,-28.322227478027344,-28.322229385375977,-28.322229385375977,-28.322208404541016,-28.322208404541016,-28.322208404541016,-28.322208404541016,-28.322208404541016,-28.322208404541016,-28.322208404541016,-28.32221221923828,-28.322187423706055,-28.322187423706055,-28.322187423706055,-28.322187423706055,-28.322187423706055,-28.322187423706055,-28.32219123840332,-28.32219123840332,-28.322175979614258,-28.322168350219727,-28.322175979614258,-28.32217788696289,-28.322175979614258,-28.322175979614258,-28.322175979614258,-28.322175979614258,-28.322160720825195,-28.322160720825195,-28.322160720825195,-28.322160720825195,-28.322160720825195,-28.322160720825195,-28.322160720825195,-28.322160720825195,-28.322141647338867,-28.322141647338867,-28.322141647338867,-28.322141647338867,-28.3221378326416,-28.322141647338867,-28.322141647338867,-28.322141647338867,-28.322126388549805,-28.322126388549805,-28.322126388549805,-28.322126388549805,-28.322126388549805,-28.322126388549805,-28.322126388549805,-28.322126388549805,-28.322105407714844,-28.322105407714844,-28.322105407714844,-28.322105407714844,-28.322105407714844,-28.322105407714844,-28.322105407714844,-28.322105407714844,-28.32209014892578,-28.32209014892578,-28.32209014892578,-28.32209014892578,-28.32209014892578,-28.32209014892578,-28.32209014892578,-28.32209014892578,-28.322065353393555,-28.322065353393555,-28.322065353393555,-28.322065353393555,-28.322065353393555,-28.322065353393555,-28.322065353393555,-28.322065353393555,-28.322040557861328,-28.322040557861328,-28.322040557861328,-28.322040557861328,-28.322040557861328,-28.322040557861328,-28.322040557861328,-28.322040557861328,-28.3220157623291,-28.3220157623291,-28.3220157623291,-28.322019577026367,-28.3220157623291,-28.3220157623291,-28.322019577026367,-28.3220157623291,-28.32199478149414,-28.32199478149414,-28.32199478149414,-28.32199478149414,-28.32199478149414,-28.32199478149414,-28.32199478149414,-28.32199478149414,-28.321969985961914,-28.321969985961914],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 0","showlegend":false,"x":[-15.466012954711914],"y":[-26.38820457458496],"type":"scatter"},{"marker":{"color":"#EF553B","size":3},"mode":"markers","name":"cluster 1","x":[18.455707550048828,18.455707550048828,18.455707550048828,18.455707550048828,18.455707550048828,18.455707550048828,18.455718994140625,18.455718994140625,18.455718994140625,18.455718994140625,18.455718994140625,18.455718994140625,18.455718994140625,18.455718994140625,18.455730438232422,18.455730438232422,18.455730438232422,18.455730438232422,18.455730438232422,18.455730438232422,18.455730438232422,18.455730438232422,18.45574188232422,18.45574188232422,18.45574188232422,18.45574188232422,18.45574188232422,18.45574188232422,18.45574188232422,18.45574188232422,18.455751419067383,18.455751419067383,18.455751419067383,18.455751419067383,18.455751419067383,18.455751419067383,18.455751419067383,18.455751419067383,18.45575714111328,18.45575714111328,18.45575714111328,18.45575714111328,18.45575714111328,18.45575714111328,18.45575714111328,18.45575714111328,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.45576286315918,18.45576286315918,18.45576286315918,18.45576286315918,18.45576286315918,18.45576286315918,18.45576286315918,18.45576286315918,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.455760955810547,18.45575523376465,18.45575523376465,18.45575523376465,18.45575523376465,18.45575523376465,18.45575523376465,18.45575523376465,18.45575523376465,18.455745697021484,18.455745697021484,18.455745697021484,18.455745697021484,18.455745697021484,18.455745697021484,18.455745697021484,18.455745697021484,18.45573616027832,18.45573616027832,18.45573616027832,18.45573616027832,18.45573616027832,18.45573616027832,18.45573616027832,18.45573616027832,18.45572280883789,18.45572280883789,18.45572280883789,18.45572280883789,18.45572280883789,18.45572280883789,18.45572280883789,18.45572280883789,18.455713272094727,18.455713272094727,18.455713272094727,18.455713272094727,18.455713272094727,18.455713272094727,18.455713272094727,18.455713272094727,18.45570182800293,18.45570182800293,18.45570182800293,18.45570182800293,18.45570182800293,18.45570182800293,18.45570182800293,18.45570182800293,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.45567512512207,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.455677032470703,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.45568084716797,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.455686569213867,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455692291259766,18.455698013305664,18.455698013305664,18.455698013305664,18.455698013305664,18.455698013305664,18.455698013305664,18.455698013305664,18.455698013305664,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195,18.455705642700195],"y":[-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759259700775146,-3.6759259700775146,-3.6759259700775146,-3.6759259700775146,-3.6759259700775146,-3.6759259700775146,-3.6759259700775146,-3.6759259700775146,-3.675933599472046,-3.675933599472046,-3.675933599472046,-3.675933599472046,-3.675933599472046,-3.675933599472046,-3.675934076309204,-3.675934076309204,-3.67594051361084,-3.67594051361084,-3.67594051361084,-3.67594051361084,-3.67594051361084,-3.67594051361084,-3.67594051361084,-3.67594051361084,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.675948143005371,-3.675948143005371,-3.675948143005371,-3.675948143005371,-3.675948143005371,-3.675948143005371,-3.675947904586792,-3.675947904586792,-3.6759488582611084,-3.6759488582611084,-3.6759488582611084,-3.6759488582611084,-3.6759488582611084,-3.6759488582611084,-3.6759486198425293,-3.6759486198425293,-3.675948143005371,-3.675948143005371,-3.675948143005371,-3.675948143005371,-3.675948143005371,-3.675948143005371,-3.675947904586792,-3.675947904586792,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.675945520401001,-3.6759450435638428,-3.6759450435638428,-3.675941228866577,-3.675941228866577,-3.675941228866577,-3.675941228866577,-3.675941228866577,-3.675941228866577,-3.675940990447998,-3.675940990447998,-3.675936460494995,-3.675936460494995,-3.675936460494995,-3.675936460494995,-3.675936460494995,-3.675936460494995,-3.675935983657837,-3.675935983657837,-3.675930976867676,-3.675930976867676,-3.675930976867676,-3.675930976867676,-3.675930976867676,-3.675930976867676,-3.6759305000305176,-3.6759305000305176,-3.6759257316589355,-3.6759257316589355,-3.6759257316589355,-3.6759257316589355,-3.6759257316589355,-3.6759257316589355,-3.6759252548217773,-3.6759252548217773,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759207248687744,-3.6759207248687744,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.675912618637085,-3.675912618637085,-3.675912618637085,-3.675912618637085,-3.675912618637085,-3.675912618637085,-3.675912618637085,-3.675912618637085,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.675908088684082,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.6759088039398193,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.675910234451294,-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759119033813477,-3.6759133338928223,-3.6759133338928223,-3.6759133338928223,-3.6759133338928223,-3.6759133338928223,-3.6759133338928223,-3.6759133338928223,-3.6759133338928223,-3.675915002822876,-3.675915002822876,-3.675915002822876,-3.675915002822876,-3.675915002822876,-3.675915002822876,-3.675915002822876,-3.675915002822876,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759164333343506,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.6759181022644043,-3.675919532775879,-3.675919532775879,-3.675919532775879,-3.675919532775879,-3.675919532775879,-3.675919532775879,-3.675919532775879,-3.675919532775879,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759209632873535,-3.6759226322174072,-3.6759226322174072,-3.6759226322174072,-3.6759226322174072],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 1","showlegend":false,"x":[20.487552642822266],"y":[-1.6749706268310547],"type":"scatter"},{"marker":{"color":"#00CC96","size":3},"mode":"markers","name":"cluster 2","x":[-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910726547241211,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910724639892578,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910725593566895,-10.910727500915527,-10.910727500915527,-10.910727500915527,-10.910727500915527,-10.910727500915527,-10.910727500915527,-10.910727500915527,-10.910727500915527,-10.910728454589844,-10.910728454589844,-10.910728454589844,-10.910728454589844,-10.910728454589844,-10.910728454589844,-10.910728454589844,-10.910728454589844,-10.91072940826416,-10.91072940826416,-10.91072940826416,-10.91072940826416,-10.91072940826416,-10.91072940826416,-10.91072940826416,-10.91072940826416,-10.910731315612793,-10.910731315612793,-10.910731315612793,-10.910731315612793,-10.910731315612793,-10.910731315612793,-10.910731315612793,-10.910731315612793,-10.910733222961426,-10.910733222961426,-10.910733222961426,-10.910733222961426,-10.910733222961426,-10.910733222961426,-10.910733222961426,-10.910733222961426,-10.910736083984375,-10.910736083984375,-10.910736083984375,-10.910736083984375,-10.910736083984375,-10.910736083984375,-10.910736083984375,-10.910736083984375,-10.91073989868164,-10.91073989868164,-10.91073989868164,-10.91073989868164,-10.91073989868164,-10.91073989868164,-10.91073989868164,-10.91073989868164,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910748481750488,-10.910748481750488,-10.910748481750488,-10.910748481750488,-10.910748481750488,-10.910748481750488,-10.910748481750488,-10.910748481750488,-10.910752296447754,-10.910752296447754,-10.910752296447754,-10.910752296447754,-10.910752296447754,-10.910752296447754,-10.910752296447754,-10.910752296447754,-10.910755157470703,-10.910755157470703,-10.910755157470703,-10.910755157470703,-10.910755157470703,-10.910755157470703,-10.910755157470703,-10.910755157470703,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075611114502,-10.91075325012207,-10.91075325012207,-10.91075325012207,-10.91075325012207,-10.91075325012207,-10.91075325012207,-10.91075325012207,-10.91075325012207,-10.910750389099121,-10.910750389099121,-10.910750389099121,-10.910750389099121,-10.910750389099121,-10.910750389099121,-10.910750389099121,-10.910750389099121,-10.910747528076172,-10.910747528076172,-10.910747528076172,-10.910747528076172,-10.910747528076172,-10.910747528076172,-10.910747528076172,-10.910747528076172,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223,-10.910744667053223],"y":[23.63922882080078,23.63922882080078,23.639230728149414,23.639230728149414,23.639223098754883,23.639223098754883,23.639223098754883,23.639223098754883,23.639223098754883,23.639223098754883,23.639223098754883,23.639223098754883,23.639211654663086,23.639211654663086,23.639211654663086,23.639211654663086,23.639211654663086,23.639211654663086,23.63921356201172,23.63921356201172,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.63920783996582,23.639211654663086,23.639211654663086,23.639211654663086,23.639211654663086,23.639211654663086,23.639211654663086,23.63921356201172,23.63921356201172,23.63922119140625,23.63922119140625,23.63922119140625,23.63922119140625,23.63922119140625,23.63922119140625,23.639223098754883,23.639223098754883,23.63922882080078,23.63922882080078,23.63922882080078,23.63922882080078,23.63922882080078,23.63922882080078,23.639230728149414,23.639230728149414,23.639238357543945,23.639238357543945,23.639238357543945,23.639238357543945,23.639238357543945,23.639238357543945,23.639240264892578,23.639240264892578,23.639249801635742,23.639249801635742,23.639249801635742,23.639249801635742,23.639249801635742,23.639249801635742,23.639249801635742,23.639249801635742,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.63926887512207,23.63926887512207,23.63926887512207,23.63926887512207,23.63926887512207,23.63926887512207,23.63926887512207,23.63926887512207,23.639278411865234,23.639278411865234,23.639278411865234,23.639278411865234,23.639278411865234,23.639278411865234,23.639278411865234,23.639278411865234,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639291763305664,23.639291763305664,23.639291763305664,23.639291763305664,23.639291763305664,23.639291763305664,23.639291763305664,23.639291763305664,23.639293670654297,23.639293670654297,23.639293670654297,23.639293670654297,23.639293670654297,23.639293670654297,23.639293670654297,23.639293670654297,23.639297485351562,23.639297485351562,23.639297485351562,23.639297485351562,23.639297485351562,23.639297485351562,23.639299392700195,23.639299392700195,23.639301300048828,23.639301300048828,23.639301300048828,23.639301300048828,23.639301300048828,23.639301300048828,23.639301300048828,23.639301300048828,23.63930320739746,23.63930320739746,23.63930320739746,23.63930320739746,23.63930320739746,23.63930320739746,23.639305114746094,23.639305114746094,23.63930320739746,23.63930320739746,23.63930320739746,23.63930320739746,23.63930320739746,23.63930320739746,23.639305114746094,23.639305114746094,23.63930320739746,23.63930320739746,23.63930320739746,23.63930320739746,23.63930320739746,23.63930320739746,23.639305114746094,23.639305114746094,23.639297485351562,23.639297485351562,23.639297485351562,23.639297485351562,23.639297485351562,23.639297485351562,23.639299392700195,23.639299392700195,23.639291763305664,23.639291763305664,23.639291763305664,23.639291763305664,23.639291763305664,23.639291763305664,23.639293670654297,23.639293670654297,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639286041259766,23.639278411865234,23.639278411865234,23.639278411865234,23.639278411865234,23.639278411865234,23.639278411865234,23.639280319213867,23.639280319213867,23.639272689819336,23.639272689819336,23.639272689819336,23.639272689819336,23.639272689819336,23.639272689819336,23.63927459716797,23.63927459716797,23.639266967773438,23.639266967773438,23.639266967773438,23.639266967773438,23.639266967773438,23.639266967773438,23.63926887512207,23.63926887512207,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.63926124572754,23.639253616333008,23.639253616333008,23.639253616333008,23.639253616333008,23.639253616333008,23.639253616333008,23.63925552368164,23.63925552368164,23.63924789428711,23.63924789428711,23.63924789428711,23.63924789428711,23.63924789428711,23.63924789428711,23.639249801635742,23.639249801635742,23.63924789428711,23.63924789428711,23.63924789428711,23.63924789428711,23.63924789428711,23.63924789428711,23.639249801635742,23.639249801635742,23.63924789428711,23.63924789428711,23.63924789428711,23.63924789428711,23.63924789428711,23.63924789428711],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 2","showlegend":false,"x":[-8.945348739624023],"y":[25.481624603271484],"type":"scatter"},{"marker":{"color":"#AB63FA","size":3},"mode":"markers","name":"cluster 3","x":[-27.80105209350586,-27.801048278808594,-27.801006317138672,-27.801006317138672,-27.801006317138672,-27.801006317138672,-27.801006317138672,-27.801006317138672,-27.801006317138672,-27.801006317138672,-27.800817489624023,-27.800817489624023,-27.800817489624023,-27.800817489624023,-27.800817489624023,-27.800817489624023,-27.800817489624023,-27.800817489624023,-27.800647735595703,-27.800647735595703,-27.800647735595703,-27.800647735595703,-27.800647735595703,-27.800647735595703,-27.80064582824707,-27.80064582824707,-27.800472259521484,-27.800472259521484,-27.800472259521484,-27.800472259521484,-27.800472259521484,-27.800472259521484,-27.800472259521484,-27.800472259521484,-27.800308227539062,-27.800308227539062,-27.800308227539062,-27.800308227539062,-27.800308227539062,-27.800308227539062,-27.800308227539062,-27.800308227539062,-27.800153732299805,-27.800153732299805,-27.800153732299805,-27.800153732299805,-27.800153732299805,-27.800153732299805,-27.800153732299805,-27.800153732299805,-27.800006866455078,-27.800006866455078,-27.800006866455078,-27.800006866455078,-27.800006866455078,-27.800006866455078,-27.800006866455078,-27.80000877380371,-27.799867630004883,-27.799867630004883,-27.799867630004883,-27.799867630004883,-27.799867630004883,-27.799867630004883,-27.799867630004883,-27.799867630004883,-27.79972267150879,-27.79972267150879,-27.79972267150879,-27.79972267150879,-27.79972267150879,-27.79972267150879,-27.79972267150879,-27.79972267150879,-27.799591064453125,-27.799591064453125,-27.799591064453125,-27.799591064453125,-27.799591064453125,-27.799591064453125,-27.799591064453125,-27.799591064453125,-27.79946517944336,-27.79946517944336,-27.79946517944336,-27.79946517944336,-27.79946517944336,-27.79946517944336,-27.79946517944336,-27.79946517944336,-27.79933738708496,-27.79933738708496,-27.79933738708496,-27.79933738708496,-27.79933738708496,-27.79933738708496,-27.79933738708496,-27.79933738708496,-27.79921531677246,-27.79921531677246,-27.79921531677246,-27.79921531677246,-27.79921531677246,-27.79921531677246,-27.799217224121094,-27.799217224121094,-27.799095153808594,-27.799095153808594,-27.799095153808594,-27.799091339111328,-27.799095153808594,-27.799091339111328,-27.799095153808594,-27.799095153808594,-27.798969268798828,-27.798969268798828,-27.798969268798828,-27.798969268798828,-27.798969268798828,-27.798969268798828,-27.79897117614746,-27.79897117614746,-27.798837661743164,-27.79883575439453,-27.79883575439453,-27.79883575439453,-27.79883575439453,-27.79883575439453,-27.798839569091797,-27.798839569091797,-27.798709869384766,-27.798709869384766,-27.798709869384766,-27.798709869384766,-27.798709869384766,-27.798709869384766,-27.798709869384766,-27.798709869384766,-27.798559188842773,-27.798559188842773,-27.798559188842773,-27.798559188842773,-27.798559188842773,-27.798559188842773,-27.798559188842773,-27.798559188842773,-27.798412322998047,-27.798412322998047,-27.798412322998047,-17.717317581176758,-27.798412322998047,-27.798412322998047,-27.798416137695312,-27.798416137695312,-27.798290252685547,-27.798290252685547,-27.798290252685547,-27.798290252685547,-27.798290252685547,-27.798290252685547,-27.798290252685547,-27.798290252685547,-27.798139572143555,-27.798139572143555,-27.798139572143555,-27.798139572143555,-27.798139572143555,-27.798139572143555,-27.798139572143555,-27.798139572143555,-27.797990798950195,-27.797990798950195,-27.797990798950195,-27.797990798950195,-27.797990798950195,-27.797990798950195,-27.79799461364746,-27.79799461364746,-27.79783821105957,-27.79783821105957,-27.79783821105957,-27.79783821105957,-27.79783821105957,-27.79783821105957,-27.79784393310547,-27.79784393310547,-27.797683715820312,-27.797683715820312,-27.797683715820312,-27.797683715820312,-27.79768180847168,-27.797683715820312,-27.797691345214844,-27.797691345214844,-27.79752540588379,-27.79752540588379,-27.79752540588379,-27.79752540588379,-27.79752540588379,-27.79752540588379,-27.797531127929688,-27.797531127929688,-27.7973690032959,-27.7973690032959,-27.7973690032959,-27.7973690032959,-27.7973690032959,-27.7973690032959,-27.7973690032959,-27.7973690032959,-27.797208786010742,-27.797208786010742,-27.797208786010742,-27.797208786010742,-27.797208786010742,-27.797208786010742,-27.797212600708008,-27.797212600708008,-27.797048568725586,-27.797048568725586,-27.797048568725586,-27.797048568725586,-27.797048568725586,-27.797048568725586,-27.797048568725586,-27.797048568725586,-27.796899795532227,-27.796899795532227,-27.796899795532227,-27.796899795532227,-27.796899795532227,-27.796899795532227,-27.796897888183594,-27.796897888183594,-27.7967472076416,-27.7967472076416,-27.7967472076416,-27.7967472076416,-27.7967472076416,-27.7967472076416,-27.7967472076416,-27.7967472076416,-27.79659080505371,-27.79659080505371,-27.79659080505371,-27.79659080505371,-27.79659080505371,-27.79659080505371,-27.79659080505371,-27.79659080505371],"y":[-26.64657974243164,-26.64657974243164,-26.64658546447754,-26.64658546447754,-26.64658546447754,-26.64658546447754,-26.64658546447754,-26.64658546447754,-26.646589279174805,-26.646589279174805,-26.646631240844727,-26.646631240844727,-26.646631240844727,-26.646631240844727,-26.646631240844727,-26.646631240844727,-26.646631240844727,-26.646631240844727,-26.646684646606445,-26.646684646606445,-26.646684646606445,-26.646684646606445,-26.646684646606445,-26.646684646606445,-26.646684646606445,-26.646684646606445,-26.646717071533203,-26.646717071533203,-26.646717071533203,-26.646717071533203,-26.646717071533203,-26.646717071533203,-26.646718978881836,-26.646718978881836,-26.646760940551758,-26.646764755249023,-26.646764755249023,-26.646764755249023,-26.646759033203125,-26.646764755249023,-26.646759033203125,-26.646759033203125,-26.64679527282715,-26.64679527282715,-26.64679527282715,-26.64679527282715,-26.64679527282715,-26.64679527282715,-26.64679527282715,-26.64679527282715,-26.646821975708008,-26.646821975708008,-26.646821975708008,-26.646821975708008,-26.646821975708008,-26.646821975708008,-26.646821975708008,-26.646820068359375,-26.64684295654297,-26.64684295654297,-26.64684295654297,-26.64684295654297,-26.64684295654297,-26.64684295654297,-26.646841049194336,-26.646841049194336,-26.646865844726562,-26.646865844726562,-26.646865844726562,-26.646865844726562,-26.646865844726562,-26.646865844726562,-26.646865844726562,-26.646865844726562,-26.646888732910156,-26.646888732910156,-26.646888732910156,-26.646888732910156,-26.646888732910156,-26.646888732910156,-26.646888732910156,-26.646888732910156,-26.646913528442383,-26.646913528442383,-26.646913528442383,-26.646913528442383,-26.646913528442383,-26.646913528442383,-26.646913528442383,-26.646913528442383,-26.64693260192871,-26.64693260192871,-26.64693260192871,-26.64693260192871,-26.64693260192871,-26.64693260192871,-26.64693260192871,-26.64693260192871,-26.646953582763672,-26.646953582763672,-26.646953582763672,-26.646953582763672,-26.646953582763672,-26.646953582763672,-26.646953582763672,-26.646953582763672,-26.64697265625,-26.64697265625,-26.64697265625,-26.64697265625,-26.64697265625,-26.64697265625,-26.64697265625,-26.64697265625,-26.64699363708496,-26.64699363708496,-26.64699363708496,-26.64699363708496,-26.64699363708496,-26.64699363708496,-26.64699363708496,-26.64699363708496,-26.64701271057129,-26.647014617919922,-26.647014617919922,-26.647014617919922,-26.647014617919922,-26.647014617919922,-26.647014617919922,-26.647014617919922,-26.647035598754883,-26.647035598754883,-26.647035598754883,-26.647035598754883,-26.647035598754883,-26.647035598754883,-26.647035598754883,-26.647035598754883,-26.64706039428711,-26.64706039428711,-26.64706039428711,-26.64706039428711,-26.64706039428711,-26.64706039428711,-26.64706039428711,-26.64706039428711,-26.64708709716797,-26.64708709716797,-26.64708709716797,-28.321962356567383,-26.64708709716797,-26.64708709716797,-26.64708709716797,-26.64708709716797,-26.647109985351562,-26.647109985351562,-26.647109985351562,-26.647109985351562,-26.647109985351562,-26.647109985351562,-26.647109985351562,-26.647109985351562,-26.64713478088379,-26.64713478088379,-26.64713478088379,-26.647136688232422,-26.64713478088379,-26.64713478088379,-26.647136688232422,-26.647136688232422,-26.64716148376465,-26.64716148376465,-26.64716148376465,-26.64716148376465,-26.64716148376465,-26.64716148376465,-26.64716148376465,-26.64716148376465,-26.647180557250977,-26.647180557250977,-26.647180557250977,-26.647180557250977,-26.647180557250977,-26.647180557250977,-26.647180557250977,-26.647180557250977,-26.647201538085938,-26.647201538085938,-26.647201538085938,-26.647201538085938,-26.647199630737305,-26.647201538085938,-26.647201538085938,-26.647201538085938,-26.647220611572266,-26.647220611572266,-26.647220611572266,-26.647220611572266,-26.647220611572266,-26.647220611572266,-26.6472225189209,-26.6472225189209,-26.647239685058594,-26.647239685058594,-26.647239685058594,-26.647239685058594,-26.647239685058594,-26.647239685058594,-26.647241592407227,-26.647241592407227,-26.647275924682617,-26.647275924682617,-26.647275924682617,-26.647275924682617,-26.647275924682617,-26.647275924682617,-26.647275924682617,-26.647275924682617,-26.647293090820312,-26.647293090820312,-26.647293090820312,-26.647293090820312,-26.647293090820312,-26.647293090820312,-26.647293090820312,-26.647293090820312,-26.647321701049805,-26.647321701049805,-26.647321701049805,-26.647321701049805,-26.647321701049805,-26.647321701049805,-26.647321701049805,-26.647321701049805,-26.647342681884766,-26.647342681884766,-26.647342681884766,-26.647342681884766,-26.647342681884766,-26.647342681884766,-26.647342681884766,-26.647342681884766,-26.647377014160156,-26.647377014160156,-26.647377014160156,-26.647377014160156,-26.647377014160156,-26.647377014160156,-26.647371292114258,-26.647371292114258],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 3","showlegend":false,"x":[-25.84868049621582],"y":[-24.722427368164062],"type":"scatter"},{"marker":{"color":"#FFA15A","size":3},"mode":"markers","name":"cluster 4","x":[20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.77896499633789,20.778968811035156,20.778968811035156,20.778968811035156,20.778968811035156,20.778968811035156,20.778968811035156,20.778968811035156,20.778968811035156,20.778974533081055,20.778974533081055,20.778974533081055,20.778974533081055,20.778974533081055,20.778974533081055,20.778972625732422,20.778972625732422,20.778982162475586,20.778982162475586,20.778982162475586,20.778982162475586,20.778982162475586,20.778982162475586,20.778982162475586,20.778982162475586,20.77899169921875,20.77899169921875,20.77899169921875,20.77899169921875,20.77899169921875,20.77899169921875,20.77899169921875,20.77899169921875,20.779003143310547,20.779003143310547,20.779003143310547,20.779003143310547,20.779003143310547,20.779003143310547,20.779001235961914,20.779001235961914,20.779014587402344,20.779014587402344,20.779014587402344,20.779014587402344,20.779014587402344,20.779014587402344,20.77901268005371,20.77901268005371,20.779024124145508,20.779024124145508,20.779024124145508,20.779024124145508,20.779024124145508,20.779024124145508,20.779022216796875,20.779022216796875,20.77903175354004,20.77903175354004,20.77903175354004,20.77903175354004,20.77903175354004,20.77903175354004,20.77903175354004,20.77903175354004,20.77903938293457,20.77903938293457,20.77903938293457,20.77903938293457,20.77903938293457,20.77903938293457,20.779037475585938,20.779037475585938,20.77904510498047,20.77904510498047,20.77904510498047,20.77904510498047,20.77904510498047,20.77904510498047,20.779043197631836,20.779043197631836,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779052734375,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.779048919677734,20.7790470123291,20.7790470123291,20.7790470123291,20.7790470123291,20.7790470123291,20.7790470123291,20.7790470123291,20.7790470123291,20.779043197631836,20.779043197631836,20.779043197631836,20.779043197631836,20.779043197631836,20.779043197631836,20.779043197631836,20.779043197631836,20.779041290283203,20.779041290283203,20.779041290283203,20.779041290283203,20.779041290283203,20.779041290283203,20.779041290283203,20.779041290283203,20.779037475585938,20.779037475585938,20.779037475585938,20.779037475585938,20.779037475585938,20.779037475585938,20.779037475585938,20.779037475585938,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.77903175354004,20.77903175354004,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.77903175354004,20.77903175354004,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.77903175354004,20.77903175354004,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.77903175354004,20.77903175354004,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.77903175354004,20.77903175354004,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.77903175354004,20.77903175354004,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.77903175354004,20.77903175354004,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.779033660888672,20.77903175354004,20.77903175354004,20.779033660888672,20.779033660888672],"y":[17.333229064941406,17.333229064941406,17.333229064941406,17.333229064941406,17.333229064941406,17.333229064941406,17.333229064941406,17.333229064941406,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.33322525024414,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333221435546875,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333219528198242,17.333219528198242,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333219528198242,17.333219528198242,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333219528198242,17.333219528198242,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333219528198242,17.333219528198242,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333219528198242,17.333219528198242,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333215713500977,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242,17.333219528198242],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 4","showlegend":false,"x":[22.733112335205078],"y":[19.396018981933594],"type":"scatter"},{"marker":{"color":"#19D3F3","size":3},"mode":"markers","name":"cluster 5","x":[-33.797489166259766,-33.797489166259766,-33.797489166259766,-33.797489166259766,-33.79749298095703,-33.79749298095703,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.79750061035156,-33.79750061035156,-33.79750442504883,-33.79750442504883,-33.79750442504883,-33.79750442504883,-33.79750442504883,-33.79750442504883,-33.79750442504883,-33.79750442504883,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.79751205444336,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.797508239746094,-33.79750061035156,-33.79750061035156,-33.79750061035156,-33.79750061035156,-33.79750061035156,-33.79750061035156,-33.79750442504883,-33.79750442504883,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.7974967956543,-33.7974853515625,-33.7974853515625,-33.7974853515625,-33.7974853515625,-33.7974853515625,-33.7974853515625,-33.7974853515625,-33.7974853515625,-33.79747009277344,-33.79747009277344,-33.79747009277344,-33.79747009277344,-33.79747009277344,-33.79747009277344,-33.79747009277344,-33.79747009277344,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79741668701172,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.79742431640625,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.797428131103516,-33.79743576049805,-33.79743576049805,-33.79743576049805,-33.79743576049805,-33.79743576049805,-33.79743576049805,-33.79743576049805,-33.79743576049805,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.79743957519531,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.797447204589844,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164,-33.79745864868164],"y":[-1.4645664691925049,-1.4645664691925049,-1.4645664691925049,-1.4645664691925049,-1.4645664691925049,-1.4645664691925049,-1.4645878076553345,-1.4645878076553345,-1.4645878076553345,-1.4645878076553345,-1.4645878076553345,-1.4645878076553345,-1.4645878076553345,-1.4645878076553345,-1.4646105766296387,-1.4646105766296387,-1.4646105766296387,-1.4646105766296387,-1.4646105766296387,-1.4646105766296387,-1.4646105766296387,-1.4646105766296387,-1.4646260738372803,-1.4646260738372803,-1.4646260738372803,-1.4646260738372803,-1.4646260738372803,-1.4646260738372803,-1.4646260738372803,-1.4646260738372803,-1.4646352529525757,-1.4646352529525757,-1.4646352529525757,-1.4646352529525757,-1.4646352529525757,-1.4646352529525757,-1.4646352529525757,-1.4646352529525757,-1.464639663696289,-1.464639663696289,-1.464639663696289,-1.464639663696289,-1.464639663696289,-1.464639663696289,-1.464639663696289,-1.464639663696289,-1.4646400213241577,-1.4646400213241577,-1.4646400213241577,-1.4646400213241577,-1.4646400213241577,-1.4646400213241577,-1.4646400213241577,-1.4646400213241577,-1.464638113975525,-1.464638113975525,-1.464638113975525,-1.464638113975525,-1.464638113975525,-1.464638113975525,-1.464638113975525,-1.464638113975525,-1.464633822441101,-1.464633822441101,-1.464633822441101,-1.464633822441101,-1.464633822441101,-1.464633822441101,-1.464633822441101,-1.464633822441101,-1.464627981185913,-1.464627981185913,-1.464627981185913,-1.464627981185913,-1.464627981185913,-1.464627981185913,-1.464627981185913,-1.464627981185913,-1.4646207094192505,-1.4646207094192505,-1.4646207094192505,-1.4646207094192505,-1.4646207094192505,-1.4646207094192505,-1.4646207094192505,-1.4646207094192505,-1.4646128416061401,-1.4646128416061401,-1.4646128416061401,-1.4646128416061401,-1.4646128416061401,-1.4646128416061401,-1.4646128416061401,-1.4646128416061401,-1.464604377746582,-1.464604377746582,-1.464604377746582,-1.464604377746582,-1.464604377746582,-1.464604377746582,-1.4646046161651611,-1.4646046161651611,-1.4645957946777344,-1.4645957946777344,-1.4645957946777344,-1.4645957946777344,-1.4645957946777344,-1.4645957946777344,-1.4645960330963135,-1.4645960330963135,-1.464586615562439,-1.464586615562439,-1.464586615562439,-1.464586615562439,-1.464586615562439,-1.464586615562439,-1.464586853981018,-1.464586853981018,-1.4645774364471436,-1.4645774364471436,-1.4645774364471436,-1.4645774364471436,-1.4645774364471436,-1.4645774364471436,-1.4645776748657227,-1.4645776748657227,-1.4645694494247437,-1.4645694494247437,-1.4645694494247437,-1.4645694494247437,-1.4645694494247437,-1.4645694494247437,-1.4645695686340332,-1.4645695686340332,-1.4645625352859497,-1.4645625352859497,-1.4645625352859497,-1.4645625352859497,-1.4645625352859497,-1.4645625352859497,-1.4645627737045288,-1.4645627737045288,-1.46455717086792,-1.46455717086792,-1.46455717086792,-1.46455717086792,-1.46455717086792,-1.46455717086792,-1.464557409286499,-1.464557409286499,-1.4645535945892334,-1.4645535945892334,-1.4645535945892334,-1.4645535945892334,-1.4645535945892334,-1.4645535945892334,-1.464553713798523,-1.464553713798523,-1.4645516872406006,-1.4645516872406006,-1.4645516872406006,-1.4645516872406006,-1.4645516872406006,-1.4645516872406006,-1.4645518064498901,-1.4645518064498901,-1.4645516872406006,-1.4645516872406006,-1.4645516872406006,-1.4645516872406006,-1.4645516872406006,-1.4645516872406006,-1.4645518064498901,-1.4645518064498901,-1.4645532369613647,-1.4645532369613647,-1.4645532369613647,-1.4645532369613647,-1.4645532369613647,-1.4645532369613647,-1.4645533561706543,-1.4645533561706543,-1.4645562171936035,-1.4645562171936035,-1.4645562171936035,-1.4645562171936035,-1.4645562171936035,-1.4645562171936035,-1.4645564556121826,-1.4645564556121826,-1.4645603895187378,-1.4645603895187378,-1.4645603895187378,-1.4645603895187378,-1.4645603895187378,-1.4645603895187378,-1.464560627937317,-1.464560627937317,-1.4645650386810303,-1.4645650386810303,-1.4645650386810303,-1.4645650386810303,-1.4645650386810303,-1.4645650386810303,-1.4645652770996094,-1.4645652770996094,-1.4645700454711914,-1.4645700454711914,-1.4645700454711914,-1.4645700454711914,-1.4645700454711914,-1.4645700454711914,-1.464570164680481,-1.464570164680481,-1.464574933052063,-1.464574933052063,-1.464574933052063,-1.464574933052063,-1.464574933052063,-1.464574933052063,-1.464575171470642,-1.464575171470642,-1.4645795822143555,-1.4645795822143555,-1.4645795822143555,-1.4645795822143555,-1.4645795822143555,-1.4645795822143555,-1.464579701423645,-1.464579701423645,-1.4645837545394897,-1.4645837545394897,-1.4645837545394897,-1.4645837545394897,-1.4645837545394897,-1.4645837545394897,-1.4645839929580688,-1.4645839929580688,-1.4645872116088867,-1.4645872116088867,-1.4645872116088867,-1.4645872116088867,-1.4645872116088867,-1.4645872116088867,-1.4645874500274658,-1.4645874500274658,-1.4645899534225464,-1.4645899534225464,-1.4645899534225464,-1.4645899534225464],"type":"scatter"},{"marker":{"color":"black","size":15,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"},{"marker":{"color":"red","size":7,"symbol":"x"},"mode":"markers","name":"centroid 5","showlegend":false,"x":[-31.52712631225586],"y":[0.4921684265136719],"type":"scatter"}],                        {"template":{"data":{"scatter":[{"marker":{"color":"#d92310"},"type":"scatter"}]},"layout":{"height":576,"paper_bgcolor":"#fcfcfc","plot_bgcolor":"#fcfcfc","width":1024}},"xaxis":{"zeroline":false},"yaxis":{"zeroline":false}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('654d9cc7-3614-41d0-b4ce-08eacb514c96');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<div class="cell" data-outputid="136349da-c880-4872-8b44-92cee61b742c" data-execution_count="75">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> meanshift(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>610 ms ± 44.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>From 1.5 seconds to 0.5 seconds! A 3x speed increase — very nice!</p>
<p>Let’s move onto the GPU and now see what improvements we get.</p>
<div class="cell" data-outputid="a1ca69de-c030-480d-aa90-62bd84fc1239" data-execution_count="76">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> meanshift(data):</span>
<span id="cb79-2">   X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.clone().to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span>
<span id="cb79-3">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): update(X)</span>
<span id="cb79-4">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X.detach().cpu()</span>
<span id="cb79-5"></span>
<span id="cb79-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> meanshift(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>254 ms ± 13.1 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>0.5s to 0.25s — a 2x speed increase!</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Creating Models</category>
  <guid>https://forbo7.github.io/forblog/posts/17_mean_shift_clustering.html</guid>
  <pubDate>Wed, 21 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/17_mean_shift_clustering/thumbnail.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Intuitively Approaching Einstein Summation Notation</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/16_einstein_summation_notation.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-warning">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>This post covers einstein summation notation syntax in terms of programming languages.</p>
</div>
</div>
</div>
<p><img src="https://forbo7.github.io/forblog/images/16_einstein_summation/thumbnail.png" class="img-fluid"></p>
<p>Einstein summation notation (or einsum notation for short) is a handy way to write various matrix operations in a succinct, universal manner. With it, you can probably forget all the various symbols and operators there are and stick to one common syntax, that once understood, can be more intuitive.</p>
<p>For example, matrix multiplication can be written as <code>ik, kj -&gt; ij</code> and a transpose of a matrix can be written as <code>ij -&gt; ji</code>.</p>
<p>Let’s figure this out.</p>
<section id="general-rules" class="level2">
<h2 class="anchored" data-anchor-id="general-rules">General Rules</h2>
<p>The following are two general rules one can use to quickly write einsum notation.</p>
<blockquote class="blockquote">
<p>Repeating letters between input arrays means that values along those axes will be multiplied together.</p>
</blockquote>
<blockquote class="blockquote">
<p>Omitting a letter from the output means that values along that axis will be summed.</p>
</blockquote>
<p>However, I don’t find these rules intuitive, even a little confusing. Why?</p>
<p>Matrices have the order of row by column. A 2x3 matrix has 2 rows and 3 columns. When we perform matrix multiplication, we take the dot product of each row in the first matrix with each column in the second matrix.</p>
<p>However, when the einsum rules above — specifically the first rule — are used to denote matrix multiplication (<img src="https://latex.codecogs.com/png.latex?ik,%20kj%20%5Crightarrow%20ij">, as depicted below), the order of a matrix appears to change.</p>
<p><img src="https://forbo7.github.io/forblog/images/16_einstein_summation/1.png" class="img-fluid"></p>
<p>In order for the einsum rules and the definition of matrix multiplcation above to stay consistent, <img src="https://latex.codecogs.com/png.latex?k"> now denotes the rows in the first matrix and columns in the second matrix, thereby changing the order of a matrix to column by row.</p>
<p>But even if we let <img src="https://latex.codecogs.com/png.latex?k"> denote the columns in the first matrix, we end up doing dot products with each <em>column</em> in the first matrix and with each <em>row</em> in the second matrix.</p>
<p>Not intuitive.</p>
</section>
<section id="a-more-intuitive-way" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="a-more-intuitive-way">A More Intuitive Way</h2>
<p>The key to understanding einsum notation is to not think of axes, but of iterators. For example, <img src="https://latex.codecogs.com/png.latex?i"> is an iterator that returns the rows of a matrix. <img src="https://latex.codecogs.com/png.latex?j"> is an iterator that returns the columns of a matrix.</p>
<p>Let’s begin with a relatively more simple example: the hadamard product (also known as the elementwise product or elementwise multiplication.)</p>
<section id="hadamard-product" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="hadamard-product">Hadamard Product</h3>
<p>We have the following two matrices.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%0A=%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20&amp;%203%20%5C%5C%0A4%20&amp;%205%20&amp;%206%20%5C%5C%0A7%20&amp;%208%20&amp;%209%0A%5Cend%7Bbmatrix%7D,%0AB%0A=%0A%5Cbegin%7Bbmatrix%7D%0A9%20&amp;%208%20&amp;%207%20%5C%5C%0A6%20&amp;%205%20&amp;%204%20%5C%5C%0A3%20&amp;%202%20&amp;%201%0A%5Cend%7Bbmatrix%7D%0A"></p>
<div class="page-columns page-full"><p>To access the element 8 in matrix <img src="https://latex.codecogs.com/png.latex?A">, we need to return the second row and first column<sup>1</sup>. This can be denoted as <img src="https://latex.codecogs.com/png.latex?a_%7B21%7D">. The first digit in the subscript refers to the row and the second refers to the column. We can refer to any entry generally as <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D">.</p><div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;This assumes the matrix is zero indexed. This means <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%201%20&amp;%202%20&amp;%203%20%5Cend%7Bbmatrix%7D"> is the zeroth row of <img src="https://latex.codecogs.com/png.latex?A">.</p></li></div></div>
<p>Taking the hadamard product looks like this.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20&amp;%203%20%5C%5C%0A4%20&amp;%205%20&amp;%206%20%5C%5C%0A7%20&amp;%208%20&amp;%209%0A%5Cend%7Bbmatrix%7D%0A%5Codot%0A%5Cbegin%7Bbmatrix%7D%0A9%20&amp;%208%20&amp;%207%20%5C%5C%0A6%20&amp;%205%20&amp;%204%20%5C%5C%0A3%20&amp;%202%20&amp;%201%0A%5Cend%7Bbmatrix%7D%0A=%0A%5Cbegin%7Bbmatrix%7D%0A1%20%5Ccdot%209%20&amp;%202%20%5Ccdot%208%20&amp;%203%20%5Ccdot%207%20%5C%5C%0A4%20%5Ccdot%206%20&amp;%205%20%5Ccdot%205%20&amp;%206%20%5Ccdot%204%20%5C%5C%0A7%20%5Ccdot%203%20&amp;%208%20%5Ccdot%202%20&amp;%209%20%5Ccdot%201%0A%5Cend%7Bbmatrix%7D%0A=%0AC%0A"></p>
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
An alternative way to look at it…
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="callout callout-style-simple callout-warning">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Don’t dwell too much on this; it may help to refer back to this later to help understand the einsum notation below.</p>
</div>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%201%20&amp;%202%20&amp;%203%20%5C%5C%204%20&amp;%205%20&amp;%206%20%5C%5C%207%20&amp;%208%20&amp;%209%20%5Cend%7Bbmatrix%7D%20%5Codot%20%5Cbegin%7Bbmatrix%7D%209%20&amp;%208%20&amp;%207%20%5C%5C%206%20&amp;%205%20&amp;%204%20%5C%5C%203%20&amp;%202%20&amp;%201%20%5Cend%7Bbmatrix%7D%20=%20%5Cbegin%7Bbmatrix%7D%20a_%7B00%7Db_%7B00%7D%20&amp;%20a_%7B01%7Db_%7B01%7D%20&amp;%20a_%7B02%7Db_%7B02%7D%20%5C%5C%20a_%7B10%7Db_%7B10%7D%20&amp;%20a_%7B11%7Db_%7B11%7D%20&amp;%20a_%7B12%7Db_%7B12%7D%20%5C%5C%20a_%7B20%7Db_%7B20%7D%20&amp;%20a_%7B21%7Db_%7B21%7D%20&amp;%20a_%7B22%7Db_%7B22%7D%20%5C%5C%20%5Cend%7Bbmatrix%7D%20=%20C%0A"></p>
</div>
</div>
</div>
<p>In words, what’s happening is that we’re looping through all the rows of <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">. For each row, we also loop through each column and multiply those columns together.</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20row%20in%20%7D%20A%20%5Ctext%7B%20and%20%7D%20B"></p>
<p>&nbsp;&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20col%20in%20%7D%20A%20%5Ctext%7B%20and%20%7D%20B"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://latex.codecogs.com/png.latex?a_%7B%5Ctext%7Browcol%7D%7D%20%5Ccdot%20b_%7B%5Ctext%7Browcol%7D%7D%20=%20c_%7B%5Ctext%7Browcol%7D%7D"></p>
</blockquote>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20%7D%20i%20%5Ctext%7B%20in%20%7D%20A%20%5Ctext%7B%20and%20%7D%20B"></p>
<p>&nbsp;&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20%7D%20j%20%5Ctext%7B%20in%20%7D%20A%20%5Ctext%7B%20and%20%7D%20B"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D%20%5Ccdot%20b_%7Bij%7D%20=%20c_%7Bij%7D"></p>
</blockquote>
<p>Let’s focus on that last line above.</p>
<p><img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D%20%5Ccdot%20b_%7Bij%7D%20=%20c_%7Bij%7D"></p>
<p>This line represents elementwise multiplication. For each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">, we iterate through each column <img src="https://latex.codecogs.com/png.latex?j"> in those rows, and take their product.</p>
<p>In einsum notation, we can more succinctly write this as <img src="https://latex.codecogs.com/png.latex?ij,%20ij%20%5Crightarrow%20ij">. This has 4 parts.</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?ij"> refers to the iterators working on the rows and columns of <img src="https://latex.codecogs.com/png.latex?A"> — <img src="https://latex.codecogs.com/png.latex?i"> works on the rows and <img src="https://latex.codecogs.com/png.latex?j"> works on the columns.</li>
<li><img src="https://latex.codecogs.com/png.latex?ij"> refers to the exact same iterators working on <img src="https://latex.codecogs.com/png.latex?B">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> tells us an output will be returned.</li>
<li><img src="https://latex.codecogs.com/png.latex?ij"> refers to the exact same iterators that will be responsble for making up the output matrix <img src="https://latex.codecogs.com/png.latex?C">. The location <img src="https://latex.codecogs.com/png.latex?ij"> says where the product of two elements will be located in <img src="https://latex.codecogs.com/png.latex?C">.</li>
</ol>
</section>
<section id="matrix-multiplication" class="level3">
<h3 class="anchored" data-anchor-id="matrix-multiplication">Matrix Multiplication</h3>
<p>Let’s cover matrix multiplication in the same manner as above.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%0A=%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20%5C%5C%0A3%20&amp;%204%0A%5Cend%7Bbmatrix%7D%0A,%0AB%0A=%0A%5Cbegin%7Bbmatrix%7D%0A5%20&amp;%206%20%5C%5C%0A7%20&amp;%208%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20%5C%5C%0A3%20&amp;%204%0A%5Cend%7Bbmatrix%7D%0A%5Ccdot%0A%5Cbegin%7Bbmatrix%7D%0A5%20&amp;%206%20%5C%5C%0A7%20&amp;%208%0A%5Cend%7Bbmatrix%7D%0A=%0A%5Cbegin%7Bbmatrix%7D%0A(1%20%5Ccdot%205)%20+%20(2%20%5Ccdot%207)%20&amp;%20(1%20%5Ccdot%206)%20+%20(2%20%5Ccdot%208)%20%5C%5C%0A(3%20%5Ccdot%205)%20+%20(4%20%5Ccdot%207)%20&amp;%20(3%20%5Ccdot%206)%20+%20(4%20%5Ccdot%208)%0A%5Cend%7Bbmatrix%7D%0A=%0AC%0A"></p>
<!-- TODO: Might want to remove the example below or position it after the einsum notation for matrix multiplication. -->
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
An alternative way to look at it…
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="callout callout-style-simple callout-warning">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Don’t dwell too much on this; it may help to refer back to this later to help understand the einsum notation below.</p>
</div>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20%5C%5C%0A3%20&amp;%204%0A%5Cend%7Bbmatrix%7D%0A%5Ccdot%0A%5Cbegin%7Bbmatrix%7D%0A5%20&amp;%206%20%5C%5C%0A7%20&amp;%208%0A%5Cend%7Bbmatrix%7D%0A=%0A%5Cbegin%7Bbmatrix%7D%0A(a_%7B00%7Db_%7B00%7D%20+%20a_%7B01%7Db_%7B10%7D)%20&amp;%20(a_%7B00%7Db_%7B01%7D%20+%20a_%7B01%7Db_%7B11%7D)%20%5C%5C%0A(a_%7B10%7Db_%7B00%7D%20+%20a_%7B11%7Db_%7B10%7D)%20&amp;%20(a_%7B10%7Db_%7B01%7D%20+%20a_%7B11%7Db_%7B11%7D)%0A%5Cend%7Bbmatrix%7D%0A=%0AC%0A"></p>
</div>
</div>
</div>
<p>Matrix multiplication simply involves taking the dot product of each row in the first matrix with each column in the second matrix.</p>
<p>We’ll need to use 3 iterators for this: one iterator <img src="https://latex.codecogs.com/png.latex?i"> to loop through the rows of <img src="https://latex.codecogs.com/png.latex?A">, another iterator <img src="https://latex.codecogs.com/png.latex?j"> to loop through the columns of <img src="https://latex.codecogs.com/png.latex?B">, and a third iterator <img src="https://latex.codecogs.com/png.latex?k"> to loop through the elements in a row and column.</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20row%20in%20%7D%20A"></p>
<p>&nbsp;&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20col%20in%20%7D%20B"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20ele%20in%20%7D%20A_%7B%5Ctext%7Brow%7D%7D%20%5Ctext%7B%20and%20%7D%20B_%7B%5Ctext%7Bcol%7D%7D"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="https://latex.codecogs.com/png.latex?a_%7B%5Ctext%7Browele%7D%7D%20%5Ccdot%20b_%7B%5Ctext%7Belecol%7D%7D%20%5Cmathrel%7B+%7D=%20c_%7B%5Ctext%7Browcol%7D%7D"></p>
</blockquote>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20%7D%20i%20%5Ctext%7B%20in%20%7D%20A"></p>
<p>&nbsp;&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20%7D%20j%20%5Ctext%7B%20in%20%7D%20B"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20%7D%20k%20%5Ctext%7B%20in%20%7D%20A_%7Bi%7D%20%5Ctext%7B%20and%20%7D%20B_%7Bj%7D"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="https://latex.codecogs.com/png.latex?a_%7Bik%7D%20%5Ccdot%20b_%7Bkj%7D%20%5Cmathrel%7B+%7D=%20c_%7Bij%7D"></p>
</blockquote>
<p>Let’s focus in on the last line above.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aa_%7Bik%7D%20%5Ccdot%20b_%7Bkj%7D%20%5Cmathrel%7B+%7D=%20c_%7Bij%7D%0A"></p>
<p>This can more succinctly be written in einsum notation as <img src="https://latex.codecogs.com/png.latex?ik,%20kj%20%5Crightarrow%20ij"> — for each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A">, and for each column <img src="https://latex.codecogs.com/png.latex?j"> in <img src="https://latex.codecogs.com/png.latex?B">, iterate through each element <img src="https://latex.codecogs.com/png.latex?k">, take their product, and sum the those products. The location of the output of the dot product in the output matrix <img src="https://latex.codecogs.com/png.latex?C"> is <img src="https://latex.codecogs.com/png.latex?c_%7Bij%7D">.</p>
</section>
</section>
<section id="various-examples" class="level2">
<h2 class="anchored" data-anchor-id="various-examples">Various Examples</h2>
<section id="d-operations" class="level3">
<h3 class="anchored" data-anchor-id="d-operations">1D Operations</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%20=%20%5Cbegin%7Bbmatrix%7D%201%20%5C%5C%202%20%5C%5C%203%20%5Cend%7Bbmatrix%7D,%20B%20=%20%5Cbegin%7Bbmatrix%7D%204%20%5C%5C%205%20%5C%5C%206%20%5Cend%7Bbmatrix%7D%0A"></p>
<section id="returning-a-view-of-a" class="level4">
<h4 class="anchored" data-anchor-id="returning-a-view-of-a">Returning a View of <img src="https://latex.codecogs.com/png.latex?A"></h4>
<section id="pseudocode" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i">, output the row.</p>
</section>
<section id="einsum-notation" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?i%20%5Crightarrow%20i"></p>
<hr>
</section>
</section>
<section id="summing-the-values-of-a" class="level4">
<h4 class="anchored" data-anchor-id="summing-the-values-of-a">Summing the Values of <img src="https://latex.codecogs.com/png.latex?A"></h4>
<section id="pseudocode-1" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-1"><strong>Pseudocode</strong></h5>
<p>Iterate through each row <img src="https://latex.codecogs.com/png.latex?i">, and sum all rows.</p>
</section>
<section id="einsum-notation-1" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-1"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?i%20%5Crightarrow%20%5Cphantom%7Bi%7D"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>A scalar is output, hence no output iterator.</p>
</div>
</div>
</div>
<hr>
</section>
</section>
<section id="hadamard-product-of-a-and-b" class="level4">
<h4 class="anchored" data-anchor-id="hadamard-product-of-a-and-b">Hadamard Product of <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"></h4>
<section id="pseudocode-2" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-2"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">, multiply them together.</p>
</section>
<section id="einsum-notation-2" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-2"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?i,%20i%20%5Crightarrow%20i"></p>
<hr>
</section>
</section>
<section id="dot-product-of-a-and-b" class="level4">
<h4 class="anchored" data-anchor-id="dot-product-of-a-and-b">Dot Product of <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"></h4>
<section id="pseudocode-3" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-3"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">, multiply them together, and sum the products.</p>
</section>
<section id="einsum-notation-3" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-3"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?i,%20i%20%5Crightarrow%20%5Cphantom%7Bi%7D"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>A scalar is output, hence no output iterator.</p>
</div>
</div>
</div>
<hr>
</section>
</section>
<section id="outer-product-of-a-and-b" class="level4">
<h4 class="anchored" data-anchor-id="outer-product-of-a-and-b"><a href="https://en.wikipedia.org/wiki/Outer_product">Outer Product</a> of <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"></h4>
<section id="pseudocode-4" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-4"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A">, multiply it with each row <img src="https://latex.codecogs.com/png.latex?j"> in <img src="https://latex.codecogs.com/png.latex?B">.</p>
</section>
<section id="einsum-notation-4" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-4"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?i,%20j%20%5Crightarrow%20ij"></p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expanded example
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The outer product involves multiplying each element in <img src="https://latex.codecogs.com/png.latex?A"> with all elements in <img src="https://latex.codecogs.com/png.latex?B">.</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20row%20in%20%7D%20A"></p>
<p>&nbsp;&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20another-row%20in%20%7D%20B"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; <img src="https://latex.codecogs.com/png.latex?a_%7B%5Ctext%7Brow%7D%7D%20%5Ccdot%20b_%7B%5Ctext%7Banother-row%7D%7D%20=%20c_%7B%5Ctext%7Browanother-row%7D%7D"></p>
</blockquote>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20%7D%20i%20%5Ctext%7B%20in%20%7D%20A"></p>
<p>&nbsp;&nbsp; <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bfor%20%7D%20j%20%5Ctext%7B%20in%20%7D%20B"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; <img src="https://latex.codecogs.com/png.latex?a_%7Bi%7D%20%5Ccdot%20b_%7Bj%7D%20=%20c_%7Bij%7D"></p>
</blockquote>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="d-operations-1" class="level3">
<h3 class="anchored" data-anchor-id="d-operations-1">2D Operations</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%0A=%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20&amp;%203%20%5C%5C%0A4%20&amp;%205%20&amp;%206%20%5C%5C%0A7%20&amp;%208%20&amp;%209%0A%5Cend%7Bbmatrix%7D%0A,%0AB%0A=%0A%5Cbegin%7Bbmatrix%7D%0A9%20&amp;%208%20&amp;%207%20%5C%5C%0A6%20&amp;%205%20&amp;%204%20%5C%5C%0A3%20&amp;%202%20&amp;%201%0A%5Cend%7Bbmatrix%7D%0A"></p>
<section id="return-a-view-of-a" class="level4">
<h4 class="anchored" data-anchor-id="return-a-view-of-a">Return a View of <img src="https://latex.codecogs.com/png.latex?A"></h4>
<section id="pseudocode-5" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-5"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i">, iterate through each column <img src="https://latex.codecogs.com/png.latex?j"> and output it.</p>
</section>
<section id="einsum-notation-5" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-5"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ij%20%5Crightarrow%20ij"></p>
<hr>
</section>
</section>
<section id="transpose-a" class="level4">
<h4 class="anchored" data-anchor-id="transpose-a">Transpose <img src="https://latex.codecogs.com/png.latex?A"></h4>
<section id="pseudocode-6" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-6"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i">, iterate through each column <img src="https://latex.codecogs.com/png.latex?j"> and output it in <img src="https://latex.codecogs.com/png.latex?C"> at row <img src="https://latex.codecogs.com/png.latex?j"> and column <img src="https://latex.codecogs.com/png.latex?i">.</p>
</section>
<section id="einsum-notation-6" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-6"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ij%20%5Crightarrow%20ji"></p>
<hr>
</section>
</section>
<section id="return-the-main-diagonal-of-a" class="level4">
<h4 class="anchored" data-anchor-id="return-the-main-diagonal-of-a">Return the Main Diagonal of <img src="https://latex.codecogs.com/png.latex?A"></h4>
<section id="pseudocode-7" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-7"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i">, iterate through each column <img src="https://latex.codecogs.com/png.latex?i"> and output it.</p>
</section>
<section id="einsum-notation-7" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-7"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ii%20%5Crightarrow%20i"></p>
<hr>
</section>
</section>
<section id="obtain-the-trace-of-a" class="level4">
<h4 class="anchored" data-anchor-id="obtain-the-trace-of-a">Obtain the Trace of <img src="https://latex.codecogs.com/png.latex?A"></h4>
<section id="pseudocode-8" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-8"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i">, iterate through each column <img src="https://latex.codecogs.com/png.latex?i"> and sum them.</p>
</section>
<section id="einsum-notation-8" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-8"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ii%20%5Crightarrow%20%5Cphantom%7Bi%7D"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>A scalar is output, hence no output iterator.</p>
</div>
</div>
</div>
<hr>
</section>
</section>
<section id="sum-the-rows-of-a" class="level4">
<h4 class="anchored" data-anchor-id="sum-the-rows-of-a">Sum the Rows of <img src="https://latex.codecogs.com/png.latex?A"></h4>
<section id="pseudocode-9" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-9"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i">, iterate through each column <img src="https://latex.codecogs.com/png.latex?j"> and sum them.</p>
</section>
<section id="einsum-notation-9" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-9"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ij%20%5Crightarrow%20j"></p>
<hr>
</section>
</section>
<section id="sum-the-columns-of-a" class="level4">
<h4 class="anchored" data-anchor-id="sum-the-columns-of-a">Sum the Columns of <img src="https://latex.codecogs.com/png.latex?A"></h4>
<section id="pseudocode-10" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-10"><strong>Pseudocode</strong></h5>
<p>For each column <img src="https://latex.codecogs.com/png.latex?j">, iterate through each row <img src="https://latex.codecogs.com/png.latex?i"> and sum them.</p>
</section>
<section id="einsum-notation-10" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-10"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ij%20%5Crightarrow%20i"></p>
<hr>
</section>
</section>
<section id="hadamard-product-of-a-and-b-1" class="level4">
<h4 class="anchored" data-anchor-id="hadamard-product-of-a-and-b-1">Hadamard Product of <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"></h4>
<section id="pseudocode-11" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-11"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">, iterate throuch each column <img src="https://latex.codecogs.com/png.latex?j">, and take their product.</p>
</section>
<section id="einsum-notation-11" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-11"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ij,%20ij%20%5Crightarrow%20ij"></p>
<hr>
</section>
</section>
<section id="hadamard-product-of-a-and-b-transposed-a-odot-bt" class="level4">
<h4 class="anchored" data-anchor-id="hadamard-product-of-a-and-b-transposed-a-odot-bt">Hadamard Product of <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"> Transposed (<img src="https://latex.codecogs.com/png.latex?A%20%5Codot%20B%5E%7BT%7D">)</h4>
<section id="pseudocode-12" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-12"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A">, and for each row <img src="https://latex.codecogs.com/png.latex?j"> in <img src="https://latex.codecogs.com/png.latex?B">, iterate through each column <img src="https://latex.codecogs.com/png.latex?j"> in <img src="https://latex.codecogs.com/png.latex?A"> and each column <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?B">, and take their product.</p>
</section>
<section id="einsum-notation-12" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-12"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ij,%20ji%20%5Crightarrow%20ij"></p>
<hr>
</section>
</section>
<section id="matrix-product-of-a-and-b" class="level4">
<h4 class="anchored" data-anchor-id="matrix-product-of-a-and-b">Matrix Product of <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"></h4>
<section id="pseudocode-13" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-13"><strong>Pseudocode</strong></h5>
<p>For each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A">, and for each column <img src="https://latex.codecogs.com/png.latex?j"> in <img src="https://latex.codecogs.com/png.latex?B">, iterate through each element <img src="https://latex.codecogs.com/png.latex?k">, take their product, and then sum those products.</p>
</section>
<section id="einsum-notation-13" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-13"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ik,%20kj%20%5Crightarrow%20ij"></p>
<hr>
</section>
</section>
<section id="each-row-of-a-multiplied-with-b" class="level4">
<h4 class="anchored" data-anchor-id="each-row-of-a-multiplied-with-b">Each Row of <img src="https://latex.codecogs.com/png.latex?A"> Multiplied with <img src="https://latex.codecogs.com/png.latex?B"></h4>
<section id="pseudocode-14" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-14"><strong>Pseudocode</strong></h5>
<!-- TODO: may want to reword this one. -->
<p>For each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A">, and for each row <img src="https://latex.codecogs.com/png.latex?j"> in <img src="https://latex.codecogs.com/png.latex?B">, iterate through each column <img src="https://latex.codecogs.com/png.latex?k"> and take their product.</p>
</section>
<section id="einsum-notation-14" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-14"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ik,%20jk%20%5Crightarrow%20ijk"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>A three dimensional tensor is output, hence the three output iterators.</p>
</div>
</div>
</div>
<hr>
</section>
</section>
<section id="every-element-of-a-multiplied-with-b" class="level4">
<h4 class="anchored" data-anchor-id="every-element-of-a-multiplied-with-b">Every Element of <img src="https://latex.codecogs.com/png.latex?A"> Multiplied with <img src="https://latex.codecogs.com/png.latex?B"></h4>
<section id="pseudocode-15" class="level5">
<h5 class="anchored" data-anchor-id="pseudocode-15"><strong>Pseudocode</strong></h5>
<!-- TODO: may want to reword this one. -->
<p>For each row <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?A">, iterate through each column <img src="https://latex.codecogs.com/png.latex?j"> and multiply it with each row <img src="https://latex.codecogs.com/png.latex?k"> in <img src="https://latex.codecogs.com/png.latex?B"> by iterating through each column <img src="https://latex.codecogs.com/png.latex?l"> in that row <img src="https://latex.codecogs.com/png.latex?k">.</p>
</section>
<section id="einsum-notation-15" class="level5">
<h5 class="anchored" data-anchor-id="einsum-notation-15"><strong>Einsum Notation</strong></h5>
<p><img src="https://latex.codecogs.com/png.latex?ij,%20kl%20%5Crightarrow%20ijkl"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>A four dimensional tensor is output, hence the four output iterators.</p>
</div>
</div>
</div>
</section>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>And that’s that! The key is to think in terms of iterators that return locations in a matrix.</p>
<p>It may help to implement the operations above by yourself through pencil and paper, and in a programming languge too.</p>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Mathematics</category>
  <category>Programming</category>
  <guid>https://forbo7.github.io/forblog/posts/16_einstein_summation_notation.html</guid>
  <pubDate>Tue, 06 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/16_einstein_summation/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>(Un)successfully Implementing DiffEdit</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit.html</link>
  <description><![CDATA[ 



<blockquote class="blockquote">
<p>This notebook follows the <a href="https://docs.fast.ai/dev/style.html">fastai style guide</a>.</p>
</blockquote>
<p><img src="https://forbo7.github.io/forblog/images/15_un_successfully_implementing_diffedit/thumbnail.png" class="img-fluid"></p>
<p>Well, my implementation was a partial success: I managed to generate a mask, but failed to apply it. If you don’t understand, hold on as I’ll explain DiffEdit.</p>
<p>In this notebook, I try to implement the <a href="https://arxiv.org/abs/2210.11427">DiffEdit</a> paper: a diffusion algorithm that allows us to replace the subject of an image with another subject, simply through a text prompt.</p>
<div class="callout callout-style-simple callout-warning">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>This notebook does not closely follow the paper implementation of DiffEdit. However, it does capture the underlying mechanisms.</p>
</div>
</div>
</div>
<p>In a nutshell, this is done by generating a mask from the text prompt. This mask cuts out the subject from the image, which allows a new subject to be added to the image.</p>
<p>While I was successful in generating a mask, I wasn’t successful in applying it to an image. So at the end of this notebook, I’ll use the <a href="https://huggingface.co/docs/diffusers/api/pipelines/stable_diffusion/inpaint">Hugging Face Stable Diffusion Inpaint Pipeline</a> to see the mask in action.</p>
<p>If you would like a refresher on how Stable Diffusion can be implemented from its various components, you can read my post on this <a href="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components.html">here</a>.</p>
<section id="basic-workings" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="basic-workings">Basic Workings</h2>
<p>Let’s say we have an image of a horse in front of a forest. We want to replace the horse with a zebra. At a high level, DiffEdit achieves this in the following manner.</p>
<ol type="1">
<li>Using our image, we generate a further image with the prompt ‘horse’.</li>
<li>We similarly generate another further image with the prompt ‘zebra’.</li>
<li>The difference between both generated images is then taken.</li>
<li>The difference is normalized<sup>1</sup> and binarized<sup>2</sup> to obtain the mask.</li>
<li>We again generate an image with the prompt ‘zebra’.
<ul>
<li>However this time, after each denoising step, apply the mask to the latent to obtain a cutout of the zebra.</li>
<li>Then add the noised background pixels of the original image to the cutout.</li>
</ul></li>
</ol>
<div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;In this case, normalizing means scaling the values to be between 0 and 1.</p></li><li id="fn2"><p><sup>2</sup>&nbsp;Binarizing means making values to be any of 2 possible values. In this case, either 0 or 1.</p></li></div></section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastcore transformers diffusers</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> logging.disable(logging.WARNING)</span>
<span id="annotated-cell-2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="annotated-cell-2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="annotated-cell-2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="1" data-code-annotation="1">Hugging Face can be verbose.</span>
</dd>
</dl>
</div>
</div>
</section>
<section id="get-components" class="level2">
<h2 class="anchored" data-anchor-id="get-components">Get Components</h2>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CLIPTokenizer, CLIPTextModel</span>
<span id="cb2-2"></span>
<span id="cb2-3">tokz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'openai/clip-vit-large-patch14'</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16)</span>
<span id="cb2-4">txt_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTextModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'openai/clip-vit-large-patch14'</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoencoderKL, UNet2DConditionModel</span>
<span id="cb3-2"></span>
<span id="cb3-3">vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoencoderKL.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stabilityai/sd-vae-ft-ema'</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span>
<span id="cb3-4">unet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UNet2DConditionModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unet"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LMSDiscreteScheduler</span>
<span id="cb4-2"></span>
<span id="cb4-3">sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LMSDiscreteScheduler(</span>
<span id="cb4-4">    beta_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00085</span>,</span>
<span id="cb4-5">    beta_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.012</span>,</span>
<span id="cb4-6">    beta_schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scaled_linear'</span>,</span>
<span id="cb4-7">    num_train_timesteps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb4-8">)</span></code></pre></div>
</div>
</section>
<section id="simple-loop" class="level2">
<h2 class="anchored" data-anchor-id="simple-loop">Simple Loop</h2>
<p>In this simple loop, I’m making sure I can correctly generate an image based on another image as the starting point.</p>
<section id="hyperparameters" class="level3">
<h3 class="anchored" data-anchor-id="hyperparameters">Hyperparameters</h3>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'earth'</span>]</span>
<span id="cb5-2">neg_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>]</span>
<span id="cb5-3">w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb5-4">n_inf_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb5-5">g_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb5-6">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-7">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span></span></code></pre></div>
</div>
</section>
<section id="encode-prompt" class="level3">
<h3 class="anchored" data-anchor-id="encode-prompt">Encode Prompt</h3>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">txt_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz(</span>
<span id="cb6-2">    prompt,</span>
<span id="cb6-3">    padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,</span>
<span id="cb6-4">    max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz.model_max_length,</span>
<span id="cb6-5">    truncation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb6-6">    return_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>,</span>
<span id="cb6-7">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">txt_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> txt_enc(txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].half()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">neg_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz(</span>
<span id="cb8-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bs,</span>
<span id="cb8-3">    padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,</span>
<span id="cb8-4">    max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb8-5">    return_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span></span>
<span id="cb8-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">neg_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> txt_enc(neg_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].half()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([neg_emb, txt_emb])</span></code></pre></div>
</div>
</section>
<section id="compress-image" class="level3">
<h3 class="anchored" data-anchor-id="compress-image">Compress Image</h3>
<div class="cell" data-outputid="ce54a32a-6d7f-47db-f64c-7ae2328dcd0b" data-execution_count="12">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>curl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output planet.png <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://images.unsplash.com/photo-1630839437035-dac17da580d0?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2515&amp;q=80'</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100  188k  100  188k    0     0  4829k      0 --:--:-- --:--:-- --:--:-- 4829k</code></pre>
</div>
</div>
<div class="cell" data-outputid="c704e6ce-5719-4312-bb4b-6798987f1033" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/planet.png'</span>).resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> img</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> T</span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb14-3">  img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T.ToTensor()(img).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).half().to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-4">  lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.encode(img)</span>
<span id="cb14-5">  lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lat.latent_dist.sample()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> lat.shape</span></code></pre></div>
</div>
<p>Below we can see the all 4 channels of the compressed image.</p>
<div class="cell" data-outputid="30c72127-3bb2-4732-a7e6-b69a8fc1aede" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb15-3">  axs[c].imshow(lat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][c].cpu(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greys'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="noise-image" class="level3">
<h3 class="anchored" data-anchor-id="noise-image">Noise Image</h3>
<div class="cell" data-outputid="081737ce-53c6-4209-f4f2-d077128b98e0" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LMSDiscreteScheduler(</span>
<span id="cb16-2">    beta_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00085</span>,</span>
<span id="cb16-3">    beta_end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.012</span>,</span>
<span id="cb16-4">    beta_schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scaled_linear'</span>,</span>
<span id="cb16-5">    num_train_timesteps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb16-6">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> sched</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>LMSDiscreteScheduler {
  "_class_name": "LMSDiscreteScheduler",
  "_diffusers_version": "0.16.1",
  "beta_end": 0.012,
  "beta_schedule": "scaled_linear",
  "beta_start": 0.00085,
  "num_train_timesteps": 1000,
  "prediction_type": "epsilon",
  "trained_betas": null
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">sched.set_timesteps(n_inf_steps)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">torch.manual_seed(seed)</span>
<span id="cb19-2">noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(lat)</span>
<span id="cb19-3">sched.timesteps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.timesteps.to(torch.float32)</span>
<span id="cb19-4">start_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb19-5">ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([sched.timesteps[start_step]])</span>
<span id="cb19-6">lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.add_noise(lat, noise, timesteps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ts)</span></code></pre></div>
</div>
</section>
<section id="denoise" class="level3">
<h3 class="anchored" data-anchor-id="denoise">Denoise</h3>
<div class="cell" data-outputid="b621c1e5-e76d-4b0a-833c-80ddf38a35e4" data-execution_count="20">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)):</span>
<span id="cb20-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_step:</span>
<span id="cb20-5">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([lat] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-6">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.scale_model_input(inp, ts)</span>
<span id="cb20-7"></span>
<span id="cb20-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embs)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample'</span>]</span>
<span id="cb20-9"></span>
<span id="cb20-10">    pred_neg, pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preds.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-11">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_neg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> g_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_neg)</span>
<span id="cb20-12"></span>
<span id="cb20-13">    lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.step(pred, ts, lat).prev_sample</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"122f3279fd6144eaa60ba4ba3e7b1a2d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="uncompress" class="level3">
<h3 class="anchored" data-anchor-id="uncompress">Uncompress</h3>
<div class="cell" data-outputid="ed1cbf9a-8e6f-461b-85c9-b9912a348ab5" data-execution_count="21">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">lat.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>torch.Size([1, 4, 64, 64])</code></pre>
</div>
</div>
<div class="cell" data-outputid="a9275534-7ab6-48ee-991e-edd7a9320010" data-execution_count="22">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span>)</span>
<span id="cb23-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(lat).sample</span>
<span id="cb23-3">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb23-4">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy()</span>
<span id="cb23-5">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>)</span>
<span id="cb23-6">Image.fromarray(img)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-22-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="encapsulate" class="level3">
<h3 class="anchored" data-anchor-id="encapsulate">Encapsulate</h3>
<p>I’ll encapsulate the code above so we can focus on DiffEdit.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_embs(prompt, neg_prompt):</span>
<span id="cb24-2">  txt_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_seq(prompt)</span>
<span id="cb24-3">  txt_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_emb(txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb24-4"></span>
<span id="cb24-5">  neg_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_seq(neg_prompt)</span>
<span id="cb24-6">  neg_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_emb(neg_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb24-7"></span>
<span id="cb24-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.cat([neg_emb, txt_emb])</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tok_seq(prompt):</span>
<span id="cb24-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tokz(</span>
<span id="cb24-12">      prompt,</span>
<span id="cb24-13">      padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,</span>
<span id="cb24-14">      max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz.model_max_length,</span>
<span id="cb24-15">      truncation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb24-16">      return_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>,</span>
<span id="cb24-17">  )</span>
<span id="cb24-18"></span>
<span id="cb24-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_emb(inp_ids):</span>
<span id="cb24-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> txt_enc(inp_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].half()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_lat(img, start_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb25-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> noise_lat(compress_img(img), start_step)</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compress_img(img):</span>
<span id="cb25-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb25-6">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T.ToTensor()(img).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).half().to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb25-7">    lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.encode(img)</span>
<span id="cb25-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lat.latent_dist.sample()</span>
<span id="cb25-9"></span>
<span id="cb25-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> noise_lat(lat, start_step):</span>
<span id="cb25-11">  torch.manual_seed(seed)</span>
<span id="cb25-12">  noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(lat)</span>
<span id="cb25-13"></span>
<span id="cb25-14">  sched.set_timesteps(n_inf_steps)</span>
<span id="cb25-15">  sched.timesteps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.timesteps.to(torch.float32)</span>
<span id="cb25-16">  ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([sched.timesteps[start_step]])</span>
<span id="cb25-17"></span>
<span id="cb25-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched.add_noise(lat, noise, timesteps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ts)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> denoise(lat, ts):</span>
<span id="cb26-2">  inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([lat] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-3">  inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.scale_model_input(inp, ts)</span>
<span id="cb26-4"></span>
<span id="cb26-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embs)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample'</span>]</span>
<span id="cb26-6"></span>
<span id="cb26-7">  pred_neg, pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preds.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-8">  pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_neg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> g_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_neg)</span>
<span id="cb26-9"></span>
<span id="cb26-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched.step(pred, ts, lat).prev_sample</span></code></pre></div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decompress(lat):</span>
<span id="cb27-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(lat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span>)).sample</span>
<span id="cb27-3">  img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-4">  img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy()</span>
<span id="cb27-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="8c301019-171b-4856-9d1e-c75dd1987002" data-execution_count="27">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'basketball'</span>]</span>
<span id="cb28-2">neg_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>]</span>
<span id="cb28-3">w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb28-4">n_inf_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb28-5">start_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb28-6">g_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb28-7">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb28-8">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span></span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> curl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output img.png <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://images.unsplash.com/photo-1630839437035-dac17da580d0?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2515&amp;q=80'</span></span>
<span id="cb28-11">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/img.png'</span>).resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>))</span>
<span id="cb28-12"></span>
<span id="cb28-13">embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embs(prompt, neg_prompt)</span>
<span id="cb28-14">lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_lat(img)</span>
<span id="cb28-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)):</span>
<span id="cb28-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_step: lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> denoise(lat, ts)</span>
<span id="cb28-17">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decompress(lat)</span>
<span id="cb28-18">Image.fromarray(img)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100  188k  100  188k    0     0  5232k      0 --:--:-- --:--:-- --:--:-- 5381k</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f4afeec48beb439599274c8ba21cce79","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="27">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-27-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="diffedit" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="diffedit">DiffEdit</h2>
<p>Let’s review the steps of DiffEdit once more.</p>
<ol type="1">
<li>Using our image, we generate a further image with the prompt ‘horse’.</li>
<li>We similarly generate another further image with the prompt ‘zebra’.</li>
<li>The difference between both generated images is then taken.</li>
<li>The difference is normalized<sup>3</sup> and binarized<sup>4</sup> to obtain the mask.</li>
<li>We then again generate an image with the prompt ‘zebra’.
<ul>
<li>However this time, after each denoising step, apply the mask to the latent to obtain a cutout of the zebra.</li>
<li>Then add the noised background pixels of the original image to the cutout.</li>
</ul></li>
</ol>
<div class="no-row-height column-margin column-container"><li id="fn3"><p><sup>3</sup>&nbsp;In this case, normalizing means scaling the values to be between 0 and 1.</p></li><li id="fn4"><p><sup>4</sup>&nbsp;Binarizing means making values to be any of 2 possible values. In this case, either 0 or 1.</p></li></div><section id="obtain-two-latents" class="level3">
<h3 class="anchored" data-anchor-id="obtain-two-latents">Obtain two latents</h3>
<p>First, we need to obtain an image of a horse and an image of a zebra.</p>
<p>We’ll use this as our original image.</p>
<div class="cell" data-outputid="fd026bec-9922-4cfd-eec2-25d5df8c41ac" data-execution_count="28">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> curl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output img.png <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://images.unsplash.com/photo-1553284965-fa61e9ad4795?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=1742&amp;q=80'</span></span>
<span id="cb30-2">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/img.png'</span>).resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100  515k  100  515k    0     0  10.7M      0 --:--:-- --:--:-- --:--:-- 10.7M</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="28">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-28-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>This is the generated image of the horse.</p>
<div class="cell" data-outputid="3bc9907d-28c2-4494-9d4a-3c99d816ec77" data-execution_count="29">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'horse'</span>]</span>
<span id="cb32-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/img.png'</span>).resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>))</span>
<span id="cb32-3">embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embs(prompt, neg_prompt)</span>
<span id="cb32-4">lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_lat(img)</span>
<span id="cb32-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)):</span>
<span id="cb32-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_step: lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> denoise(lat1, ts)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"806877b6db584265b44acf8ec21b44ee","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="71146f7d-0e36-409e-949d-ac674e0f9c2f" data-execution_count="30">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">Image.fromarray(decompress(lat1))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-30-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>And this is the generated image of the zebra.</p>
<div class="cell" data-outputid="567b2a55-12b7-4e3a-c9bb-df9599f78cf8" data-execution_count="31">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'zebra'</span>]</span>
<span id="cb34-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/img.png'</span>).resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>))</span>
<span id="cb34-3">embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embs(prompt, neg_prompt)</span>
<span id="cb34-4">lat2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_lat(img)</span>
<span id="cb34-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)):</span>
<span id="cb34-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_step: lat2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> denoise(lat2, ts)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2aa487ae799a4895afe868ec33d0b831","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="ed39364b-5757-4278-8393-18d0d2af010f" data-execution_count="32">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">Image.fromarray(decompress(lat2))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-32-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="dc02baac-806b-4f0a-a3d5-7e0c40737e76" data-execution_count="33">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">lat1[:].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>torch.Size([1, 4, 64, 64])</code></pre>
</div>
</div>
</section>
<section id="create-mask" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="create-mask">Create Mask</h3>
<p>We’ll first convert the generated images to grayscale and then take their difference.</p>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb38-2"></span>
<span id="cb38-3">img1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.to_tensor(F.to_grayscale(Image.fromarray(decompress(lat1[:]))))</span>
<span id="cb38-4">img2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.to_tensor(F.to_grayscale(Image.fromarray(decompress(lat2[:]))))</span>
<span id="cb38-5">diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(img1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> img2)</span></code></pre></div>
</div>
<p>Then we’ll normalize the difference to have values between 0 and 1.</p>
<div class="cell" data-outputid="2210980e-f88b-4c98-d81d-12510dfd59da" data-execution_count="35">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(diff)</span>
<span id="cb39-2">Image.fromarray((norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).squeeze().numpy().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(np.uint8))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-35-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>And then finally binarize the values so they are either 0 or 1.</p>
<div class="cell" data-outputid="b0a6b4f2-a6ea-4637-c616-54885906421a" data-execution_count="36">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb40-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> thresh).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb40-3">Image.fromarray((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>.squeeze().numpy()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).astype(np.uint8))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-36-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">Image.fromarray((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>.squeeze().numpy()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).astype(np.uint8)).save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mask.png'</span>)</span></code></pre></div>
</div>
<p>Now we need to apply transformations to the binarized mask so it encapsulates the shape of the horbra/zeborse (horse + zebra 🫤).</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-37" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy"><code class="sourceCode python"><span id="annotated-cell-37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cv2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cv</span>
<span id="annotated-cell-37-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.colab.patches <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cv2_imshow</span>
<span id="annotated-cell-37-3"></span>
<span id="annotated-cell-37-4">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv.imread(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mask.png'</span>, cv.IMREAD_GRAYSCALE)</span>
<span id="annotated-cell-37-5">kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv.getStructuringElement(cv.MORPH_ELLIPSE, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<p>The kernel is essentially a shape. Multiple shapes are be applied to the image in order to perform transformations.</p>
<p>I’ve chosen to use an ellipse of size 10 by 10 units.</p>
<p>Applying an erosion transformation makes our binarized mask look like this. Such transformations remove can remove small, noisy objects.</p>
<div class="cell" data-outputid="36fd0318-8262-460e-bada-cae36e7337e1" data-execution_count="39">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">cv2_imshow(cv.erode(mask, kernel))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-39-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Applying a dilation transformation makes our binarized mask look like this. Such transformations can fill in gaps and smooth edges.</p>
<div class="cell" data-outputid="9cd8049b-3785-4129-dda7-59939e999e96" data-execution_count="40">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">cv2_imshow(cv.dilate(mask, kernel))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-40-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="page-columns page-full"><p>To produce the final mask, I’ll apply the closing transform<sup>5</sup> 7 times consecutively…</p><div class="no-row-height column-margin column-container"><li id="fn5"><p><sup>5</sup>&nbsp;The closing transform is a dilation transform followed immediately by an erosion transform. This allows holes or small black points to be closed.</p></li></div></div>
<div class="cell" data-outputid="95fd3e98-2260-4b2d-a1bc-32d7da61195d" data-execution_count="41">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">mask_closed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask</span>
<span id="cb44-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>):</span>
<span id="cb44-3">  mask_closed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv.morphologyEx(mask_closed, cv.MORPH_CLOSE, kernel)</span>
<span id="cb44-4">  cv2_imshow(mask_closed)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-41-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-41-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-41-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-41-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-41-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-41-output-6.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-41-output-7.png" class="img-fluid"></p>
</div>
</div>
<p>…and then apply the dilation transform 3 times consecutively.</p>
<div class="cell" data-outputid="95834d7a-5919-4546-b0b0-e41644f5db7d" data-execution_count="42">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">mask_dilated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_closed</span>
<span id="cb45-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb45-3">  mask_dilated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv.dilate(mask_dilated, kernel)</span>
<span id="cb45-4">  cv2_imshow(mask_dilated)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-42-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-42-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-42-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>A more concise way of doing the above.</p>
<div class="cell" data-outputid="a0ff2d87-b253-4489-8fd2-87cf8820e16c" data-execution_count="43">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">mask_closed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv.morphologyEx(mask, cv.MORPH_CLOSE, kernel, iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb46-2">mask_dilated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv.dilate(mask_closed, kernel, iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb46-3"></span>
<span id="cb46-4">cv2_imshow(mask_dilated)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-43-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Then I’ll stack the mask together so I have a 3 channel image.</p>
<div class="cell" data-outputid="a87f3e71-af4a-4292-ad18-71231294c580" data-execution_count="44">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack((mask_dilated, mask_dilated, mask_dilated), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> mask.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>(512, 512, 3)</code></pre>
</div>
</div>
<p>To read more about such transformations applied above, you can read them at the OpenCV docs <a href="https://docs.opencv.org/3.4/d9/d61/tutorial_py_morphological_ops.html">here</a>.</p>
</section>
<section id="apply-mask" class="level3">
<h3 class="anchored" data-anchor-id="apply-mask">Apply Mask</h3>
<p>Now for the part I couldn’t figure out how to do.</p>
<p>By applying the mask to the original iamge. This is how the cutout of the horse looks like.</p>
<div class="cell" data-outputid="06e2d78c-88f9-44f2-c22c-225d8af090a3" data-execution_count="45">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">fore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.mul(F.to_tensor(img).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), torch.from_numpy(mask))</span>
<span id="cb49-2">Image.fromarray((fore<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).numpy().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-45-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>You can see that it does not exactly cut out the outline: this is good because different subjects will have different levels of protrusion.</p>
<p>And this is how the background pixels look like.</p>
<div class="cell" data-outputid="56f8ac83-b157-4096-a1fc-765a32b25825" data-execution_count="46">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">inv_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mask</span>
<span id="cb50-2">back <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.mul(F.to_tensor(img).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), torch.from_numpy(inv_mask))</span>
<span id="cb50-3">Image.fromarray((back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).numpy().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-46-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Adding both the foreground and the background together…</p>
<div class="cell" data-outputid="bc2bd713-6719-444f-dd02-9161c4d44680" data-execution_count="47">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">Image.fromarray(((fore<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>back)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).numpy().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(np.uint8))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-47-output-1.png" class="img-fluid"></p>
</div>
</div>
<hr>
<section id="detour" class="level4 unnumbered unlisted">
<h4 class="unnumbered unlisted anchored" data-anchor-id="detour">Detour</h4>
<p>Note the subtle, yet very important difference in the two cells below, along with their output.</p>
<div class="cell" data-outputid="4e1d5f6d-cc7d-44dd-d932-56c48fdaf976" data-execution_count="48">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb52-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(y):</span>
<span id="cb52-3">  y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb52-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> y</span>
<span id="cb52-5">foo(x)</span>
<span id="cb52-6">x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>tensor([2, 3, 4])</code></pre>
</div>
</div>
<div class="cell" data-outputid="d345952c-9b3c-4663-ae43-ac0d9979c947" data-execution_count="49">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb54-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(y):</span>
<span id="cb54-3">  z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb54-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> z</span>
<span id="cb54-5">foo(x)</span>
<span id="cb54-6">x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>tensor([1, 2, 3])</code></pre>
</div>
</div>
<p>This was the reason for the bug that had me pulling my hair out for hours — when you pass a list or any list-like object (or even just objects I think), a copy is not passed, but rather the same object.</p>
<hr>
<p>However, I can’t quite correctly apply the mask to the latent when denoising.</p>
<div class="cell" data-outputid="a4fd4b49-a0bd-4569-a1ef-098eb853238e" data-execution_count="50">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'zebra'</span>]</span>
<span id="cb56-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/img.png'</span>).resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>))</span>
<span id="cb56-3">embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embs(prompt, neg_prompt)</span>
<span id="cb56-4">lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_lat(img)</span>
<span id="cb56-5">inv_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mask</span>
<span id="cb56-6"></span>
<span id="cb56-7"></span>
<span id="cb56-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)):</span>
<span id="cb56-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_step: </span>
<span id="cb56-10">    back <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.mul(torch.from_numpy(decompress(get_lat(img, start_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, torch.from_numpy(inv_mask))</span>
<span id="cb56-11">    fore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.mul(torch.from_numpy(decompress(lat))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, torch.from_numpy(mask))</span>
<span id="cb56-12">    bafo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (back <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fore)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb56-13">    lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compress_img(Image.fromarray(bafo.numpy().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(np.uint8)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b932751b005b4775a7c6e152c80f0aa2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="8b78fd84-916f-4467-abf3-45a041c03f1e" data-execution_count="51">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">Image.fromarray(decompress(lat))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-51-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>After asking on the fastai forum, and hours of fiddling about, the reason why this is happening is most likely due to the fact that I keep uncompressing and recompressing the latent. The compression that the VAE performs is lossy, so detail is lost during each compression and decompression.</p>
<p>My mask is not calculated in the same latent space as my latent. In other words, my mask was calculated as a 512x512 pixel and 3 channel image, whereas my latent is a 64x64 pixel and 4 channel image. I’m uncompressing the latent so that I can apply the mask to cutout the zebra and add the background pixels, and then recompressing.</p>
<p>To fix this, I would need to generate the mask as a 64x64 pixel and 3 channel image.</p>
<p>To at least see the mask in action, let’s use the Hugging Face Stable Diffusion Pipeline.</p>
</section>
</section>
</section>
<section id="pipeline" class="level2">
<h2 class="anchored" data-anchor-id="pipeline">Pipeline</h2>
<p>The Hugging Face Stable Diffusion pipeline works by simply providing the starting image and a mask. The pipeline will handle the rest.</p>
<div class="cell" data-outputid="41b6273d-3b3f-41d9-8c14-a760e9ecf7a0" data-execution_count="52">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StableDiffusionInpaintPipeline</span>
<span id="cb58-2">pipe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StableDiffusionInpaintPipeline.from_pretrained(</span>
<span id="cb58-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"runwayml/stable-diffusion-inpainting"</span>,</span>
<span id="cb58-4">    revision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fp16"</span>,</span>
<span id="cb58-5">    torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16,</span>
<span id="cb58-6">).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/transformers/models/clip/feature_extraction_clip.py:28: FutureWarning: The class CLIPFeatureExtractor is deprecated and will be removed in version 5 of Transformers. Please use CLIPImageProcessor instead.
  warnings.warn(</code></pre>
</div>
</div>
<div class="cell" data-outputid="f53afdba-acda-4f7a-8979-9c23c40df7c6" data-execution_count="53">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">img</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-53-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="c5938ffe-0669-4610-9387-24937532d4a1" data-execution_count="54">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>)</span>
<span id="cb61-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 35 or 25 steps are good</span></span>
<span id="cb61-3">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipe(</span>
<span id="cb61-4">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zebra"</span>], </span>
<span id="cb61-5">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>img, </span>
<span id="cb61-6">    mask_image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Image.fromarray((mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(np.uint8)), </span>
<span id="cb61-7">    num_inference_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb61-8">).images</span>
<span id="cb61-9">out[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fe08343893b942c8928034b1c6e9474e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="54">
<p><img src="https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit_files/figure-html/cell-54-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="takeaways" class="level2">
<h2 class="anchored" data-anchor-id="takeaways">Takeaways</h2>
<p>Looking back, the actual problem for me was that I let the paper feel intimidating; all those symbols, variables, jargon, and notation. I ended up glazing over the paper and missing the smaller details.</p>
<p>To help prevent this the next time, I should</p>
<ul>
<li>list out the variables and what they represent</li>
<li>write out the steps in simpler terms</li>
<li>and take a deep breath before reading, so I take things slowly.</li>
</ul>
<p>And that’s that.</p>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Diffusion</category>
  <category>Creating Models</category>
  <category>Papers</category>
  <guid>https://forbo7.github.io/forblog/posts/15_un_successfully_implementing_diffedit.html</guid>
  <pubDate>Mon, 29 May 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/15_un_successfully_implementing_diffedit/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Iterators and Generators</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/14_iterators_and_generators.html</link>
  <description><![CDATA[ 



<blockquote class="blockquote">
<p>This notebook follows the <a href="https://docs.fast.ai/dev/style.html">fastai style guide</a>.</p>
</blockquote>
<p><img src="https://forbo7.github.io/forblog/images/14_iterators_and_generators/thumbnail.jpg" class="img-fluid" alt="A small red gasoline generator."></p>
<div class="callout callout-style-simple callout-warning">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>This bits and bobs is explained in terms of my explorations and experimentations. Therefore, explanations and descriptions below may not necessarily be accurate.</p>
</div>
</div>
</div>
<section id="iter" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="iter"><code>iter</code></h2>
<p><code>iter</code> creates what’s known as an iterator. It is a type of iterable.</p>
<p>An iterable is anything that can be looped through (e.g., a list or a string).</p>
<p><code>iter</code> essentially allows you to loop through an iterable without using a <code>for</code> loop. It gives you finer and more granuler control over when you loop, and how how much you loop.</p>

<div class="no-row-height column-margin column-container"><div class="cell" data-execution_count="2">
<div class="cell-output cell-output-stdout">
<pre><code>Docstring:
iter(iterable) -&gt; iterator
iter(callable, sentinel) -&gt; iterator

Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.
Type:      builtin_function_or_method</code></pre>
</div>
</div></div><div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> l</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(l)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;list_iterator at 0x11e29a6e0&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(it)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>0</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(it)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>1</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(it)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>2</code></pre>
</div>
</div>
</section>
<section id="islice" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="islice"><code>islice</code></h2>
<p><code>islice</code> is a type of iterator that returns <img src="https://latex.codecogs.com/png.latex?x"> items from an iterable at a time.</p>

<div class="no-row-height column-margin column-container"><div class="cell" data-execution_count="8">
<div class="cell-output cell-output-stdout">
<pre><code>Init signature: islice(self, /, *args, **kwargs)
Docstring:     
islice(iterable, stop) --&gt; islice object
islice(iterable, start, stop[, step]) --&gt; islice object

Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are
skipped between successive calls.  Works like a slice() on a list
but returns an iterator.
Type:           type
Subclasses:     </code></pre>
</div>
</div></div><div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> islice</span>
<span id="cb13-2">it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(l)</span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(islice(it, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>[0, 1, 2, 3, 4]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(islice(it, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>[5, 6, 7, 8, 9]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(islice(it, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>[]</code></pre>
</div>
</div>
</section>
<section id="yield" class="level2">
<h2 class="anchored" data-anchor-id="yield"><code>yield</code></h2>
<p><code>yield</code> is a substitute for <code>return</code> in a function or method. When <code>yield</code> is used, the function is known as a generator.</p>
<p><code>yield</code> essentially allows you to perform multiple returns, and also allows you to treat a function as an iterator.</p>
<section id="multiple-returns" class="level3">
<h3 class="anchored" data-anchor-id="multiple-returns">Multiple Returns</h3>
<p>To demonstrate multiple returns, let’s create a function that chops a list up into smaller lists.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> chunks(l, step):</span>
<span id="cb19-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(l), step): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> l[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>step]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(chunks(l, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]</code></pre>
</div>
</div>
</section>
<section id="function-as-an-iterator" class="level3">
<h3 class="anchored" data-anchor-id="function-as-an-iterator">Function as an Iterator</h3>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">l_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chunks(l, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> l_iter</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>&lt;generator object chunks at 0x11e2a8cf0&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(l_iter)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>[0, 1, 2, 3, 4]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(l_iter)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>[5, 6, 7, 8, 9]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(l_iter)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>StopIteration: </code></pre>
</div>
</div>
<hr>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Python</category>
  <category>Bits and Bobs</category>
  <guid>https://forbo7.github.io/forblog/posts/14_iterators_and_generators.html</guid>
  <pubDate>Wed, 03 May 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/14_iterators_and_generators/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Implementing Stable Diffusion From Its Components</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components.html</link>
  <description><![CDATA[ 



<blockquote class="blockquote">
<p>This notebook follows the <a href="https://docs.fast.ai/dev/style.html">fastai style guide</a>.</p>
</blockquote>
<p><img src="https://forbo7.github.io/forblog/images/13_implementing_stable_diffusion_from_its_components/thumbnail.png" class="img-fluid" alt="A hooded programmer diffusing a stick of red dynamite by pinching the flame on the fuse; oil pastel drawing"></p>
<p>In this notebook, we’ll implement stable diffusion from its various components through the <a href="https://huggingface.co/docs/diffusers/index">Hugging Face Diffusers</a> library.</p>
<p>At the end, we’ll have our own custom stable diffusion class, from which we can generate images as simply as <code>diffuser.diffuse()</code>.</p>
<p>If you would like a refresher, I’ve summarized at a high level how a diffuser is trained in <a href="../../forblog/posts/12_stable_diffusion_summarized.html">this</a> post. Though this notebook focuses on inference and not the training aspect, the linked summary may be helpful.</p>
<p>Let’s begin.</p>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Before we get hands on with the code, let’s refresh how inference works for a diffuser.</p>
<ol type="1">
<li>We input a prompt to the diffuser.</li>
<li>This prompt is given a mathematical representation (an embedding) through the text encoder.</li>
<li>A latent comprised of noise is produced.</li>
<li>The U-Net predicts the noise in the latent in conjunction with the prompt.</li>
<li>The predicted noise is subtracted from the latent in conjunction with the scheduler.</li>
<li>After many iterations, the denoised latent is decompressed to produce our final generated image.</li>
</ol>
<p>The main components in use are:</p>
<ul>
<li>a text encoder,</li>
<li>a U-Net,</li>
<li>and a VAE decoder.</li>
</ul>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell" data-outputid="afc220c4-1d86-4071-c392-de336b5bf478" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastcore transformers diffusers</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 7.0/7.0 MB 40.9 MB/s eta 0:00:00
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 934.9/934.9 kB 57.7 MB/s eta 0:00:00
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 224.5/224.5 kB 23.9 MB/s eta 0:00:00
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 7.8/7.8 MB 29.1 MB/s eta 0:00:00</code></pre>
</div>
</div>
<div class="cell" data-code-annotations="hover" data-execution_count="2">
<div class="sourceCode cell-code" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> logging.disable(logging.WARNING)</span>
<span id="annotated-cell-2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="annotated-cell-2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="annotated-cell-2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-lines="1" data-code-cell="annotated-cell-2" data-code-annotation="1">Hugging Face can be very verbose.</span>
</dd>
</dl>
</div>
</div>
</section>
<section id="get-components" class="level2">
<h2 class="anchored" data-anchor-id="get-components">Get Components</h2>
<section id="clip-components" class="level3">
<h3 class="anchored" data-anchor-id="clip-components">CLIP Components</h3>
<p>To process the prompt, we need to download a tokenizer and a text encoder. The tokenizer will split the prompt into tokens while the text encoder will convert the tokens into a numerical representation (an embedding).</p>
<div class="cell" data-outputid="dbb333f5-b653-4cdc-90c0-0e4c18759e83" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CLIPTokenizer, CLIPTextModel</span>
<span id="cb3-2"></span>
<span id="cb3-3">tokz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'openai/clip-vit-large-patch14'</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16)</span>
<span id="cb3-4">txt_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTextModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'openai/clip-vit-large-patch14'</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"af7d88b70e5c4402a1990866772f444a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f97ee3513bab4ae18fb9cd37e3613151","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"38832f5d87674c2986ef347ad98aaff6","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6946eaa565e84b0384f6e7de58a0202d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6b1c17163f2e4e05a30548bca4ecbb17","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"42a8ef90d3af439d9cb2934d91e1b059","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p><code>float16</code> is used for faster performance.</p>
</section>
<section id="u-net-and-vae" class="level3">
<h3 class="anchored" data-anchor-id="u-net-and-vae">U-Net and VAE</h3>
<p>The U-Net will predict the noise in the image, while the VAE will decompress the generated image.</p>
<div class="cell" data-outputid="121d8578-339e-42e6-8620-2e3fe2d960cb" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoencoderKL, UNet2DConditionModel</span>
<span id="cb4-2"></span>
<span id="cb4-3">vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoencoderKL.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stabilityai/sd-vae-ft-ema'</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span>
<span id="cb4-4">unet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UNet2DConditionModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unet"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"da65cef390a041afacbf3e233285ea67","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"050f0650b3214447bbe8ac7d512882d3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fab9249a6d38474d9dc7eb703d645211","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9e9fc25b990f4d66ade4c94e7b10cbfa","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="scheduler" class="level3">
<h3 class="anchored" data-anchor-id="scheduler">Scheduler</h3>
<p>The scheduler will control how much noise is intially added to the image, and will also control how much of the noise predicted from the U-Net will be subtracted from the image.</p>
<div class="cell" data-outputid="a577e6ba-53a6-48b9-d24a-c14accc94654" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LMSDiscreteScheduler</span>
<span id="cb5-2"></span>
<span id="cb5-3">sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LMSDiscreteScheduler(</span>
<span id="cb5-4">    beta_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00085</span>,</span>
<span id="cb5-5">    beta_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.012</span>,</span>
<span id="cb5-6">    beta_schedule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scaled_linear'</span>,</span>
<span id="cb5-7">    num_train_timesteps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb5-8">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> sched</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>LMSDiscreteScheduler {
  "_class_name": "LMSDiscreteScheduler",
  "_diffusers_version": "0.16.1",
  "beta_end": 0.012,
  "beta_schedule": "scaled_linear",
  "beta_start": 0.00085,
  "num_train_timesteps": 1000,
  "prediction_type": "epsilon",
  "trained_betas": null
}</code></pre>
</div>
</div>
</section>
</section>
<section id="define-generation-parameters" class="level2">
<h2 class="anchored" data-anchor-id="define-generation-parameters">Define Generation Parameters</h2>
<p>The six main parameters needed for generation are:</p>
<ul>
<li>The prompt</li>
<li>The width and height of the image</li>
<li>A number describing how noisy the output image is to be (the number of inference steps)</li>
<li>A number describing how much the diffuser should stick to the prompt (the guidance scale)</li>
<li>The batch size</li>
<li>The seed</li>
</ul>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a photograph of an astronaut riding a horse'</span>]</span>
<span id="cb7-2">w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb7-3">n_inf_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb7-4">g_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb7-5">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-6">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span></span></code></pre></div>
</div>
</section>
<section id="encode-prompt" class="level2">
<h2 class="anchored" data-anchor-id="encode-prompt">Encode Prompt</h2>
<p>Now we need to parse the prompt. To do so, we’ll first tokenize it, and then encode the tokens to produce an embedding.</p>
<p>First, let’s tokenize.</p>
<div class="cell" data-outputid="5e53ad36-8588-468f-e26e-f8bfe170081e" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">txt_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz(</span>
<span id="cb8-2">    prompt,</span>
<span id="cb8-3">    padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,</span>
<span id="cb8-4">    max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz.model_max_length,</span>
<span id="cb8-5">    truncation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-6">    return_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span></span>
<span id="cb8-7">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> txt_inp</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>{'input_ids': tensor([[49406,   320,  8853,   539,   550, 18376,  6765,   320,  4558, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0]])}</code></pre>
</div>
</div>
<p>The token <code>49407</code> is a padding token and represents <code>'&lt;|endoftext|&gt;'</code>. These tokens have been given an attention mask of 0.</p>
<div class="cell" data-outputid="eea25561-424d-4c5e-f231-1b2a60f03c8b" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">tokz.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49407</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>'&lt;|endoftext|&gt;'</code></pre>
</div>
</div>
<p>Now using the text encoder, we’ll create an embedding out of these tokens.</p>
<div class="cell" data-outputid="aff0a562-a899-49b4-fa6b-6283375dbedc" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">txt_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> txt_enc(txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].half()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> txt_emb</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>tensor([[[-0.3884,  0.0229, -0.0523,  ..., -0.4902, -0.3066,  0.0674],
         [ 0.0292, -1.3242,  0.3076,  ..., -0.5254,  0.9766,  0.6655],
         [ 0.4609,  0.5610,  1.6689,  ..., -1.9502, -1.2266,  0.0093],
         ...,
         [-3.0410, -0.0674, -0.1777,  ...,  0.3950, -0.0174,  0.7671],
         [-3.0566, -0.1058, -0.1936,  ...,  0.4258, -0.0184,  0.7588],
         [-2.9844, -0.0850, -0.1726,  ...,  0.4373,  0.0092,  0.7490]]],
       device='cuda:0', dtype=torch.float16, grad_fn=&lt;NativeLayerNormBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell" data-outputid="a3e58dce-6f4b-4862-afdb-c2e66b6371b2" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">txt_emb.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>torch.Size([1, 77, 768])</code></pre>
</div>
</div>
</section>
<section id="embeddings-for-cfg" class="level2">
<h2 class="anchored" data-anchor-id="embeddings-for-cfg">Embeddings for CFG</h2>
<p>We also need to create an embedding for an empty prompt, also known as the uncondtional prompt. This embedding is what is used to control the guidance.</p>
<div class="cell" data-outputid="e76bee35-2544-4d96-efec-07561cacc72e" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>torch.Size([1, 77])</code></pre>
</div>
</div>
<div class="cell" data-outputid="9adf14dc-304c-497d-93d7-7a510d476cd5" data-execution_count="12">
<div class="sourceCode cell-code" id="annotated-cell-12" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-12" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-12-1" class="code-annotation-target">max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="annotated-cell-12-2">uncond_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz(</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-12" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-12-3" class="code-annotation-target">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bs,</span>
<span id="annotated-cell-12-4">    padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,</span>
<span id="annotated-cell-12-5">    max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_len,</span>
<span id="annotated-cell-12-6">    return_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>,</span>
<span id="annotated-cell-12-7">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> uncond_inp</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-12" data-target-annotation="1">1</dt>
<dd>
<span data-code-lines="1" data-code-cell="annotated-cell-12" data-code-annotation="1">We use the maximum length of the prompt so the unconditional prompt embedding matches the size of the text prmpt embedding.</span>
</dd>
<dt data-target-cell="annotated-cell-12" data-target-annotation="2">2</dt>
<dd>
<span data-code-lines="3" data-code-cell="annotated-cell-12" data-code-annotation="2">We also multiply the list containing the empty prompt with the batch size so we have an empty prompt for each text prompt.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>{'input_ids': tensor([[49406, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407]]), 'attention_mask': tensor([[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0]])}</code></pre>
</div>
</div>
<div class="cell" data-outputid="3479fc9a-e7a2-4d37-e25e-95238211c05a" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">uncond_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>torch.Size([1, 77])</code></pre>
</div>
</div>
<div class="cell" data-outputid="f5df4dc7-4108-4cb4-9d63-ea356f5ce80e" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">uncond_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> txt_enc(uncond_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].half()</span>
<span id="cb21-2">uncond_emb.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>torch.Size([1, 77, 768])</code></pre>
</div>
</div>
<p>We can then concatenate both the unconditonal embedding and the text embedding together. This allows images to be generated from each prompt without having to go through the U-Net twice.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([uncond_emb, txt_emb])</span></code></pre></div>
</div>
</section>
<section id="create-noisy-image" class="level2">
<h2 class="anchored" data-anchor-id="create-noisy-image">Create Noisy Image</h2>
<p>It’s now time to create our noisy image, which will be the starting point for generation.</p>
<p>We’ll create a single latent that is 64 by 64 pixels, and that also has 4 channels. After the latent is denoised, we’ll decompress it to a 512 by 512 pixel image with 3 channels.</p>
<div class="cell" data-outputid="688e2ea5-0a4c-448b-ab2d-68ad6d843b7b" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">bs, unet.config.in_channels, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>(1, 4, 64, 64)</code></pre>
</div>
</div>
<div class="cell" data-outputid="3024288e-7040-4278-bad1-2dadb54e54d4" data-execution_count="17">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)))</span>
<span id="cb26-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)).shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[[ 0.0800, -1.3597, -0.2033, -0.5647],
         [-1.6066,  0.8178,  1.0832,  0.0638],
         [ 0.3133,  1.8516,  0.4320, -0.9295]],

        [[-1.0798,  3.2928,  0.7443,  1.2190],
         [-0.4984,  0.3551, -0.6012, -0.5856],
         [-0.3988, -1.2950, -1.6061, -0.0207]]])
torch.Size([2, 3, 4])</code></pre>
</div>
</div>
<div class="cell" data-outputid="785b9471-ad20-4588-f034-b66162979c27" data-execution_count="18">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">torch.manual_seed(seed)</span>
<span id="cb28-2">lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((bs, unet.config.in_channels, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> lats.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>torch.Size([1, 4, 64, 64])</code></pre>
</div>
</div>
<p>The latent is a rank 4 tensor. <code>1</code> refers to the batch size, which is the number of images being generated. <code>4</code> is the number of channels, and <code>64</code> is the number of pixel with regard to both height and width.</p>
<div class="cell" data-outputid="f9a646e3-1af6-4798-c8a2-b3271f514520" data-execution_count="19">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lats.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>).half()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> lats</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>tensor([[[[-0.5044, -0.4163, -0.1365,  ..., -1.6104,  0.1381,  1.7676],
          [ 0.7017,  1.5947, -1.4434,  ..., -1.5859, -0.4089, -2.8164],
          [ 1.0664, -0.0923,  0.3462,  ..., -0.2390, -1.0947,  0.7554],
          ...,
          [-1.0283,  0.2433,  0.3337,  ...,  0.6641,  0.4219,  0.7065],
          [ 0.4280, -1.5439,  0.1409,  ...,  0.8989, -1.0049,  0.0482],
          [-1.8682,  0.4988,  0.4668,  ..., -0.5874, -0.4019, -0.2856]],

         [[ 0.5688, -1.2715, -1.4980,  ...,  0.2230,  1.4785, -0.6821],
          [ 1.8418, -0.5117,  1.1934,  ..., -0.7222, -0.7417,  1.0479],
          [-0.6558,  0.1201,  1.4971,  ...,  0.1454,  0.4714,  0.2441],
          ...,
          [ 0.9492,  0.1953, -2.4141,  ..., -0.5176,  1.1191,  0.5879],
          [ 0.2129,  1.8643, -1.8506,  ...,  0.8096, -1.5264,  0.3191],
          [-0.3640, -0.9189,  0.8931,  ..., -0.4944,  0.3916, -0.1406]],

         [[-0.5259,  1.5059, -0.3413,  ...,  1.2539,  0.3669, -0.1593],
          [-0.2957, -0.1169, -2.0078,  ...,  1.9268,  0.3833, -0.0992],
          [ 0.5020,  1.0068, -0.9907,  ..., -0.3008,  0.7324, -1.1963],
          ...,
          [-0.7437, -1.1250,  0.1349,  ..., -0.6714, -0.6753, -0.7920],
          [ 0.5415, -0.5269, -1.0166,  ...,  1.1270, -1.7637, -1.5156],
          [-0.2319,  0.9165,  1.6318,  ...,  0.6602, -1.2871,  1.7568]],

         [[ 0.7100,  0.4133,  0.5513,  ...,  0.0326,  0.9175,  1.4922],
          [ 0.8862,  1.3760,  0.8599,  ..., -2.1172, -1.6533,  0.8955],
          [-0.7783, -0.0246,  1.4717,  ...,  0.0328,  0.4316, -0.6416],
          ...,
          [ 0.0855, -0.1279, -0.0319,  ..., -0.2817,  1.2744, -0.5854],
          [ 0.2402,  1.3945, -2.4062,  ...,  0.3435, -0.5254,  1.2441],
          [ 1.6377,  1.2539,  0.6099,  ...,  1.5391, -0.6304,  0.9092]]]],
       device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
<p>Our latent has random values which represent noise. This noise needs to be scaled so it can work with the scheduler.</p>
<div class="cell" data-outputid="faa1d689-c840-4715-c0e7-ce8915a83c20" data-execution_count="20">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">sched.set_timesteps(n_inf_steps)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> sched</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>LMSDiscreteScheduler {
  "_class_name": "LMSDiscreteScheduler",
  "_diffusers_version": "0.16.1",
  "beta_end": 0.012,
  "beta_schedule": "scaled_linear",
  "beta_start": 0.00085,
  "num_train_timesteps": 1000,
  "prediction_type": "epsilon",
  "trained_betas": null
}</code></pre>
</div>
</div>
<div class="cell" data-outputid="867b1f31-6fe4-4958-9114-20efcbccea23" data-execution_count="21">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> sched.init_noise_sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> sched.init_noise_sigma</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>tensor(14.6146)</code></pre>
</div>
</div>
<div class="cell" data-outputid="bac85b4e-565b-4487-fc30-68288dbcaf87" data-execution_count="22">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">sched.sigmas</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>tensor([14.6146, 13.3974, 12.3033, 11.3184, 10.4301,  9.6279,  8.9020,  8.2443,
         7.6472,  7.1044,  6.6102,  6.1594,  5.7477,  5.3709,  5.0258,  4.7090,
         4.4178,  4.1497,  3.9026,  3.6744,  3.4634,  3.2680,  3.0867,  2.9183,
         2.7616,  2.6157,  2.4794,  2.3521,  2.2330,  2.1213,  2.0165,  1.9180,
         1.8252,  1.7378,  1.6552,  1.5771,  1.5031,  1.4330,  1.3664,  1.3030,
         1.2427,  1.1852,  1.1302,  1.0776,  1.0272,  0.9788,  0.9324,  0.8876,
         0.8445,  0.8029,  0.7626,  0.7236,  0.6858,  0.6490,  0.6131,  0.5781,
         0.5438,  0.5102,  0.4770,  0.4443,  0.4118,  0.3795,  0.3470,  0.3141,
         0.2805,  0.2455,  0.2084,  0.1672,  0.1174,  0.0292,  0.0000])</code></pre>
</div>
</div>
<div class="cell" data-outputid="2745ccc4-cb84-4de7-a334-7438c064f3eb" data-execution_count="23">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">sched.timesteps</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor([999.0000, 984.5217, 970.0435, 955.5652, 941.0870, 926.6087, 912.1304,
        897.6522, 883.1739, 868.6957, 854.2174, 839.7391, 825.2609, 810.7826,
        796.3043, 781.8261, 767.3478, 752.8696, 738.3913, 723.9130, 709.4348,
        694.9565, 680.4783, 666.0000, 651.5217, 637.0435, 622.5652, 608.0870,
        593.6087, 579.1304, 564.6522, 550.1739, 535.6957, 521.2174, 506.7391,
        492.2609, 477.7826, 463.3043, 448.8261, 434.3478, 419.8696, 405.3913,
        390.9130, 376.4348, 361.9565, 347.4783, 333.0000, 318.5217, 304.0435,
        289.5652, 275.0870, 260.6087, 246.1304, 231.6522, 217.1739, 202.6957,
        188.2174, 173.7391, 159.2609, 144.7826, 130.3043, 115.8261, 101.3478,
         86.8696,  72.3913,  57.9130,  43.4348,  28.9565,  14.4783,   0.0000],
       dtype=torch.float64)</code></pre>
</div>
</div>
<div class="cell" data-outputid="86693bd1-f4c0-4459-b8db-c0b298e61159" data-execution_count="24">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">plt.plot(sched.timesteps, sched.sigmas[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="denoise" class="level2">
<h2 class="anchored" data-anchor-id="denoise">Denoise</h2>
<p>The denoising process can now begin!</p>
<div class="cell" data-outputid="cd368f63-0b8e-46c6-8103-be9d08c1fe53" data-execution_count="25">
<div class="sourceCode cell-code" id="annotated-cell-25" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="annotated-cell-25-2"></span>
<span id="annotated-cell-25-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-25" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-25-4" class="code-annotation-target">  inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([lats] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-25" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-25-5" class="code-annotation-target">  inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.scale_model_input(inp, ts)</span>
<span id="annotated-cell-25-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-25" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-25-7" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embs).sample</span>
<span id="annotated-cell-25-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-25" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-25-9" class="code-annotation-target">  pred_uncond, pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preds.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="annotated-cell-25-10">  pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> g_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_uncond)</span>
<span id="annotated-cell-25-11"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-25" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-25-12" class="code-annotation-target">  lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.step(pred, ts, lats).prev_sample</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-25" data-target-annotation="1">1</dt>
<dd>
<span data-code-lines="4" data-code-cell="annotated-cell-25" data-code-annotation="1">We first create two latents: one for the text prompt, and one for the unconditional prompt.</span>
</dd>
<dt data-target-cell="annotated-cell-25" data-target-annotation="2">2</dt>
<dd>
<span data-code-lines="5" data-code-cell="annotated-cell-25" data-code-annotation="2">We then further scale the noise on the latents.</span>
</dd>
<dt data-target-cell="annotated-cell-25" data-target-annotation="3">3</dt>
<dd>
<span data-code-lines="7" data-code-cell="annotated-cell-25" data-code-annotation="3">We then predict noise.</span>
</dd>
<dt data-target-cell="annotated-cell-25" data-target-annotation="4">4</dt>
<dd>
<span data-code-lines="9,10" data-code-cell="annotated-cell-25" data-code-annotation="4">We then perform guidance.</span>
</dd>
<dt data-target-cell="annotated-cell-25" data-target-annotation="5">5</dt>
<dd>
<span data-code-lines="12" data-code-cell="annotated-cell-25" data-code-annotation="5">We then subtract the predicted, guided noise from the image.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f1ca276ff050429a82811d0e0160a04a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="decompress" class="level2">
<h2 class="anchored" data-anchor-id="decompress">Decompress</h2>
<p>We can now decompress the latent and display it.</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>lats).sample</span></code></pre></div>
</div>
<div class="cell" data-outputid="ed46598b-30cc-4d1d-a050-3e8cd4f77659" data-execution_count="27">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb42-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy()</span>
<span id="cb42-3">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>)</span>
<span id="cb42-4">Image.fromarray(img)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<p><img src="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>And there you have it! We implemented stable diffusion using a text encoder, VAE, and U-Net!</p>
<p>Let’s encapsulate everything so it looks simpler.</p>
</section>
<section id="encapsulation" class="level2">
<h2 class="anchored" data-anchor-id="encapsulation">Encapsulation</h2>
<p>First we’ll encapsulate everything into functions, then we’ll encapsulate into a class.</p>
<section id="functions" class="level3">
<h3 class="anchored" data-anchor-id="functions">Functions</h3>
<p>The main steps that are happening are:</p>
<ul>
<li>We create embeddings.</li>
<li>We create latents.</li>
<li>We denoise the latents.</li>
<li>We decompress the latents.</li>
</ul>
<section id="create-embeddings" class="level4">
<h4 class="anchored" data-anchor-id="create-embeddings">Create Embeddings</h4>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_embs():</span>
<span id="cb43-2">  txt_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_seq(prompt)</span>
<span id="cb43-3">  uncond_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_seq([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(prompt), max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb43-4"></span>
<span id="cb43-5">  txt_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_emb(txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb43-6">  uncond_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_emb(uncond_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb43-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.cat([uncond_emb, txt_emb])</span>
<span id="cb43-8"></span>
<span id="cb43-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tok_seq(prompt, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb43-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> max_len <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz.model_max_length</span>
<span id="cb43-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tokz(</span>
<span id="cb43-12">      prompt,</span>
<span id="cb43-13">      padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,</span>
<span id="cb43-14">      max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_len,</span>
<span id="cb43-15">      truncation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb43-16">      return_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span></span>
<span id="cb43-17">  )</span>
<span id="cb43-18"></span>
<span id="cb43-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_emb(input_ids):</span>
<span id="cb43-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> txt_enc(input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].half()</span></code></pre></div>
</div>
</section>
<section id="create-latents" class="level4">
<h4 class="anchored" data-anchor-id="create-latents">Create Latents</h4>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_lat():</span>
<span id="cb44-2">  torch.manual_seed(seed)</span>
<span id="cb44-3">  lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((bs, unet.config.in_channels, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb44-4">  sched.set_timesteps(n_inf_steps)</span>
<span id="cb44-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> lat.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>).half() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sched.init_noise_sigma</span></code></pre></div>
</div>
</section>
<section id="denoise-latents" class="level4">
<h4 class="anchored" data-anchor-id="denoise-latents">Denoise Latents</h4>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> denoise(latent, embeddings, timestep):</span>
<span id="cb45-2">  inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.scale_model_input(torch.cat([latent]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), timestep)</span>
<span id="cb45-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb45-4">    pred_uncond, pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inp, timestep, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embeddings).sample.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb45-5">  pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> g_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_uncond)</span>
<span id="cb45-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched.step(pred, timestep, latent).prev_sample</span></code></pre></div>
</div>
</section>
<section id="decompress-latents" class="level4">
<h4 class="anchored" data-anchor-id="decompress-latents">Decompress Latents</h4>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decompress_lat(latent):</span>
<span id="cb46-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>latent).sample</span>
<span id="cb46-3">  img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb46-4">  img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy()</span>
<span id="cb46-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>)</span></code></pre></div>
</div>
</section>
<section id="putting-it-all-together" class="level4">
<h4 class="anchored" data-anchor-id="putting-it-all-together">Putting it All Together</h4>
<div class="cell" data-outputid="468933d2-6bbb-4c20-e4c6-f9fe3202e59b" data-execution_count="32">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'An antique 18th century painting of a gorilla eating a plate of chips.'</span>]</span>
<span id="cb47-2">embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> set_embs()</span>
<span id="cb47-3">lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> set_lat()</span>
<span id="cb47-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)): lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> denoise(lat, embs, ts)</span>
<span id="cb47-5">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decompress_lat(lat)</span>
<span id="cb47-6">Image.fromarray(img)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"91699b11dcbe47da99541cc28e50479a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="32">
<p><img src="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components_files/figure-html/cell-33-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="negative-prompts." class="level4">
<h4 class="anchored" data-anchor-id="negative-prompts.">Negative Prompts.</h4>
<p>To implement negative prompts, we can simply pass in a list containing the negative prompt. This will be used in place of the empty list used for the unconditional prompt.</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_embs():</span>
<span id="cb48-2">  txt_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_seq(prompt)</span>
<span id="cb48-3">  uncond_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_seq(neg_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(prompt), max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb48-4"></span>
<span id="cb48-5">  txt_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_emb(txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb48-6">  uncond_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_emb(uncond_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb48-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.cat([uncond_emb, txt_emb])</span>
<span id="cb48-8"></span>
<span id="cb48-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tok_seq(prompt, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb48-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> max_len <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz.model_max_length</span>
<span id="cb48-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tokz(</span>
<span id="cb48-12">      prompt,</span>
<span id="cb48-13">      padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,</span>
<span id="cb48-14">      max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_len,</span>
<span id="cb48-15">      truncation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb48-16">      return_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span></span>
<span id="cb48-17">  )</span></code></pre></div>
</div>
<div class="cell" data-outputid="b5dd9828-6197-474f-ec90-ea75fffefbf9" data-execution_count="34">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'An antique 18th century painting of a gorilla eating a plate of chips.'</span>]</span>
<span id="cb49-2">neg_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plate'</span>]</span>
<span id="cb49-3">embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> set_embs()</span>
<span id="cb49-4">lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> set_lat()</span>
<span id="cb49-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)): lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> denoise(lat, embs, ts)</span>
<span id="cb49-6">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decompress_lat(lat)</span>
<span id="cb49-7">Image.fromarray(img)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ad33e26e98be43ed90661f963b4d4c23","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="34">
<p><img src="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components_files/figure-html/cell-35-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s now encapsulate everything into a class, so we can much more easily further iterate.</p>
</section>
</section>
<section id="class" class="level3">
<h3 class="anchored" data-anchor-id="class">Class</h3>
<p>I’ll be tweaking the code above so that multiple prompts can be input.</p>
<p>This is as simple as using the length of the list of prompts as the batch size (an image is generated for each prompt).</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Diffuser:</span>
<span id="cb50-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, prompts, neg_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>], guidance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>):</span>
<span id="cb50-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompts</span>
<span id="cb50-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(prompts)</span>
<span id="cb50-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neg_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neg_prompt</span>
<span id="cb50-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guidance</span>
<span id="cb50-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seed</span>
<span id="cb50-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> steps</span>
<span id="cb50-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> width</span>
<span id="cb50-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> height</span>
<span id="cb50-11">  </span>
<span id="cb50-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> diffuse(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb50-13">    embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_embs()</span>
<span id="cb50-14">    lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_lats()</span>
<span id="cb50-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)): lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.denoise(lats, embs, ts)</span>
<span id="cb50-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decompress_lats(lats)</span>
<span id="cb50-17">  </span>
<span id="cb50-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_embs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb50-19">    txt_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tok_seq(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompts)</span>
<span id="cb50-20">    neg_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tok_seq(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neg_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompts))</span>
<span id="cb50-21"></span>
<span id="cb50-22">    txt_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_embs(txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb50-23">    neg_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_embs(neg_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb50-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.cat([neg_embs, txt_embs])</span>
<span id="cb50-25">  </span>
<span id="cb50-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tok_seq(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, prompts, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb50-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> max_len <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz.model_max_length</span>
<span id="cb50-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tokz(prompts, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_len, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)    </span>
<span id="cb50-29">  </span>
<span id="cb50-30">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_embs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_ids):</span>
<span id="cb50-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> txt_enc(input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].half()</span>
<span id="cb50-32"></span>
<span id="cb50-33">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_lats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb50-34">    torch.manual_seed(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.seed)</span>
<span id="cb50-35">    lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bs, unet.config.in_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb50-36">    sched.set_timesteps(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.steps)</span>
<span id="cb50-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> lats.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>).half() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sched.init_noise_sigma</span>
<span id="cb50-38"></span>
<span id="cb50-39">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> denoise(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, latents, embeddings, timestep):</span>
<span id="cb50-40">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.scale_model_input(torch.cat([latents]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), timestep)</span>
<span id="cb50-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): pred_neg, pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inp, timestep, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embeddings).sample.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb50-42">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_neg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_neg)</span>
<span id="cb50-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched.step(pred, timestep, latents).prev_sample</span>
<span id="cb50-44"></span>
<span id="cb50-45">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decompress_lats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, latents):</span>
<span id="cb50-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>latents).sample</span>
<span id="cb50-47">    imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb50-48">    imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [img.detach().cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> imgs]</span>
<span id="cb50-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [(img<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> imgs]</span>
<span id="cb50-50"></span>
<span id="cb50-51">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_params(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb50-52">    allowed_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompts'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'neg_prompt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'guidance'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'steps'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>]</span>
<span id="cb50-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> kwargs.items():</span>
<span id="cb50-54">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> allowed_params:</span>
<span id="cb50-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Invalid parameter name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb50-56">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompts'</span>:</span>
<span id="cb50-57">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v</span>
<span id="cb50-58">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v)</span>
<span id="cb50-59">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb50-60">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">setattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, k, v)</span></code></pre></div>
</div>
<p>Now creating a diffuser is as simple as this!</p>
<div class="cell" data-outputid="dc306e78-4819-434d-f022-22de3bec7980" data-execution_count="36">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">prompts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb51-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A lightning bolt striking a jumbo jet; 4k; photorealistic'</span>,</span>
<span id="cb51-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A toaster in the style of Jony Ive; modern; different; apple; form over function'</span></span>
<span id="cb51-4">]</span>
<span id="cb51-5">diffuser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Diffuser(prompts, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb51-6">imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> diffuser.diffuse()</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8191285afab4474a86574cc98aa7965b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="d2bfecfa-3b4a-48fe-bdcd-dca8d4bab341" data-execution_count="37">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">Image.fromarray(imgs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<p><img src="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components_files/figure-html/cell-38-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="d84be80f-7ade-4400-a85a-4cb65b9acf02" data-execution_count="38">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">Image.fromarray(imgs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<p><img src="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components_files/figure-html/cell-39-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s remove the wooden background from the second image.</p>
<div class="cell" data-outputid="1d1e1cee-9972-4025-dd92-572876305b7f" data-execution_count="39">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [prompts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb54-2">diffuser.update_params(prompts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prompt, neg_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wood'</span>)</span>
<span id="cb54-3">Image.fromarray(diffuser.diffuse()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3bd5fd90d89d4506b1df10765fa2a88f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="39">
<p><img src="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components_files/figure-html/cell-40-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Now that we have a class, we can easily add more functionality to our diffuser.</p>
</section>
</section>
<section id="extra-functionality" class="level2">
<h2 class="anchored" data-anchor-id="extra-functionality">Extra Functionality</h2>
<section id="callbacks" class="level3">
<h3 class="anchored" data-anchor-id="callbacks">Callbacks</h3>
<p>Let’s make the diffuser output how the generated image looks like at each step interval (e.g., every 5 steps), if specified so.</p>
<p>To do so, we can simply tweak the <code>diffuser.diffuse()</code> method by make it output the latent at each desired interval.</p>
<div class="sourceCode" id="annotated-cell-40" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> diffuse(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="annotated-cell-40-2">  embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_embs()</span>
<span id="annotated-cell-40-3">  lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_lats()</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-40" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-40-4" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-40" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-40-5" class="code-annotation-target">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-40-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)):</span>
<span id="annotated-cell-40-7">      lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.denoise(lats, embs, ts)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-40" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-40-8" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> progress) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="annotated-cell-40-9">        row.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decompress_lats(lats)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-40" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-40-10" class="code-annotation-target">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate(row, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-40" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-40-11" class="code-annotation-target">    display(Image.fromarray(row))</span>
<span id="annotated-cell-40-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="annotated-cell-40-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)): lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.denoise(lats, embs, ts)</span>
<span id="annotated-cell-40-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decompress_lats(lats)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-40" data-target-annotation="1">1</dt>
<dd>
<span data-code-lines="4" data-code-cell="annotated-cell-40" data-code-annotation="1">We first check if callbacks are desired (we can’t save how the latents looked like every 0 intervals).</span>
</dd>
<dt data-target-cell="annotated-cell-40" data-target-annotation="2">2</dt>
<dd>
<span data-code-lines="5" data-code-cell="annotated-cell-40" data-code-annotation="2">An empty list is created to store the images.</span>
</dd>
<dt data-target-cell="annotated-cell-40" data-target-annotation="3">3</dt>
<dd>
<span data-code-lines="8" data-code-cell="annotated-cell-40" data-code-annotation="3">We check if we have reached our desired interval. If the current loop number matches the interval, it should divide the interval cleanly.</span>
</dd>
<dt data-target-cell="annotated-cell-40" data-target-annotation="4">4</dt>
<dd>
<span data-code-lines="10" data-code-cell="annotated-cell-40" data-code-annotation="4">We smoosh all images into one long line.</span>
</dd>
<dt data-target-cell="annotated-cell-40" data-target-annotation="5">5</dt>
<dd>
<span data-code-lines="11" data-code-cell="annotated-cell-40" data-code-annotation="5">The image is displayed.</span>
</dd>
</dl>
<div class="cell" data-execution_count="40">
<details>
<summary>Diffuser Class Redefined</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Diffuser:</span>
<span id="cb55-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, prompts, neg_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>], guidance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>):</span>
<span id="cb55-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompts</span>
<span id="cb55-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(prompts)</span>
<span id="cb55-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neg_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neg_prompt</span>
<span id="cb55-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guidance</span>
<span id="cb55-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seed</span>
<span id="cb55-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> steps</span>
<span id="cb55-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> width</span>
<span id="cb55-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> height</span>
<span id="cb55-11">  </span>
<span id="cb55-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> diffuse(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb55-13">    embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_embs()</span>
<span id="cb55-14">    lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_lats()</span>
<span id="cb55-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb55-16">      row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb55-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)):</span>
<span id="cb55-18">        lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.denoise(lats, embs, ts)</span>
<span id="cb55-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> interval) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: row.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decompress_lats(lats)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb55-20">      row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate(row, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb55-21">      display(Image.fromarray(row))</span>
<span id="cb55-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: </span>
<span id="cb55-23">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(sched.timesteps)): lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.denoise(lats, embs, ts)</span>
<span id="cb55-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decompress_lats(lats)</span>
<span id="cb55-25">  </span>
<span id="cb55-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_embs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb55-27">    txt_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tok_seq(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompts)</span>
<span id="cb55-28">    neg_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tok_seq(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neg_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompts))</span>
<span id="cb55-29"></span>
<span id="cb55-30">    txt_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_embs(txt_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb55-31">    neg_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_embs(neg_inp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span>
<span id="cb55-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.cat([neg_embs, txt_embs])</span>
<span id="cb55-33">  </span>
<span id="cb55-34">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tok_seq(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, prompts, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb55-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> max_len <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz.model_max_length</span>
<span id="cb55-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tokz(prompts, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_len, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)    </span>
<span id="cb55-37">  </span>
<span id="cb55-38">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_embs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_ids):</span>
<span id="cb55-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> txt_enc(input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].half()</span>
<span id="cb55-40"></span>
<span id="cb55-41">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_lats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb55-42">    torch.manual_seed(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.seed)</span>
<span id="cb55-43">    lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bs, unet.config.in_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb55-44">    sched.set_timesteps(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.steps)</span>
<span id="cb55-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> lats.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>).half() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sched.init_noise_sigma</span>
<span id="cb55-46"></span>
<span id="cb55-47">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> denoise(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, latents, embeddings, timestep):</span>
<span id="cb55-48">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched.scale_model_input(torch.cat([latents]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), timestep)</span>
<span id="cb55-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): pred_neg, pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inp, timestep, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embeddings).sample.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb55-50">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_neg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_neg)</span>
<span id="cb55-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched.step(pred, timestep, latents).prev_sample</span>
<span id="cb55-52"></span>
<span id="cb55-53">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decompress_lats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, latents):</span>
<span id="cb55-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>latents).sample</span>
<span id="cb55-55">    imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb55-56">    imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [img.detach().cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> imgs]</span>
<span id="cb55-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [(img<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> imgs]</span>
<span id="cb55-58"></span>
<span id="cb55-59">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_params(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb55-60">    allowed_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompts'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'neg_prompt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'guidance'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'steps'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>]</span>
<span id="cb55-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> kwargs.items():</span>
<span id="cb55-62">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> allowed_params:</span>
<span id="cb55-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Invalid parameter name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb55-64">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompts'</span>:</span>
<span id="cb55-65">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb55-66">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(value)</span>
<span id="cb55-67">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb55-68">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">setattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key, value)</span></code></pre></div>
</details>
</div>
<div class="cell" data-outputid="c7c38332-d72e-48aa-c804-7aaa4367f5d2" data-execution_count="41">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A toaster in the style of Jony Ive; modern; realistic; different; apple; form over function'</span>]</span>
<span id="cb56-2">diffuser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Diffuser(prompts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prompt, neg_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wood'</span>], seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb56-3">Image.fromarray(diffuser.diffuse(interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"110e7852a7c046939c4f3889229c3a4d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components_files/figure-html/cell-42-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="41">
<p><img src="https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components_files/figure-html/cell-42-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>And there you have it! All that’s happening is:</p>
<ul>
<li>A compressed, noisy image is generated.</li>
<li>The noise in the image is predicted.</li>
<li>The predicted noise is subtracted.</li>
<li>This is repeated until desired.</li>
<li>The final image is decompressed.</li>
</ul>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Diffusion</category>
  <category>Creating Models</category>
  <guid>https://forbo7.github.io/forblog/posts/13_implementing_stable_diffusion_from_its_components.html</guid>
  <pubDate>Fri, 28 Apr 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/13_implementing_stable_diffusion_from_its_components/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>My Musings Through Stable Diffusion</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/11_musings_through_stable_diffusion.html</link>
  <description><![CDATA[ 



<blockquote class="blockquote">
<p><strong>Quick tip:</strong> Click or tap the images to view them up close.</p>
</blockquote>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/thumbnail.png" class="lightbox" title="An antique 18th century painting of a gorilla eating a plate of chips." data-gallery="quarto-lightbox-gallery-1"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/thumbnail.png" class="img-fluid figure-img" alt="An antique 18th century painting of a gorilla eating a plate of chips."></a></p>
</figure>
</div>
<p>I recently began <a href="https://course.fast.ai/Lessons/part2.html">fastai Course Part 2</a>: a course where one dives into the deeper workings of deep learning by fully implementing stable diffusion.</p>
<p>In the first lesson, we play around with diffusers using the <a href="https://huggingface.co/docs/diffusers/index">Hugging Face Diffusers</a> library. Below are things I have noticed; my musings.</p>
<section id="steps" class="level2">
<h2 class="anchored" data-anchor-id="steps">Steps</h2>
<p>Diffusion is simply a process whereby noise is progressively removed from a noisy image. A single step can be thought of a single portion of noise being removed.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/serpent_ring.png" class="lightbox" title="A depiction of a ring comprised of interwined serpents, topped with a single jewel of emerald." data-gallery="quarto-lightbox-gallery-2"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/serpent_ring.png" class="img-fluid figure-img" alt="A depiction of a ring comprised of interwined serpents, topped with a single jewel of emerald."></a></p>
<figcaption class="figure-caption">A depiction of a ring comprised of interwined serpents, topped with a single jewel of emerald.</figcaption>
</figure>
</div>
<p>Below is the evolution of the image above in 48 steps. Each new image has less and less noise (what the diffuser thinks is noise).</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/serpent_ring.gif" class="lightbox" title="The gif itself has artefacts due to compression…" data-gallery="quarto-lightbox-gallery-3"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/serpent_ring.gif" class="img-fluid figure-img" alt="A gif showing how the diffuser came to generating the image 'A depiction of a ring comprised of interwined serpents, topped with a single jewel of emerald.'"></a></p>
<figcaption class="figure-caption">The gif itself has artefacts due to compression…</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/serpent_ring_grid.jpeg" class="lightbox" title="This image displays all images in the gif above in a grid." data-gallery="quarto-lightbox-gallery-4"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/serpent_ring_grid.jpeg" class="img-fluid figure-img" alt="This image displays all images in the gif above in a grid."></a></p>
</figure>
</div>
<p>It still managed to generate a pretty good image despite the misspelling of “intertwined”!</p>
</section>
<section id="when-it-doesnt-work-well" class="level2">
<h2 class="anchored" data-anchor-id="when-it-doesnt-work-well">When It Doesn’t Work Well</h2>
<p>I’ve found that a diffuser doesn’t work well when one prompts it for things, which I assume, it hasn’t “seen” or hasn’t been trained on before. It sounds obvious, but it’s really interesting when you see the result of it.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/grasshopper_and_bunny_1.png" class="lightbox" title="A grasshopper riding a bunny." data-gallery="quarto-lightbox-gallery-5"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/grasshopper_and_bunny_1.png" class="img-fluid figure-img" alt="A grasshopper riding a bunny."></a></p>
<figcaption class="figure-caption">A grasshopper riding a bunny.</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/grasshopper_and_bunny_2.png" class="lightbox" title="A grasshopper riding a bunny." data-gallery="quarto-lightbox-gallery-6"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/grasshopper_and_bunny_2.png" class="img-fluid figure-img" alt="A grasshopper riding a bunny."></a></p>
</figure>
</div>
<p>A quick Google search also doesn’t return any images matching the prompt in the top results.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/grasshopper_and_bunny_3.png" class="lightbox" title="A screenshot of Google Image Search results showing no picture of a grasshopper riding a bunny." data-gallery="quarto-lightbox-gallery-7"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/grasshopper_and_bunny_3.png" class="img-fluid figure-img" alt="A screenshot of Google Image Search results showing no picture of a grasshopper riding a bunny."></a></p>
</figure>
</div>
</section>
<section id="cfg-classifier-free-guidance" class="level2">
<h2 class="anchored" data-anchor-id="cfg-classifier-free-guidance">CFG (Classifier Free Guidance)</h2>
<p>Or simply known as guidance, CFG is a value which tells the diffuser how much it should stick to the prompt.</p>
<p>A lower guidance leads to more varied and random images that are loosely related to the prompt. A higher guidance produces more relevant images.</p>
<p>I’ve found that too high of a guidenace leads to images having too much contrast.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/guidance.png" class="lightbox" title="An antique 18th century painting of a gorilla eating a plate of chips." data-gallery="quarto-lightbox-gallery-8"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/guidance.png" class="img-fluid figure-img" alt="A grid of images generated from the prompt, 'An antique 18th century painting of a gorilla eating a plate of chips.' Each rows shows images generated with increased guidance."></a></p>
<figcaption class="figure-caption">An antique 18th century painting of a gorilla eating a plate of chips.</figcaption>
</figure>
</div>
<p>The image above shows rows with increasing levels of guidance (1, 2.5, 5, 7.5, 10, 25, 50). 7.5 is the sweetspot.</p>
</section>
<section id="negative-prompts" class="level2">
<h2 class="anchored" data-anchor-id="negative-prompts">Negative Prompts</h2>
<p>The best way to think about negative prompts is that a negative prompt <em>guides</em> a diffuser away from generating a certain entity.</p>
<p>Take the image below as an example.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/negative_prompt_1.png" class="lightbox" title="An antique 18th century painting of a gorilla eating a plate of chips." data-gallery="quarto-lightbox-gallery-9"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/negative_prompt_1.png" class="img-fluid figure-img" alt="Another variation generated from the prompt, 'An antique 18th century painting of a gorilla eating a plate of chips.' There is a yellow circle around the gorilla."></a></p>
<figcaption class="figure-caption">An antique 18th century painting of a gorilla eating a plate of chips.</figcaption>
</figure>
</div>
<p>I generated the image again using the exact same seed and prompt, but also used the following negative prompt, “yellow circle”.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/negative_prompt_2.png" class="lightbox" title="Prompt: An antique 18th century painting of a gorilla eating a plate of chips. | Negative Prompt: yellow circle" data-gallery="quarto-lightbox-gallery-10"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/negative_prompt_2.png" class="img-fluid figure-img" alt="The same prompt used again, but the negative prompt now removes the yellow circle and adds a rectangular border around the gorilla."></a></p>
<figcaption class="figure-caption">Prompt: An antique 18th century painting of a gorilla eating a plate of chips. | Negative Prompt: yellow circle</figcaption>
</figure>
</div>
</section>
<section id="image-to-image" class="level2">
<h2 class="anchored" data-anchor-id="image-to-image">Image to Image</h2>
<p>Instead of starting from noise, one can make a diffuser begin from an existing image. The diffuser follows the image as guide and doesn’t match it 1 to 1.</p>
<p>I quickly mocked up the following image.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/img_to_img_0.png" class="lightbox" title="Clip art of a bench and a tree behind a sky and on top of grass. There is the sun and a couple of clouds in the sky." data-gallery="quarto-lightbox-gallery-11"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/img_to_img_0.png" class="img-fluid figure-img" alt="Clip art of a bench and a tree behind a sky and on top of grass. There is the sun and a couple of clouds in the sky."></a></p>
</figure>
</div>
<p>I input it to a diffuser with a prompt, and it output the following.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/img_to_img_1.png" class="lightbox" title="A bench under a tree in a park" data-gallery="quarto-lightbox-gallery-12"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/img_to_img_1.png" class="img-fluid figure-img" alt="A bench under a tree in a park"></a></p>
<figcaption class="figure-caption">A bench under a tree in a park</figcaption>
</figure>
</div>
<p>I then further generated another image from this one.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/img_to_img_2.png" class="lightbox" title="A low poly 3D render of a bench under a tree in a park" data-gallery="quarto-lightbox-gallery-13"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/img_to_img_2.png" class="img-fluid figure-img" alt="A low poly 3D render of a bench under a tree in a park"></a></p>
<figcaption class="figure-caption">A low poly 3D render of a bench under a tree in a park</figcaption>
</figure>
</div>
</section>
<section id="further-adapting-a-diffuser" class="level2">
<h2 class="anchored" data-anchor-id="further-adapting-a-diffuser">Further Adapting a Diffuser</h2>
<p>There are two ways one can further customize a diffuser to produce desired images: textual inversion and dreambooth.</p>
<section id="textual-inversion" class="level3">
<h3 class="anchored" data-anchor-id="textual-inversion">Textual Inversion</h3>
<p>A diffuser contains a text encoder. This encoder is responsible for parsing the prompt and giving it a mathematical representation.</p>
<p>A text encoder can only parse according to its vocabulary. If it encounters words not in its vocabulary, the diffuser will be unable to produce an image relevant to the prompt.</p>
<p>In a nutshell, textual inversion adds new words to the vocabulary of the text encoder so it can parse prompts with those new words.</p>
<p>I managed to generate the image below by adding the word “<a href="https://mrdoodle.com">Mr Doodle</a>” to the vocabulary of the diffuser’s text encoder.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="../images/11_musings_through_stable_diffusion/textual_inversion.png" class="lightbox" title="An antique 18th century painting of a gorilla eating a plate of chips in the style of Mr Doodle" data-gallery="quarto-lightbox-gallery-14"><img src="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/textual_inversion.png" class="img-fluid figure-img" alt="An antique 18th century painting of a gorilla eating a plate of chips in the style of Mr Doodle"></a></p>
<figcaption class="figure-caption">An antique 18th century painting of a gorilla eating a plate of chips in the style of Mr Doodle</figcaption>
</figure>
</div>
</section>
<section id="dreambooth" class="level3">
<h3 class="anchored" data-anchor-id="dreambooth">Dreambooth</h3>
<p>Dreambooth is more akin to traditional fine-tuning methods. A diffuser is further trained on images one supplies to it.</p>
</section>
</section>
<section id="so-end-my-musings" class="level2">
<h2 class="anchored" data-anchor-id="so-end-my-musings">So End my Musings</h2>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Diffusion</category>
  <category>Analyzing Models</category>
  <guid>https://forbo7.github.io/forblog/posts/11_musings_through_stable_diffusion.html</guid>
  <pubDate>Thu, 13 Apr 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/11_musings_through_stable_diffusion/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Stable Diffusion, Summarized</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/12_stable_diffusion_summarized.html</link>
  <description><![CDATA[ 



<p><em><strong>This post was edited on Sunday, 30 April 2023</strong></em></p>
<p><img src="https://forbo7.github.io/forblog/images/12_stable_diffusion_summarized/thumbnail.jpeg" class="img-fluid"></p>
<p>Here, I explain the workings of stable diffusion at a high level.</p>
<section id="components" class="level2">
<h2 class="anchored" data-anchor-id="components">Components</h2>
<p>A diffuser contains four main components</p>
<ul>
<li>The text encoder</li>
<li>The image encoder</li>
<li>The autoencoder (VAE autoencoder)</li>
<li>The neural network (U-net)</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    A{{Diffuser}}
    B([U-net])
    C([VAE Autoencoder])
    D([Text Encoder])
    E([Image Encoder])

    A --&gt; D &amp; E &amp; C &amp; B
</pre>
</div>
</div>
</div>
</div>
</section>
<section id="training" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="training">Training</h2>
<p>I’ll explain the training process in terms of a single image.</p>
<p>When all components shown above are put into their respective places, the overall training process looks like this.</p>
<div class="column-screen-inset">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    subgraph A [Feature Vector Creation]
        id1([Text Encoder])
        id2([Image Encoder])
    end

    subgraph B [Image Compression]
        id3([VAE Autoencoder])
    end

    subgraph C [Noise Removal]
        id4([U-net])
    end

    subgraph D [Image Decompression]
        id5([VAE Autoencoder])
    end

    id7[Input Image Description] &amp; id6[Input Image] --&gt; A --&gt; id9[Feature Vector]
    id6 --&gt; B --noise added to image--&gt; id10[Noisy Latent]
    id9 &amp; id10 --&gt; C --&gt; id11[Less Noisy Latent] --&gt;  C
    id11 --&gt; D --&gt; id8[Generated Image]
</pre>
</div>
</div>
</div>
</div>
</div>
<p>Let’s break it down.</p>
<section id="feature-vector-creation" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="feature-vector-creation">Feature Vector Creation</h3>
<div class="column-body-outset-right">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    subgraph B [ ]
        direction LR
        id1[Input Image]
        id2[Input Image Description]
        subgraph A [Feature Vector Creation]
            id3([Text Encoder])
            id4([Image Encoder])
        end
        id2 &amp; id1 --&gt; A --&gt; id11[Feature Vector]
    end
    style B fill:#FFF, stroke:#333,stroke-width:3px

    subgraph C [ ]
        direction LR
        id5[Input Image]
        id7[Input Image Descripton]
        id5 --&gt; id6
        id7 --&gt; id8
        subgraph D [Feature Vector Creation]
            id6([Image Encoder])
            id8([Text Encoder])
            id6 &amp; id8 --&gt; id9[CLIP Embedding]
        end
        id9 --&gt; id10[Feature Vector]
    end
    style C fill:#FFF, stroke:#333,stroke-width:3px

    B --&gt; C
    B --&gt; C
    B --&gt; C
</pre>
</div>
</div>
</div>
</div>
</div>
<p>We start with an image and its description. The image encoder takes the image and produces a feature vector — a vector with numerical values that describe the image in some way. The text encoder takes the image’s description and similarly produces a feature vector.</p>
<p>These two feature vectors are then stored in what’s known as a CLIP embedding. An embedding is simply a table where each row is an item and each column describes the items in some way. In this case, the rows represent feature vectors, and the columns are each feature in the vector.</p>
<p>Both encoders keep producing feature vectors until they are as similar as possible.</p>
</section>
<section id="image-compression" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="image-compression">Image Compression</h3>
<div class="column-body-outset-right">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    subgraph A [ ]
        id2[Input Image] --&gt; id1
        subgraph B [Image Compression]
            direction LR
            id1([VAE Autoencoder])
        end
        id1 --&gt; id7[Latent]
    end
    style A fill:#FFF, stroke:#333,stroke-width:3px

    subgraph C[ ]
        direction LR
        id3[Input Image]
        subgraph D [Image Compression]
            id4([VAE Encoder])
            id5([VAE Decoder])
        end
        id3 --&gt; id4 --&gt; id6[Latent]
    end
    style C fill:#FFF, stroke:#333,stroke-width:3px

    A &amp; A &amp; A --&gt; C
</pre>
</div>
</div>
</div>
</div>
</div>
<p>Once the feature vectors have been produced, the image is compressed by the VAE autoencoder. Some noise is then tossed onto the image.</p>
<p>The VAE autoencoder contains an encoder and a decoder. The encoder handles compression whereas the decoder handles decompression.</p>
<p>The compressed noisy image is now known as the latent. The image is compressed for faster computation, as there would be fewer pixels to compute on.</p>
</section>
<section id="noise-removal" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="noise-removal">Noise Removal</h3>
<div class="column-body-outset-right">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    subgraph A [ ]
        id1[Feature Vector] &amp; id2[Noisy Latent] --&gt; id3
        subgraph B [Noise Removal]
            direction LR
            id3([U-net]) --&gt; id4[Noise]
        end
        id4 --with learning rate--&gt; id5[Less Noisy Latent] --&gt; id3
    end
    style A fill:#FFF, stroke:#333,stroke-width:3px 

    subgraph C [ ]
        id6[Feature Vector] &amp; id7[Noisy Latent] --&gt; id8
        subgraph Noise Removal
            direction LR
            id8([U-net])
        end
        id8 --&gt; id9([Less Noisy Latent]) --&gt; id8
    end
    C &amp; C &amp; C --&gt; A
    style C fill:#FFF, stroke:#333,stroke-width:3px
</pre>
</div>
</div>
</div>
</div>
</div>
<p>The latent, together with its feature vector, is now input to the U-net. Instead of predicting what the original, un-noisy image was, the U-net predicts the noise that was tossed onto the image.</p>
<p>Once it outputs the predicted noise, that noise is subtracted from the latent in conjunction with the learning rate. This new, less noisy latent is now input again and the process repeats until desired.</p>
</section>
<section id="image-decompression" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="image-decompression">Image Decompression</h3>
<div class="column-body-outset-right">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    subgraph A [ ]
        direction LR
        id2[Input Image] --&gt; id1
        subgraph B [Image Decompression]
            id1([VAE Autoencoder])
        end
        id1 --&gt; id7[Latent]
    end
    style A fill:#FFF, stroke:#333,stroke-width:3px

    subgraph C [ ]
        direction LR
        id3[Less Noisy Latent] --&gt; id5
        subgraph D [Image Decompression]
            id4([VAE Encoder])
            id5([VAE Decoder])
        end
        id5 --&gt; id6[Generated Image]
    end
    style C fill:#FFF, stroke:#333,stroke-width:3px

    A &amp; A &amp; A --&gt; C
</pre>
</div>
</div>
</div>
</div>
</div>
<p>The latent is now decompressed through the VAE autoencoder’s decoder.</p>
<p>We now have a generated image!</p>
</section>
</section>
<section id="inference" class="level2">
<h2 class="anchored" data-anchor-id="inference">Inference</h2>
<p>When using a diffuser for inference, the diffuser <em>typically</em> begins with a purely noisey latent. The diffuser uses the input prompt to guide the removal of noise from the latent, until the latent resembles what is desired.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>And that’s all there is to it!</p>
<p>We take an image and its prompt, and create a feature vector out of them. The image is compressed and noise is then added to it. The latent and the feature vector are input to a U-net which then predicts the noise in the latent. The predicted noise is subtracted from the latent, which is then input back to the U-net. After the desired number of steps has lapsed, the latent is decompressed and the generated image is ready!</p>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Diffusion</category>
  <category>Creating Models</category>
  <guid>https://forbo7.github.io/forblog/posts/12_stable_diffusion_summarized.html</guid>
  <pubDate>Thu, 13 Apr 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/12_stable_diffusion_summarized/thumbnail.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to Convert Audio to Spectrogram Images</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/10_how_to_convert_audio_to_spectrogram_images.html</link>
  <description><![CDATA[ 



<p><strong>You can find this notebook on Kaggle <a href="https://www.kaggle.com/code/forbo7/how-to-convert-audio-to-spectrogram-images">here</a>.</strong></p>
<blockquote class="blockquote">
<p>This notebook follows the <a href="https://docs.fast.ai/dev/style.html#style-guide">fastai style conventions</a>.</p>
</blockquote>
<p><img src="https://forbo7.github.io/forblog/images/10_how_to_convert_audio_to_spectrogram_images/thumbnail.jpg" class="img-fluid" alt="A generated image of a colorful East African bird."></p>
<p>In this to-the-point notebook, I go over how one can create images of spectrograms from audio files using the PyTorch torchaudio module.</p>
<p>The notebook also goes over how I created the spectrogram images for the BirdCLEF 2023 competition, and how one can create and push a dataset right on Kaggle (useful if your local machine doesn’t have enough storage).</p>
<p>You can view the dataset that was generated from this notebook <a href="https://www.kaggle.com/datasets/forbo7/spectrograms-birdclef-2023">here</a>.</p>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:15:52.222983Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:15:52.221975Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:06.187026Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:06.185564Z&quot;}" data-papermill="{&quot;duration&quot;:13.988997,&quot;end_time&quot;:&quot;2023-04-05T11:16:06.190265&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:15:52.201268&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>: <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastkaggle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ModuleNotFoundError</span>:</span>
<span id="cb1-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastkaggle</span>
<span id="cb1-4">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastkaggle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">iskaggle</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'Batch'</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:06.219791Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:06.217738Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:19.085766Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:19.083703Z&quot;}" data-papermill="{&quot;duration&quot;:12.886205,&quot;end_time&quot;:&quot;2023-04-05T11:16:19.089359&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:06.203154&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">comp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'birdclef-2023'</span></span>
<span id="cb3-2">d_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> setup_comp(comp, install<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nbdev'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:19.119731Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:19.119242Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:25.763802Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:25.761810Z&quot;}" data-papermill="{&quot;duration&quot;:6.663933,&quot;end_time&quot;:&quot;2023-04-05T11:16:25.766895&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:19.102962&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<section id="paths" class="level3">
<h3 class="anchored" data-anchor-id="paths">Paths</h3>
<p>Let’s see all the files and directories we have.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:25.878998Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:25.878488Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:25.888345Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:25.887118Z&quot;}" data-papermill="{&quot;duration&quot;:0.028396,&quot;end_time&quot;:&quot;2023-04-05T11:16:25.891571&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:25.863175&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">d_path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(#5) [Path('../input/birdclef-2023/sample_submission.csv'),Path('../input/birdclef-2023/train_audio'),Path('../input/birdclef-2023/eBird_Taxonomy_v2021.csv'),Path('../input/birdclef-2023/train_metadata.csv'),Path('../input/birdclef-2023/test_soundscapes')]</code></pre>
</div>
</div>
<p>Let’s get the path to the audio files.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:25.947818Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:25.947204Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:25.953261Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:25.951813Z&quot;}" data-papermill="{&quot;duration&quot;:0.022977,&quot;end_time&quot;:&quot;2023-04-05T11:16:25.956052&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:25.933075&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">aud_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_audio'</span></span></code></pre></div>
</div>
<p>And create a directory to store the spectrogram images.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:26.012862Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:26.012021Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:26.022510Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:26.020324Z&quot;}" data-papermill="{&quot;duration&quot;:0.030052,&quot;end_time&quot;:&quot;2023-04-05T11:16:26.026393&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:25.996341&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">mkdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/kaggle/train_images'</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/kaggle/train_images'</span>).exists()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>True</code></pre>
</div>
</div>
</section>
</section>
<section id="single-image" class="level2">
<h2 class="anchored" data-anchor-id="single-image">Single Image</h2>
<p>It’s always a good idea to try things out on a smaller scale; so let’s begin by converting only a single audio file.</p>
<p>Let’s get the first audio file.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:26.113335Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:26.112824Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:26.142126Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:26.140480Z&quot;}" data-papermill="{&quot;duration&quot;:0.048533,&quot;end_time&quot;:&quot;2023-04-05T11:16:26.145465&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:26.096932&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">aud_files.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>(#264) [Path('../input/birdclef-2023/train_audio/yetgre1'),Path('../input/birdclef-2023/train_audio/moccha1'),Path('../input/birdclef-2023/train_audio/rostur1'),Path('../input/birdclef-2023/train_audio/walsta1'),Path('../input/birdclef-2023/train_audio/ratcis1'),Path('../input/birdclef-2023/train_audio/norfis1'),Path('../input/birdclef-2023/train_audio/macshr1'),Path('../input/birdclef-2023/train_audio/brrwhe3'),Path('../input/birdclef-2023/train_audio/crefra2'),Path('../input/birdclef-2023/train_audio/pabspa1')...]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:26.174836Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:26.174343Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:26.192704Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:26.190872Z&quot;}" data-papermill="{&quot;duration&quot;:0.035581,&quot;end_time&quot;:&quot;2023-04-05T11:16:26.195419&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:26.159838&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">aud_files.ls()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>(#27) [Path('../input/birdclef-2023/train_audio/yetgre1/XC247367.ogg'),Path('../input/birdclef-2023/train_audio/yetgre1/XC574558.ogg'),Path('../input/birdclef-2023/train_audio/yetgre1/XC403259.ogg'),Path('../input/birdclef-2023/train_audio/yetgre1/XC498854.ogg'),Path('../input/birdclef-2023/train_audio/yetgre1/XC289493.ogg'),Path('../input/birdclef-2023/train_audio/yetgre1/XC716763.ogg'),Path('../input/birdclef-2023/train_audio/yetgre1/XC498853.ogg'),Path('../input/birdclef-2023/train_audio/yetgre1/XC338717.ogg'),Path('../input/birdclef-2023/train_audio/yetgre1/XC349660.ogg'),Path('../input/birdclef-2023/train_audio/yetgre1/XC403543.ogg')...]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:26.226795Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:26.225378Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:26.237298Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:26.236003Z&quot;}" data-papermill="{&quot;duration&quot;:0.031014,&quot;end_time&quot;:&quot;2023-04-05T11:16:26.240594&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:26.209580&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">aud <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aud_files.ls()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].ls()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> aud</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Path('../input/birdclef-2023/train_audio/yetgre1/XC247367.ogg')</code></pre>
</div>
</div>
<p>Now it’s time to load it in. What we get in return is the waveform and the sample rate.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:26.298265Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:26.297796Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:27.258464Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:27.256550Z&quot;}" data-papermill="{&quot;duration&quot;:0.980217,&quot;end_time&quot;:&quot;2023-04-05T11:16:27.261269&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:26.281052&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchaudio</span>
<span id="cb16-2">wvfrm, sr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchaudio.load(aud)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> wvfrm</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>tensor([[0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 3.0518e-05, 0.0000e+00,
         0.0000e+00]])</code></pre>
</div>
</div>
<hr>
<section id="birdclef-2023-clipping-the-audio-files" class="level4">
<h4 class="anchored" data-anchor-id="birdclef-2023-clipping-the-audio-files">BirdCLEF 2023 — Clipping the Audio Files</h4>
<p>This competition requires predictions to be submitted of all 5 second intervals in each audio clip. This means the audio files need to be clipped.</p>
<p>Below is an easy way this can be done. We clip the first 5 seconds of the audio file.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:27.375336Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:27.374863Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:27.383346Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:27.381728Z&quot;}" data-papermill="{&quot;duration&quot;:0.027009,&quot;end_time&quot;:&quot;2023-04-05T11:16:27.386202&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:27.359193&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">start_sec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-2">end_sec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb18-3">wvfrm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wvfrm[:, start_sec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sr:end_sec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sr]</span>
<span id="cb18-4">wvfrm.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sr</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>5.0</code></pre>
</div>
</div>
<p>Sample rate is simply the number of frames recorded per second. The waveform that torchaudio returns is a tensor of frames. Therefore, we can easily select the desired range of frames by multiplying the sample rate with the desired start and end seconds.</p>
<hr>
<p>Now let’s create the spectrogram.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:27.503378Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:27.502883Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:27.586982Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:27.585599Z&quot;}" data-papermill="{&quot;duration&quot;:0.103329,&quot;end_time&quot;:&quot;2023-04-05T11:16:27.589754&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:27.486425&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchaudio.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> T</span>
<span id="cb20-2">spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T.Spectrogram()(wvfrm)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> spec</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>tensor([[[4.3970e-08, 8.2461e-09, 4.7306e-11,  ..., 7.8266e-08,
          1.7642e-08, 1.5016e-03],
         [6.3310e-09, 6.5514e-10, 1.6958e-08,  ..., 4.3492e-09,
          3.6019e-08, 1.5231e-03],
         [1.1548e-08, 1.7308e-08, 6.5956e-08,  ..., 2.9340e-06,
          1.2277e-06, 1.4124e-03],
         ...,
         [2.4446e-07, 6.1277e-09, 1.4932e-09,  ..., 1.4665e-08,
          1.0110e-08, 1.8980e-05],
         [3.1582e-07, 1.4777e-09, 1.2275e-08,  ..., 1.3213e-08,
          1.9035e-09, 2.0009e-05],
         [3.1673e-07, 1.1897e-10, 2.7457e-09,  ..., 1.0001e-08,
          6.0452e-14, 1.9979e-05]]])</code></pre>
</div>
</div>
<p>Let’s scale it logarithmically. This allows for better viewing.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:27.649631Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:27.648891Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:27.674057Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:27.672720Z&quot;}" data-papermill="{&quot;duration&quot;:0.043955,&quot;end_time&quot;:&quot;2023-04-05T11:16:27.676877&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:27.632922&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T.AmplitudeToDB()(spec)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> spec</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor([[[ -73.5684,  -80.8375, -100.0000,  ...,  -71.0643,  -77.5346,
           -28.2346],
         [ -81.9853,  -91.8367,  -77.7063,  ...,  -83.6159,  -74.4347,
           -28.1726],
         [ -79.3751,  -77.6177,  -71.8074,  ...,  -55.3254,  -59.1092,
           -28.5005],
         ...,
         [ -66.1180,  -82.1270,  -88.2588,  ...,  -78.3373,  -79.9524,
           -47.2170],
         [ -65.0056,  -88.3043,  -79.1097,  ...,  -78.7899,  -87.2045,
           -46.9877],
         [ -64.9931,  -99.2458,  -85.6135,  ...,  -79.9997, -100.0000,
           -46.9943]]])</code></pre>
</div>
</div>
<p>The PyTorch tensor needs to be converted into a NumPy array so it can then further be converted to an image. I’m using the <code>squeeze</code> method to remove the uneeded axis of length 1, as seen below.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:27.740341Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:27.739507Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:27.749453Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:27.748268Z&quot;}" data-papermill="{&quot;duration&quot;:0.029094,&quot;end_time&quot;:&quot;2023-04-05T11:16:27.752190&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:27.723096&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="14">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">spec.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>torch.Size([1, 201, 801])</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:27.785837Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:27.784455Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:27.793653Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:27.792659Z&quot;}" data-papermill="{&quot;duration&quot;:0.028469,&quot;end_time&quot;:&quot;2023-04-05T11:16:27.796037&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:27.767568&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="15">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spec.squeeze().numpy()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> spec</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>array([[ -73.56842 ,  -80.83749 , -100.      , ...,  -71.064285,
         -77.53463 ,  -28.234562],
       [ -81.98525 ,  -91.83666 ,  -77.706314, ...,  -83.615875,
         -74.43467 ,  -28.172626],
       [ -79.37505 ,  -77.61765 ,  -71.80743 , ...,  -55.32541 ,
         -59.109177,  -28.500452],
       ...,
       [ -66.118   ,  -82.127014,  -88.25883 , ...,  -78.33732 ,
         -79.95244 ,  -47.21705 ],
       [ -65.00563 ,  -88.30426 ,  -79.10974 , ...,  -78.78989 ,
         -87.20445 ,  -46.987743],
       [ -64.99306 ,  -99.24575 ,  -85.61355 , ...,  -79.99969 ,
        -100.      ,  -46.994343]], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:27.828702Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:27.827779Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:27.834763Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:27.833666Z&quot;}" data-papermill="{&quot;duration&quot;:0.026709,&quot;end_time&quot;:&quot;2023-04-05T11:16:27.837709&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:27.811000&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="16">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">spec.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>(201, 801)</code></pre>
</div>
</div>
<p>The array now needs to be normalized so it contains integers between 0 and 255: the values needed for images.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:27.900797Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:27.900280Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:27.913110Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:27.912123Z&quot;}" data-papermill="{&quot;duration&quot;:0.033373,&quot;end_time&quot;:&quot;2023-04-05T11:16:27.916342&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:27.882969&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> spec.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (spec.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> spec.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> spec</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>array([[ 53.000538 ,  38.424625 ,   0.       , ...,  58.021824 ,
         45.047504 , 143.90388  ],
       [ 36.123127 ,  16.369104 ,  44.703243 , ...,  32.853405 ,
         51.263535 , 144.02808  ],
       [ 41.35709  ,  44.881027 ,  56.53168  , ...,  89.581375 ,
         81.99417  , 143.37071  ],
       ...,
       [ 67.94011  ,  35.838867 ,  23.543371 , ...,  43.437954 ,
         40.199318 , 105.84024  ],
       [ 70.17062  ,  23.452267 ,  41.889095 , ...,  42.530468 ,
         25.6576   , 106.30005  ],
       [ 70.19584  ,   1.5124193,  28.847677 , ...,  40.104576 ,
          0.       , 106.28681  ]], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:27.951841Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:27.949505Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:27.961525Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:27.960579Z&quot;}" data-papermill="{&quot;duration&quot;:0.032237,&quot;end_time&quot;:&quot;2023-04-05T11:16:27.964842&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:27.932605&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="18">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spec.astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> spec</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>array([[ 53,  38,   0, ...,  58,  45, 143],
       [ 36,  16,  44, ...,  32,  51, 144],
       [ 41,  44,  56, ...,  89,  81, 143],
       ...,
       [ 67,  35,  23, ...,  43,  40, 105],
       [ 70,  23,  41, ...,  42,  25, 106],
       [ 70,   1,  28, ...,  40,   0, 106]], dtype=uint8)</code></pre>
</div>
</div>
<p>Now we can finally convert the array to an image!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:28.031056Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:28.029390Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:28.084834Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:28.083568Z&quot;}" data-papermill="{&quot;duration&quot;:0.07604,&quot;end_time&quot;:&quot;2023-04-05T11:16:28.088714&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:28.012674&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="19">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.fromarray(spec)</span>
<span id="cb34-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img.shape)</span>
<span id="cb34-3">img</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(201, 801)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="19">
<p><img src="https://forbo7.github.io/forblog/posts/10_how_to_convert_audio_to_spectrogram_images_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Cool, hey? We’ve just visualized audio!</p>
<hr>
</section>
<section id="birdclef-2023-resizing-the-images" class="level4">
<h4 class="anchored" data-anchor-id="birdclef-2023-resizing-the-images">BirdCLEF 2023 — Resizing the Images</h4>
<p>To allow the images to easily be used by various models, I resized the spectrograms to be 512 by 512 pixels as shown below.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:28.274501Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:28.273673Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:28.326587Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:28.324898Z&quot;}" data-papermill="{&quot;duration&quot;:0.078347,&quot;end_time&quot;:&quot;2023-04-05T11:16:28.331168&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:28.252821&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="20">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb36-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.resize(img_size)</span>
<span id="cb36-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img.shape)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> img</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(512, 512)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="20">
<p><img src="https://forbo7.github.io/forblog/posts/10_how_to_convert_audio_to_spectrogram_images_files/figure-html/cell-21-output-2.png" class="img-fluid"></p>
</div>
</div>
<hr>
<p>To save the image, we can simply use the <code>save</code> method.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:28.459626Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:28.459199Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:28.503231Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:28.501434Z&quot;}" data-papermill="{&quot;duration&quot;:0.069824,&quot;end_time&quot;:&quot;2023-04-05T11:16:28.506489&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:28.436665&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="21">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">img.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'img.png'</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="all-the-images" class="level2">
<h2 class="anchored" data-anchor-id="all-the-images">All the Images</h2>
<p>Now that we have verified that our algorithm works fine, we can extend it to convert all audio files.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:28.643386Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:28.642940Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:28.655463Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:28.653781Z&quot;}" data-papermill="{&quot;duration&quot;:0.039189,&quot;end_time&quot;:&quot;2023-04-05T11:16:28.658495&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:28.619306&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="22">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_imgs(duration, f):</span>
<span id="cb39-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> step <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, duration, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb39-3">        wvfrm, sr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchaudio.load(f)</span>
<span id="cb39-4">        wvfrm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cut_wvfrm(wvfrm, sr, step)</span>
<span id="cb39-5">        spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_spec(wvfrm)</span>
<span id="cb39-6">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spec2img(spec)</span>
<span id="cb39-7">        end_sec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb39-8">        img.save(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/kaggle/train_images/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bird<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>end_sec<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png'</span>)</span>
<span id="cb39-9"></span>
<span id="cb39-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cut_wvfrm(wvfrm, sr, step):</span>
<span id="cb39-11">    start_sec, end_sec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> step, step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb39-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wvfrm[:, start_sec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sr: end_sec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sr]</span>
<span id="cb39-13">            </span>
<span id="cb39-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_spec(wvfrm):</span>
<span id="cb39-15">    spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T.Spectrogram()(wvfrm)</span>
<span id="cb39-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> T.AmplitudeToDB()(spec)</span>
<span id="cb39-17">        </span>
<span id="cb39-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> spec2img(spec, img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)):</span>
<span id="cb39-19">    spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.real(spec.squeeze().numpy())</span>
<span id="cb39-20">    spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> spec.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (spec.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> spec.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>)</span>
<span id="cb39-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Image.fromarray(spec).resize(img_size)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:28.704642Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:28.704142Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:28.713257Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:28.711504Z&quot;}" data-papermill="{&quot;duration&quot;:0.036435,&quot;end_time&quot;:&quot;2023-04-05T11:16:28.716300&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:28.679865&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="23">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> iskaggle:</span>
<span id="cb40-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bird <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> aud_files.ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>():</span>
<span id="cb40-3">        mkdir(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/kaggle/train_images/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bird<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb40-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bird.ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>():</span>
<span id="cb40-5">            info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchaudio.info(f)</span>
<span id="cb40-6">            duration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> info.num_frames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> info.sample_rate</span>
<span id="cb40-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> duration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb40-8">                create_imgs(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(duration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, f)</span>
<span id="cb40-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span></code></pre></div>
</div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Ignore the <code>if not iskaggle</code> statement when replicating. I added it since I edited this notebook and needed to save changes without reproducing the entire dataset.</p>
</blockquote>
<p>In the first <code>for</code> loop below, we loop through all the bird folders. For each folder, a folder with the same name is created in the directory where we want to store the images.</p>
<p>In the second <code>for</code> loop, we loop through all audio files within the folder and then convert them to spectrogram images through the <code>create_images</code> function I defined.</p>
<hr>
<section id="birdclef-2023-clipping-the-audio-files-1" class="level4">
<h4 class="anchored" data-anchor-id="birdclef-2023-clipping-the-audio-files-1">BirdCLEF 2023 — Clipping the Audio Files</h4>
<p>Some audio files in the training set are of different durations. Therefore, we obtain the duration of the audio file so it can correctly be clipped into 5 second intervals.</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchaudio.info(f)</span>
<span id="cb41-2">duration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> info.num_frames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> info.sample_rate</span>
<span id="cb41-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> duration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb41-4">    create_images(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(duration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, f)</span>
<span id="cb41-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span></code></pre></div>
<p>Again, since sample rate is the number of frames recorded per second, we can divide the total number of frames by the sample rate to obtain the duration in seconds of a clip.</p>
<p><code>duration = info.num_frames / info.sample_rate</code></p>
<p>Then we round the duration to the nearest 5 for easy clipping.</p>
<p><code>round(duration/5)*5</code></p>
<hr>
<p>The images now created! The rest of this notebook covers how one can generate a dataset in a Kaggle Notebook and push it directly to Kaggle within it.</p>
</section>
</section>
<section id="api-setup" class="level2">
<h2 class="anchored" data-anchor-id="api-setup">API Setup</h2>
<p>We need to configure the user keys so we can push to the correct account.</p>
<p>To do this, first obtain your Kaggle API key. Then, while in the notebook editor, click Add-ons -&gt; Secrets -&gt; Add a New Secret…</p>
<p><img src="https://forbo7.github.io/forblog/posts/https:/sat02pap002files.storage.live.com/y4mY_6mu6XXxmpkR_MwTxHxfEGRV9QOqlxkCF8i6T90WkRadthJc9yeOxUG3k21bT-QQ4CxJcP1W-MHuAhX_tKvf-gcZqUvkLONiKPeumqZCTezKhwXJXs0OFuTDBnedbcViCOeeIkzjVjYJiBc3J7ib0AqG5v247vovXQP1JYv-8RmfWMFytuyCgwvLNt_5MSP?width=2880&amp;height=1800&amp;cropmode=none" width="75%" height="100%"></p>
<p><img src="https://forbo7.github.io/forblog/posts/https:/sat02pap002files.storage.live.com/y4mBCKZg2xbmSClGOAWdxf6vXcrgLKV0TNe-SuLaS37nzKAuHpzMZsXL0lEAuauWYrrKnZVx2qGStH3ZjVn-E0xARzTUW7UN9Em3gx_X3qivCHIX_85Z0aQc0xQYrl2dJPvyPOHwuCm0ML5188bFuemgoQik3jn_TVih1YKxYw9Z79fDahzG8wD9Yu-zbizRsVS?width=1024&amp;height=640&amp;cropmode=none" width="75%" height="100%"></p>
<p><img src="https://forbo7.github.io/forblog/posts/https:/sat02pap002files.storage.live.com/y4mgCDqODGoakfC1zbSK1tEGy1gcUPMpzzw5DEFHJnQPZIWZpWn2WKLT48EGRky-kXSmBYt-BYSgVxO7jMVT321_gqOYjX0daxumANws9LpNOvwdG3ce9nKJFT8ZkSEjtb5Q93leY75dKLk2CumNpmRGi4WoZr5jsTPPEV42yTlNPURAMrSsl09XeKqGaBjJO0u?width=2880&amp;height=1800&amp;cropmode=none" width="75%" height="100%"></p>
<p>…input your key and give it a name…</p>
<p><img src="https://forbo7.github.io/forblog/posts/https:/sat02pap002files.storage.live.com/y4mz3E2oKRG9H8n6cSwx-uk8ZAuIB8WSExJX92_w8ZoqYkX4f72QXKM2AFjjn7n_UaS30btHk6ueSi9VTRD_us_pUp3CSo3MkBM0mRBZqeqYDrSY4GRGamkrYnNKtxfZ-PQKJEvjOr8r8N97cftsJ3-9fEUcO3jv8kVGniKNPHWx_aVpIElx4_qgVq-aRt30PSD?width=2880&amp;height=1800&amp;cropmode=none" width="75%" height="100%"></p>
<p>…and click save. Then click the checkbox next to the secret to activate it for your notebook.</p>
<p><img src="https://forbo7.github.io/forblog/posts/https:/sat02pap002files.storage.live.com/y4m3RfkLD7cbynZIPmI7X17qmHTxar-hX5p-w5G70Z3YiRiIPzkzo3Z9h1Z4eWecrmmU88yl-HXUSRU7xUQ0LN2C-_wn_qmKDJFJyXSjNfhV7XjKpGbyhxXU9JCaTOxZhRwHGl4ghkykkhpMBTpoG-dxe7YlhPI40DQJT2dvCcuv1KZQkYkcOHIqiUI8SvwhL4Q?width=2880&amp;height=1800&amp;cropmode=none" width="75%" height="100%"></p>
<p>Repeat for your Kaggle username.</p>
<p>Now we can set the keys for the notebook as shown below (input the name of your key into <code>get_secret</code>).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:29.196185Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:29.195768Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:29.201245Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:29.199576Z&quot;}" data-papermill="{&quot;duration&quot;:0.032545,&quot;end_time&quot;:&quot;2023-04-05T11:16:29.203954&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:29.171409&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="24">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb42-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kaggle_secrets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> UserSecretsClient</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:29.247229Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:29.246767Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:29.732755Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:29.730826Z&quot;}" data-papermill="{&quot;duration&quot;:0.511238,&quot;end_time&quot;:&quot;2023-04-05T11:16:29.735938&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:29.224700&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="25">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">secrets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UserSecretsClient()</span>
<span id="cb43-2">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KAGGLE_USERNAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> secrets.get_secret(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KAGGLE_USERNAME'</span>)</span>
<span id="cb43-3">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KAGGLE_KEY'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> secrets.get_secret(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KAGGLE_KEY'</span>)</span></code></pre></div>
</div>
</section>
<section id="push-dataset" class="level2">
<h2 class="anchored" data-anchor-id="push-dataset">Push Dataset</h2>
<p>The <a href="fastkaggle">fastkaggle</a> library offers a convenient way to easily create and push a dataset to Kaggle.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:29.865172Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:29.864701Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:30.396398Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:30.394702Z&quot;}" data-papermill="{&quot;duration&quot;:0.558069,&quot;end_time&quot;:&quot;2023-04-05T11:16:30.399675&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:29.841606&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="26">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">doc(mk_dataset)</span></code></pre></div>
<div class="cell-output cell-output-display">
<hr>
<h3 class="anchored">mk_dataset</h3>
<blockquote class="blockquote"><pre><code>mk_dataset(dataset_path, title, force=False, upload=True)</code></pre></blockquote><p>Creates minimal dataset metadata needed to push new dataset to kaggle</p>
</div>
</div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Ignore the <code>if not iskaggle</code> statement when replicating. I added it since I edited this notebook and needed to save changes without reproducing the entire dataset.</p>
</blockquote>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:30.488813Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:30.487791Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:30.495264Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:30.494072Z&quot;}" data-papermill="{&quot;duration&quot;:0.034606,&quot;end_time&quot;:&quot;2023-04-05T11:16:30.498618&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:30.464012&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="27">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> iskaggle:</span>
<span id="cb45-2">    mk_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/kaggle/train_images'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spectrograms-birdclef-2023'</span>, force<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, upload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<p>And we can verify our dataset has been created by having a look at the generated metadata file.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-04-05T11:16:30.591890Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-04-05T11:16:30.591361Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-04-05T11:16:30.597529Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-04-05T11:16:30.596042Z&quot;}" data-papermill="{&quot;duration&quot;:0.032864,&quot;end_time&quot;:&quot;2023-04-05T11:16:30.600152&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-04-05T11:16:30.567288&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="28">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> iskaggle:</span>
<span id="cb46-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kaggle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>train_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>metadata.json</span></code></pre></div>
</div>
<p>From here, we can go directly to the dataset page on Kaggle and fill out the rest of the details.</p>
</section>
<section id="and-there-you-have-it" class="level2">
<h2 class="anchored" data-anchor-id="and-there-you-have-it">And there you have it!</h2>
<p>In summary, you saw how to: * Generate spectrogram images from audio files using torchaudio and fastai * How to cut audio tracks * And how to create and push a dataset directly on Kaggle</p>
<p>You can view the dataset that was generated from this notebook <a href="https://www.kaggle.com/datasets/forbo7/spectrograms-birdclef-2023">here</a>.</p>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Computer Vision</category>
  <category>Data</category>
  <category>PyTorch</category>
  <guid>https://forbo7.github.io/forblog/posts/10_how_to_convert_audio_to_spectrogram_images.html</guid>
  <pubDate>Wed, 05 Apr 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/10_how_to_convert_audio_to_spectrogram_images/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Transformers, Simply Explained</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/9_transformers_explained.html</link>
  <description><![CDATA[ 



<p><img src="https://forbo7.github.io/forblog/images/9_transformers_explained/thumbnail.png" class="img-fluid" alt="A picture of Transformers — the ones that transform from a robot into cars — posing as English alphabets."></p>
<section id="at-a-high-view" class="level2">
<h2 class="anchored" data-anchor-id="at-a-high-view">At a High View</h2>
<p>Transformers are all the rage right now. They’re what’s powering the current wave of chat bots. Here’s a high level view of how transformers work, so you know how these bots really work.</p>
<p>Simply put, a transformer is a type of architecture used for Natural Language Processing (NLP) tasks that either fills-in-the-blanks or autocompletes.</p>
<p>Transformers consist of either an encoder, decoder, or both. Encoders and decoders contain attention layers.</p>
<p>Language models need numbers to work. Text is given a numerical representation after breaking it down into smaller pieces. To keep this explanation simple, these pieces are words.</p>
<p>The numerical representation given to a word describes the word itself and its relation to the surrounding words.</p>
</section>
<section id="encoders" class="level2">
<h2 class="anchored" data-anchor-id="encoders">Encoders</h2>
<p>Encoder-only transformers are good for “understanding” text, such as classifying sentences by sentiment or figuring out what parts of a sentence refers, for example, to a person or location.</p>
<p>When training encoders, words are given a numerical representation by the attention layers considering adjacent words. For example, let’s say we have the sentence, “I am really hungry.”. The attention layers consider the words ‘am’ and ‘hungry’ when giving the word ‘really’ a numerical representation.</p>
<p>The goal of training encoders is to predict words omitted from text (e.g., “I … really hungry.”). This is how encoders can “understand” text.</p>
</section>
<section id="decoders" class="level2">
<h2 class="anchored" data-anchor-id="decoders">Decoders</h2>
<p>Decoder-only transformers are good for text generation. An example is the autocomplete feature on a smartphone’s keyboard.</p>
<p>Decoders similary give text a numerical representation, except that the attention layers consider only the previous words. When giving ‘am’ a numerical representation from “I am hungry.”, the attention layers will only consider the word ‘I’. When giving ‘hungry’ a numerical representation, the attention layers will consider the words ‘I’ and ‘am’.</p>
<p>The goal of training decoders is to predict the most likely word to continue a piece of text (e.g., “I am ….”). All generated words are used in conjunction to generate the next word.</p>
</section>
<section id="encoders-and-decoders" class="level2">
<h2 class="anchored" data-anchor-id="encoders-and-decoders">Encoders and Decoders</h2>
<p>Transformers that use both encoders and decoders are known as encoder-decoder models or sequence-to-sequence models. Such models are good for translation and summarization.</p>
<p>Encoder-decoder models are trained by first letting the encoder give the input text a numerical representation. Next, this representation is input to the decoder which generates text as described above. The encoder part of the model provides the “understanding”, while the decoder part of the model generates based off of this “understanding”.</p>
</section>
<section id="closing-words" class="level2">
<h2 class="anchored" data-anchor-id="closing-words">Closing Words</h2>
<p>And there you have it! It’s as simple as that!</p>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>LLMs</category>
  <category>Transformers</category>
  <guid>https://forbo7.github.io/forblog/posts/9_transformers_explained.html</guid>
  <pubDate>Tue, 28 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/9_transformers_explained/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>A No Nonsense Guide on how to use an M-Series Mac GPU with PyTorch</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/8_how_to_use_apple_gpu_with_pytorch.html</link>
  <description><![CDATA[ 



<p><em>This blog post was updated on <strong>Saturday, 28 January 2023</strong>.</em></p>
<p><img src="https://forbo7.github.io/forblog/images/8_how_to_use_apple_gpu_with_pytorch/thumbnail.png" class="img-fluid" alt="A picture of a snake that has taken a bite out of an apple, and whose tail is a burning torch."></p>
<p>If you have one of those fancy Macs with an M-Series chip (M1/M2, etc.), here’s how to make use of its GPU in PyTorch for increased performance.</p>
<p>It’s a bit annoying and a little tedious, but here we go.</p>
<section id="requirements" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="requirements"><span class="header-section-number">1</span> Requirements</h2>
<ul>
<li>Have an M-Series chip</li>
<li>Have at least PyTorch 1.12</li>
<li>Have at least macOS Monterey 12.3</li>
</ul>
</section>
<section id="installing-pytorch" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="installing-pytorch"><span class="header-section-number">2</span> Installing PyTorch</h2>
<p>Install PyTorch as you usually would. Just make sure it’s PyTorch 1.12.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Installing with Pip.</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> pip3 install torch torchvision torchaudio</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Installing using Conda.</span></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> conda install pytorch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch</span></code></pre></div>
<p>By using these commands, the latest version of the library is installed so there is no need to specify the version number.</p>
<p>However, if you have an existing installation, you can run the following Pip command instead.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> pip3 install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> torch torchvision torchaudio</span></code></pre></div>
</section>
<section id="import-pytorch" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="import-pytorch"><span class="header-section-number">3</span> Import PyTorch</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span></code></pre></div>
</div>
</section>
<section id="check-requirements-are-met" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="check-requirements-are-met"><span class="header-section-number">4</span> Check Requirements are Met</h2>
<p>Below is a convenient code snippet taken from the PyTorch documentation that checks whether requirements are met.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> torch.backends.mps.is_available():</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> torch.backends.mps.is_built():</span>
<span id="cb4-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MPS not available because the current PyTorch install was not built with MPS enabled."</span>)</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb4-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MPS not available because the current MacOS version is not 12.3+ and/or you do not have an MPS-enabled device on this machine."</span>)</span></code></pre></div>
</div>
<p>If neither of the two above messages print, you’re good to go!</p>
</section>
<section id="the-annoying-part-enabling-the-gpu" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="the-annoying-part-enabling-the-gpu"><span class="header-section-number">5</span> The Annoying Part: Enabling the GPU</h2>
<p>As far as I know, you must explicitly enable the use of the GPU for whatever model or tensor you wish to use the GPU for.</p>
<p>There are different ways you can do this.</p>
<p><strong>Use a string.</strong></p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mps'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="cell-output cell-output-display" data-execution_count="5">
<blockquote class="blockquote">
<p><code>tensor([1, 2, 3], device='mps:0')</code></p>
</blockquote>
</div>
</div>
<p><strong>Store as a variable.</strong></p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mps'</span></span>
<span id="cb6-2">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="cell-output cell-output-display" data-execution_count="7">
<blockquote class="blockquote">
<p><code>tensor([1, 2, 3], device='mps:0')</code></p>
</blockquote>
</div>
</div>
<p><strong>Convert existing objects.</strong></p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb7-2">t.to(device)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="cell-output cell-output-display" data-execution_count="9">
<blockquote class="blockquote">
<p><code>tensor([1, 2, 3], device='mps:0')</code></p>
</blockquote>
</div>
</div>
<p>Note that converting existing objects creates a copy and does not modify the original.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">t</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="cell-output cell-output-display" data-execution_count="11">
<blockquote class="blockquote">
<p><code>tensor([1, 2, 3])</code></p>
</blockquote>
</div>
</div>
<p>Though the above operations have been performed on tensors, they can also be performed on models.</p>
</section>
<section id="points-to-note" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="points-to-note"><span class="header-section-number">6</span> Points to Note</h2>
<ul>
<li><p>GPU enabled means operations are done on the GPU.</p></li>
<li><p>A GPU enabled tensor can only perform operations with another GPU enabled tensor.</p></li>
<li><p>As of writing this, GPU support is still in its early stages. So certain features are unsupported and further optimizations await.</p></li>
</ul>
</section>
<section id="relevant-links" class="level2 unnumbered">
<h2 class="unnumbered anchored" data-anchor-id="relevant-links">Relevant Links</h2>
<p>Relevant links:</p>
<ul>
<li><p>Installing PyTorch: <a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p></li>
<li><p>Docs on using GPU: <a href="https://pytorch.org/docs/stable/notes/mps.html">https://pytorch.org/docs/stable/notes/mps.html</a></p></li>
<li><p>Performance gains (note that nightly builds are no longer needed): <a href="https://pytorch.org/blog/introducing-accelerated-pytorch-training-on-mac/">https://pytorch.org/blog/introducing-accelerated-pytorch-training-on-mac/</a></p></li>
</ul>
</section>
<section id="closing-words" class="level2 unnumbered">
<h2 class="unnumbered anchored" data-anchor-id="closing-words">Closing Words</h2>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>PyTorch</category>
  <guid>https://forbo7.github.io/forblog/posts/8_how_to_use_apple_gpu_with_pytorch.html</guid>
  <pubDate>Thu, 26 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/8_how_to_use_apple_gpu_with_pytorch/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Adding Subscriptions to a Quarto Site</title>
  <dc:creator>Isaac Flath</dc:creator>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/7_blog_subscriptions.html</link>
  <description><![CDATA[ 



<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/thumbnail.png" class="img-fluid"></p>
<p>The <a href="https://quarto.org/docs/websites/website-blog.html#subscriptions">Quarto Documenation</a> covers how to implement website subscriptions at a surface level. This guide goes into the details on how one could do so, with three different options. <strong>That said</strong>, this guide can also be helpful for sites that do not use Quarto.</p>
<p>The three ways this guide will cover:</p>
<ul>
<li><p><strong>Readymade Services</strong></p>
<p>These are services that handle and automate everything for you. MailChimp is mentioned in the Quarto Docs as one option, but is not covered in this guide as it appears they are depracting the RSS email feed function which is necessary. Instead, we have found MailerLite to be a suitable alternative that is easy to setup and use.</p></li>
<li><p><strong>Online Forms</strong></p>
<p>Though more manual, it’s good for just getting started or if you do not have an alternative address — many services like MailerLite require you to include a physical address in your emails. This options will dive into embedding forms, and gathering emails from there.</p></li>
<li><p><strong>HTML/JS</strong></p>
<p>For when you want to handle the frontend and the backend.</p></li>
</ul>
<p>Switch between the tabs below to view the steps for each option.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Services</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Online Forms</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">HTML &amp; JS</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>The first thing we need to do is create a MailerLite Campaign. That is what will actually send the email.</p>
<section id="quarto-setup" class="level3">
<h3 class="anchored" data-anchor-id="quarto-setup">Quarto Setup</h3>
<p>Make sure RSS feeds are enabled on your blog. Instructions for how to do this are in <a href="https://quarto.org/docs/websites/website-blog.html#rss-feed">the Quarto Documentation</a>.</p>
</section>
<section id="mailerlite-campaign-setup" class="level3">
<h3 class="anchored" data-anchor-id="mailerlite-campaign-setup">MailerLite Campaign Setup</h3>
<p><a href="https://www.mailerlite.com/signup">Create a MailerLite account</a></p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite1_signup.png" class="img-fluid"></p>
<p>Once you have an account and are logged in, <a href="https://dashboard.mailerlite.com/campaigns/create">create an RSS Campaign</a>.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite2_NewCampaign.png" class="img-fluid"></p>
<p>As you complete the Campaign creation process there are a few key options to look out for.</p>
<p>As you progress through the signup form you will need to fill in some information and, including the URL of your RSS feed. It should be a URL that ends with <code>.xml</code>.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite3_RssFeedUrl.png" class="img-fluid"></p>
<p>I recommend setting the email to only be sent when you have new blog posts. This ensures that an email is only sent if you’ve published a new post. Otherwise, an email is sent on a regular interval with the latest posts regardless of whether there is new content.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite4_NewPostsOnly.png" class="img-fluid"></p>
<p>On the content page, choose start from scratch (free tier) or select a template (paid) and design your email that will go out.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite5_EmailDesign.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>When you create an RSS campaign there are templates that can be used in the content tab for designing this email. These are paid features that you get for free for the first 30 days. Only use the templates if you intend to pay as they are not included in the free plan.</p>
</div>
</div>
<p>Select All Active Subscribers to send to.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite6_CampaignRecipients.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Advanced Subscriber Settings
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can create individual subscriber groups to have different campaigns go to different groups to give subscribers more options. <a href="https://isaac-flath.tech/blog.html">Example here</a>.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite7_Groups.png" class="img-fluid"></p>
</div>
</div>
<p>Continue through to schedule your campaign!</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite8_Schedule.png" class="img-fluid"></p>
</section>
<section id="create-subscribe.html" class="level3">
<h3 class="anchored" data-anchor-id="create-subscribe.html">Create subscribe.html</h3>
<p>Now that the campaign is set up and will go out to all subscribers, we need to create the widget that allows users to subscribe to the blog. In other words we need a way for users to sign up! In Quarto, this is defined in the <code>subscribe.html</code> file. First, we need to use MailerLite to create the contents.</p>
<p>In MailerLite this is called an <code>embedded form</code>. We can use their GUI to <a href="https://dashboard.mailerlite.com/forms/create?type=embedded">Create an embedded form</a>.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite9_NewForm.png" class="img-fluid"></p>
<p>Once we start the form we can use the GUI form editor to design what we want the form to look like.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite11_FormDesign.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>I recommend leaving it with the default design for now, you can always come back and re-style it later if you don’t like how it looks on your blog. But it’s much easier to get something working then improve upon it once it’s working than to try to make something perfect the first time through!</p>
</div>
</div>
<p>Once you created the form it will take you to that forms <code>Overview</code> page. Scroll down to look for the <code>Embed form into your website</code> section. In that section select <code>HTML Code</code> and copy the code provided.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/mailerlite/MailerLite12_FormHtml.png" class="img-fluid"></p>
<p>Paste this code into a <code>subscribe.html</code> file at the top level of your blog’s directory.</p>
</section>
<section id="modify-_quarto.yml" class="level3">
<h3 class="anchored" data-anchor-id="modify-_quarto.yml">Modify _quarto.yml</h3>
<p>Add the <code>subscribe.html</code> file to your <code>_quarto.yml</code> file by adding it to the <code>margin-header</code> attribute. This option will look like this in your <code>_quarto.yml</code> file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">website</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # (additional metadata excluded for brevity)</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">margin-header</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> subscribe.html</span></span></code></pre></div>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>That is all it takes to get subscriptions working on your blog with MailerLite! Everything you just set up is editable so if you don’t like how the email or the subscription widget looks, you can go in and edit your templates.</p>
</section>
<section id="live-example" class="level3">
<h3 class="anchored" data-anchor-id="live-example">Live example</h3>
<p>Check out <a href="https://isaac-flath.tech">Isaac Flath’s blog</a> to see the MailerLite widget in action!</p>
</section>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Perhaps you don’t have an alternative address. Or perhaps you just want something simple to get started with. There’s still a way to implement blog subscriptions! It requires more manual effort, but gets the job done: embedding online forms (e.g., Google Forms, Microsoft Forms, etc.).</p>
<p>It involves embedding a form in your website, collecting responses from it, creating a mailing list from those responses, and then composing and sending an email with the list.</p>
<p>The example in the steps below use Google Forms, though it would be very similar to Microsoft Forms. The steps below should also generally apply to any other online forms service.</p>
<section id="step-1-create-the-form." class="level3">
<h3 class="anchored" data-anchor-id="step-1-create-the-form.">Step 1: Create the form.</h3>
<p>Using your online form provider of choice, create your form! A simple form would include a text box for inputting an email, with a simple check to see if the entered email is valid.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/1.png" class="img-fluid"></p>
<p>On Google Forms, you have an option to implement email checking with the following option.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/2.png" class="img-fluid"></p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/3.png" class="img-fluid"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>You may want to allow responses to be edited after submission, create a confirmation message, and disable a link to submit another response.</p>
<p>In Google Forms, these options can be toggled under the ‘Settings’ tab.</p>
</div>
</div>
</div>
</section>
<section id="step-2-obtain-the-embed-snippet." class="level3">
<h3 class="anchored" data-anchor-id="step-2-obtain-the-embed-snippet.">Step 2: Obtain the embed snippet.</h3>
<p>Obtain the HTML snippet which you can paste into your website’s source.</p>
<p>To do this, press send…</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/4.png" class="img-fluid"></p>
<p>…go to the embed tab…</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/5.png" class="img-fluid"></p>
<p>…and copy the snippet.</p>
</section>
<section id="step-3-embed-the-embed" class="level3">
<h3 class="anchored" data-anchor-id="step-3-embed-the-embed">Step 3: Embed the embed</h3>
<p>Paste the snippet whereever you want to put the form on your site!</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/6.png" class="img-fluid"></p>
<p>You can adjust the size of the embed by tweaking these values.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/7.png" class="img-fluid"></p>
</section>
<section id="step-4-unsubscribing." class="level3">
<h3 class="anchored" data-anchor-id="step-4-unsubscribing.">Step 4: Unsubscribing.</h3>
<p>Repeat steps 1-3 above and create a form that would allow subscribers to unsubscribe from receiving notifications. Make sure this form is clearly accessible in your site.</p>
</section>
<section id="step-5-gathering-emails." class="level3">
<h3 class="anchored" data-anchor-id="step-5-gathering-emails.">Step 5: Gathering emails.</h3>
<p>Head to the responses tab of your form.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/8.png" class="img-fluid"></p>
<p>You can take these email addresses and create a mailing list in the email service of your choice.</p>
<p>You can also download a CSV file containing the responses.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/9.png" class="img-fluid"></p>
<p>Alternatively, you can also create a spreadsheet by clicking on the spreadsheet icon.</p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/10.png" class="img-fluid"></p>
<p><img src="https://forbo7.github.io/forblog/images/7_blog_subscriptions/manual/11.png" class="img-fluid"></p>
<p><strong>At the same time,</strong> check the responses in your unsubscribe form and tally them against the responses received in your subscribe form. Remove any email addresses that need to be removed.</p>
</section>
<section id="step-6-compose-and-send" class="level3">
<h3 class="anchored" data-anchor-id="step-6-compose-and-send">Step 6: Compose and send!</h3>
<p>Now compose the email how you would like to, and hit that send button!</p>
<div class="callout callout-style-simple callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Before you hit that send button!
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure you include a clearly visible link in your email that would allow recipients to unsubscribe.</p>
</div>
</div>
</section>
<section id="step-0-extras" class="level3">
<h3 class="anchored" data-anchor-id="step-0-extras">Step 0: Extras</h3>
<div class="callout callout-style-simple callout-tip">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>You could combine the subscribe and unsubscribe forms into a single form so it would be easier to manage. The form would initially ask if a user would like to subscribe or unsubscribe. Based on their input, the form would take them to the appropriate section.</p>
<p>Further expanding on this, if your site has multiple feeds, the form could also ask which feed the user would like to subscribe to or unsubscribe from.</p>
</div>
</div>
</div>
</section>
<section id="live-example-1" class="level3">
<h3 class="anchored" data-anchor-id="live-example-1">Live example</h3>
<p>Check out <a href="https://forbo7.github.io/forblog/">Salman Naqvi’s ForBlog</a> to see embedded forms in action!</p>
</section>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<section id="option-3" class="level2">
<h2 class="anchored" data-anchor-id="option-3">Option 3</h2>
<p>Perhaps you know some HTML and JS, or even only JS, and don’t have an alternative address. Instead of creating the frontend with HTML, try using the <a href="https://github.com/jlgraves-ubc/forms">Quarto HTML Forms</a> extension by <a href="https://github.com/jlgraves-ubc">Jonathan Graves</a>.</p>
<p>This extension allows you to implement HTML forms through <a href="">Quarto Shortcodes</a> and YAML Options. However, you still will need to handle the backend with JavaScript and perhaps a few other technologies. If you’re interested in implementing it this way, you probably already know how to. If not, there are plenty of great guides online!.</p>
</section>
</div>
</div>
</div>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>Thanks to Isaac Flath for collaborating with me on this guide! You can view his blog, works, and contact <a href="https://isaac-flath.tech">here</a>.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Quarto</category>
  <category>Collaboration</category>
  <guid>https://forbo7.github.io/forblog/posts/7_blog_subscriptions.html</guid>
  <pubDate>Fri, 23 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://forbo7.github.io/forblog/images/7_blog_subscriptions/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>AI in a Nutshell</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell.html</link>
  <description><![CDATA[ 



<p><em>This blog post was updated on <strong>Saturday, 12 November 2022</strong>.</em></p>
<p><img src="https://forbo7.github.io/forblog/images/6_ai_in_a_nutshell/thumbnail.png" class="img-fluid" alt="A circuit board inside a walnut."></p>
<p>Artificial Intelligence. Machine Learning. Neural Networks. Deep Learning. Fancy Words. Deceptively Simple. All really the same.</p>
<p>The basic workflow to create such a system is below.</p>
<div class="grid">
<div class="g-col-4">

</div>
<div class="g-col-4">
<div class="cell" data-fig-width="2">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    A[Function] -- fits --&gt; B[Data]
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="g-col-4">

</div>
</div>
<p>Very simple, eh? Of course, it’s a very high level abstraction, but this high level view will make this seemingly complex topic very simple.</p>
<p>First, what’s the main thing modern AI methods try to do? They try to make predictions about certain things.</p>
<p>So a <strong>function</strong> of sorts is needed to achieve this. A function that can make these predictions. Think of a function as a machine. You put something into the machine and then, with whatever was input, the machine then produces an output.</p>
<p>The machine that we will be working with has two input slots: one slot is for <strong>training</strong> and the other slot is for predictions.</p>
<p>To create a function that produces predictions, we need to tell the function what sort of predictions it needs to make.</p>
<p>To do that, we can pour some data into the <strong>training</strong> slot. This data will tell the function what sort of predictions to output. This process is known as <strong>fitting</strong> the function to the data.</p>
<p>To fit the function onto data, you <strong>train</strong> the function.</p>
<section id="simple-case-quadratic-function" class="level2">
<h2 class="anchored" data-anchor-id="simple-case-quadratic-function">Simple Case: Quadratic Function</h2>
<p><em>Gasp!</em> A quadratic?? What’s this nonsense!</p>
<p>A quadratic is a very simple equation. When shown on a graph, it looks like this.</p>
<div class="cell" data-execution_count="5">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We’ll be using this equation to demonstrate a very simple example.</p>
<p>The basic workflow for fitting a function to data is below.</p>
<div class="grid">
<div class="g-col-2">

</div>
<div class="g-col-8">
<div class="cell" data-fig-width="3.5">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    B[Calculate Loss] --&gt; C[Calculate Gradients] --&gt; D[Update Parameters] --&gt; B
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="g-col-2">

</div>
</div>
<p>It can seem like a lot at first glance; quite a few new terms too.</p>
<p>We’ll break this down by going over the very simple example.</p>
<p>Let’s say we have the following data points that describe, say, the speed of an object with respect to time. We want to predict what the speed of an object would be outside these data points.</p>
<p>The horizontal axis is time and the vertical axis is the object’s speed.</p>
<div class="cell" data-tags="[]" data-execution_count="7">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see that the data looks like the quadratic function shown above! Therefore, we could use the quadratic to predict what the speed of the object would be after 2.0 s and before -2.0 s.</p>
<p>A quadratic equation includes three numbers which we will call <img src="https://latex.codecogs.com/png.latex?a">, <img src="https://latex.codecogs.com/png.latex?b">, and <img src="https://latex.codecogs.com/png.latex?c">. These three numbers affect or control how our quadratic function will end up looking. <img src="https://latex.codecogs.com/png.latex?a">, <img src="https://latex.codecogs.com/png.latex?b">, and <img src="https://latex.codecogs.com/png.latex?c"> are our <strong>parameters</strong>.</p>
<p>Let’s let <img src="https://latex.codecogs.com/png.latex?a">, <img src="https://latex.codecogs.com/png.latex?b">, and <img src="https://latex.codecogs.com/png.latex?c"> all equal <img src="https://latex.codecogs.com/png.latex?1"> to begin with.</p>
<div class="cell" data-execution_count="8">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Hmm, not a very good fit.</p>
<p>Let’s try another set of values for the parameters: <img src="https://latex.codecogs.com/png.latex?2">, <img src="https://latex.codecogs.com/png.latex?1">, <img src="https://latex.codecogs.com/png.latex?1.5">.</p>
<div class="cell" data-tags="[]" data-execution_count="9">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Looking much better now!</p>
<p>Let’s see what <img src="https://latex.codecogs.com/png.latex?2">, <img src="https://latex.codecogs.com/png.latex?0">, and <img src="https://latex.codecogs.com/png.latex?1.5"> gives us.</p>
<div class="cell" data-execution_count="10">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Eyeballing this is difficult. A certain set of parameters we use may be good by looking at the resulting graph, but in reality, it may not be.</p>
<p>What we need is something that can tell us how good our function is; something that tells us whether the changes we are making are actually good or not. To do this, we can calculate a number called the <strong>loss</strong>. The smaller the loss, the better the function is.</p>
<p>There are many different ways loss can be calculated. The way we will be doing it is known as <strong>mean absolute error (MAE)</strong>. In simple terms, it tells us how far off each prediction is from the actual value. For example, if we have a MAE of 1, this means that, on average, each prediction we make is 1 unit off from the real value.</p>
<p>In our case, a MAE of 1 would mean that each prediction is on average 1 m/s off from the real value.</p>
<p>Let’s repeat what we did above, but this time, we’ll also see what the MAE is.</p>
<div class="cell" data-execution_count="12">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Again, this means that on average, each prediction we will make is 2.61 m/s off from the real value.</p>
<div class="cell" data-execution_count="13">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>That’s a big jump!</p>
<div class="cell" data-execution_count="14">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Hmm, things got worse.</p>
<p>Doing this process by hand is very tedious. How do we know if the new set of parameters we are using would improve the function? There needs to be a way to automate this so we don’t have to sit down and do this by hand.</p>
<p>What we can do is update the parameters based on the loss. This would in turn create new parameters that would decrease the loss.</p>
<div class="grid">
<div class="g-col-4">

</div>
<div class="g-col-4">
<div class="cell" data-fig-width="2.2">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    A[Loss] -- Updates ---&gt; B[Parameters] -- Updates ---&gt; A
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="g-col-4">

</div>
</div>
<p>Let’s give <img src="https://latex.codecogs.com/png.latex?a">, <img src="https://latex.codecogs.com/png.latex?b">, and <img src="https://latex.codecogs.com/png.latex?c"> an arbitrary set of parameters <img src="https://latex.codecogs.com/png.latex?1.1">, <img src="https://latex.codecogs.com/png.latex?1.1">, and <img src="https://latex.codecogs.com/png.latex?1.1">.</p>
<p>Now let’s create a quadratic with this set of parameters and calculate its mean absolute error.</p>
<div class="cell" data-execution_count="16">
<div class="cell-output cell-output-display">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code Output
</div>
</div>
<div class="callout-body-container callout-body">
<p>The MAE is 2.42.</p>
</div>
</div>
</div>
</div>
<p>Now comes the next step: how do we update the parameters based on this loss we have calculated?</p>
<p>To do this, we calculate a new set of quantities known as the gradients. Each parameter has its own gradient.</p>
<p>Let’s say <img src="https://latex.codecogs.com/png.latex?a"> has the value of <img src="https://latex.codecogs.com/png.latex?1">. If <img src="https://latex.codecogs.com/png.latex?a"> has a gradient of value <img src="https://latex.codecogs.com/png.latex?0.5">, this would mean that if we increase <img src="https://latex.codecogs.com/png.latex?a"> by <img src="https://latex.codecogs.com/png.latex?1">, the loss would increase by <img src="https://latex.codecogs.com/png.latex?0.5">. Therefore, if we <em>decrease</em> <img src="https://latex.codecogs.com/png.latex?a"> by <img src="https://latex.codecogs.com/png.latex?1">, this would mean the loss would decrease by <img src="https://latex.codecogs.com/png.latex?0.5">, which is what we want!</p>
<p>Read over this once more and it’ll make sense!</p>
<p>Let’s quickly go over the inverse: if <img src="https://latex.codecogs.com/png.latex?a"> has a gradient of value <img src="https://latex.codecogs.com/png.latex?-0.5">, increasing <img src="https://latex.codecogs.com/png.latex?a"> by <img src="https://latex.codecogs.com/png.latex?1"> would decrease the loss by <img src="https://latex.codecogs.com/png.latex?0.5"> — again, this is what we want! Similarly, decreasing <img src="https://latex.codecogs.com/png.latex?a"> by <img src="https://latex.codecogs.com/png.latex?1"> would increase the loss by <img src="https://latex.codecogs.com/png.latex?0.5">.</p>
<p>The gradients are calculated from the loss. Then the gradients, the current parameters, and along with another value, the parameters are updated to new values. The “another value” is known as the <strong>learning rate</strong>. The learning rate controls how much the gradients update the parameters.</p>
<div class="grid">
<div class="g-col-2">

</div>
<div class="g-col-8">
<div class="cell" data-fig-width="5">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    A[Gradients]
    B[Current Parameters]
    C[Learning Rate]
    D[Magical Box]
    E[Updated Paramters]
    A &amp; B &amp; C ---&gt; D ---&gt; E
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="g-col-2">

</div>
</div>
<p>Lets see this tangibly.</p>
<div class="cell" data-execution_count="17">
<div class="cell-output cell-output-display">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code Output
</div>
</div>
<div class="callout-body-container callout-body">
<p>The gradients for each parameter respectively are [-1.35, -0.03, -0.5].</p>
</div>
</div>
</div>
</div>
<p>Okay, let’s break this down. The gradient for the first parameter <img src="https://latex.codecogs.com/png.latex?a"> is <img src="https://latex.codecogs.com/png.latex?-1.35">. This tells us that if we increase the parameter <img src="https://latex.codecogs.com/png.latex?a"> by <img src="https://latex.codecogs.com/png.latex?1">, our loss will decrease by <img src="https://latex.codecogs.com/png.latex?-1.35">. Similary, if we increase the parameter <img src="https://latex.codecogs.com/png.latex?b"> by <img src="https://latex.codecogs.com/png.latex?1">, this will result in the loss being decreased by <img src="https://latex.codecogs.com/png.latex?-0.03">. The same logic holds for <img src="https://latex.codecogs.com/png.latex?c">.</p>
<p>Let’s now update the parameters. Remember, the current set of parameters, their gradients, and the learning rate all update the current set of parameters to new values.</p>
<div class="cell" data-execution_count="18">
<div class="cell-output cell-output-display">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code Output
</div>
</div>
<div class="callout-body-container callout-body">
<p>The new parameters are [1.11, 1.1, 1.11].</p>
</div>
</div>
</div>
</div>
<p>We can now repeat the process as many times as desired. Let’s do it 4 times.</p>
<div class="cell" data-execution_count="19">
<div class="cell-output cell-output-stdout">
<pre><code>Pass: 0; Loss: 2.4010409560416095
Pass: 1; Loss: 1.9847692009423128
Pass: 2; Loss: 1.498316818239171
Pass: 3; Loss: 1.171195547258246</code></pre>
</div>
<div class="cell-output cell-output-display">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code Output
</div>
</div>
<div class="callout-body-container callout-body">
<p>The MAE after 4 passes is 1.17.</p>
</div>
</div>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-19-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>And there you go! An even better fitting quadratic!</p>
<p>Let’s see what the object’s speed is at 1 second.</p>
<div class="cell" data-execution_count="20">
<div class="cell-output cell-output-display">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code Output
</div>
</div>
<div class="callout-body-container callout-body">
<p>The object’s velocity at 1 seconds is 5.65 m/s.</p>
</div>
</div>
</div>
</div>
<p>That roughly seems right!</p>
<p>Let’s see what the object’s speed would be at 3 seconds.</p>
<div class="cell" data-execution_count="21">
<div class="cell-output cell-output-display">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code Output
</div>
</div>
<div class="callout-body-container callout-body">
<p>The object’s velocity at 1 seconds is 30.31 m/s.</p>
</div>
</div>
</div>
</div>
<p>And now, the diagram below should make sense!</p>
<div class="grid">
<div class="g-col-2">

</div>
<div class="g-col-8">
<div class="cell" data-fig-width="3.5">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TB
    B[Calculate Loss] --&gt; C[Calculate Gradients] --&gt; D[Update Parameters] --&gt; B
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="g-col-2">

</div>
</div>
</section>
<section id="the-cool-case-relus" class="level2">
<h2 class="anchored" data-anchor-id="the-cool-case-relus">The Cool Case: ReLUs</h2>
<p>The quadratic example above is a nice, simple way to get a grasp of things. However, you may be wondering, “What if the data doesn’t follow a quadratic shape? What do we do then?”</p>
<p>And that’s a good question! What if our data doesn’t follow any sort of mathematical shape? What if we don’t even know the shape the data will follow? How do we know what function to use in that case?</p>
<p>There is a solution to that! There is an easy way to create a function that bends and twists itself to fit the data; an “unbound” function of sorts, as I like to call it.</p>
<p>This can be achieved by using another equation known as the <strong>ReLU</strong>. Another fancy word that can make you sound like a professional, while also being really simple. ReLU is short for <strong>Rectified Linear Unit</strong>.</p>
<p>The ReLU takes any value that is less than 0, and converts to 0.</p>
<p>Let’s see this.</p>
<p>Take the following line. It has both positive and negative values on the vertical axis.</p>
<div class="cell" data-execution_count="22">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-22-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>When we use a ReLU, all negative values are converted to zero.</p>
<div class="cell" data-execution_count="23">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s return to our original data.</p>
<div class="cell" data-execution_count="24">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Now a single ReLU won’t work as seen below.</p>
<div class="cell" data-execution_count="25">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Even after we try to fit it.</p>
<div class="cell" data-execution_count="26">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>But look at what happens when two ReLUs are, literally, added together!</p>
<div class="cell" data-execution_count="27">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-27-output-1.png" class="img-fluid"></p>
</div>
</div>
<!-- - Seed 22; 196 passes; lr=0.01
- Seed 33; 49 passes; lr=0.1
- Seed 16; 20 passes; lr=0.5 -->
<p>Pretty neat, hey?</p>
<p>Let’s add a third ReLU to the mix.</p>
<!-- #| output: false
- Seed 16; 35 passes; lr=0.5
- Seed 33: 35 passes; lr=0.1
- Seed 10: 45 passes; lr=0.1
- Seed 33; 50 passes; lr=0.05
- Seed 38, 196 passes; lr=0.01 -->
<div class="cell" data-execution_count="31">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-31-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>You can see here how the function is adapting to the shape of the data.</p>
<p>With some extra experimentation, I was able to get the loss down to 1.08!</p>
<div class="cell" data-execution_count="32">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-32-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>That said, it’s not too much of a difference when compared to two ReLUs.</p>
<p>What if we add 5 more to the mix, for a total of 8?</p>
<div class="cell" data-execution_count="35">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-35-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Nice! The MAE has gone below 1!</p>
<p>It’s even beat the quadratic function from before! With some expermimenting, I had managed to get the quadratic’s loss down to 1.03.</p>
<div class="cell" data-execution_count="36">
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell_files/figure-html/cell-36-output-1.png" class="img-fluid"></p>
</div>
</div>
<!-- - Seed 16; 36 passes; lr=0.1
- Seed 42; 37 passes; lr=0.5 -->
<p>Let’s use the model that has 8 ReLUs to predict what the object’s velocity would be at 1 second.</p>
<div class="cell" data-execution_count="39">
<div class="cell-output cell-output-display">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code Output
</div>
</div>
<div class="callout-body-container callout-body">
<p>The object’s speed at 1 s is 4.9 m/s.</p>
</div>
</div>
</div>
</div>
<p>Hmm, yes, that is a bit off. But that is fine because overall, the function is a lot more accurate for all the datapoints.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>See how easy this stuff all is? All those fancy terms makes this feel complex when in reality, it’s all really simple.</p>
<p>Why not now go and venture off to learn more and implement your own models!</p>
<p>Below are two free courses I can recommend:</p>
<ul>
<li><p><a href="https://www.elementsofai.com">Elements of AI</a></p>
<p>A great primer into AI. The course goes over the history, the implementations, and the implications of this field, all without needing the knowledge of programming or complex mathematics.</p></li>
<li><p><a href="https://course.fast.ai">Practical Deep Learning for Coders</a></p>
<p>This course is different from other AI courses you’ll find. How? Because instead of starting off with the nitty gritty basics, you begin by actually implementing your own simple image classifier (a model that can tell what thing is in an image). You’ll be surprised at how simple it is to implement models with minimal code, and how little you need to know to get started (hint: you only really need high-school maths).</p></li>
</ul>
<p><strong>If you have any questions, comments, suggestions, or feedback, please do post them down in the comment section below!</strong></p>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>This article was inspired by the <a href="https://www.kaggle.com/code/jhoward/how-does-a-neural-net-really-work/notebook">How does a neural net really work</a> Kaggle Notebook by <a href="https://www.kaggle.com/jhoward">Jeremy Howard</a>, and lesson 3 of <a href="https://course.fast.ai/Lessons/lesson3.html">Practical Deep Learning for Coders</a>.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Creating Models</category>
  <guid>https://forbo7.github.io/forblog/posts/6_ai_in_a_nutshell.html</guid>
  <pubDate>Tue, 04 Oct 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Detecting Floods for Disaster Relief</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief.html</link>
  <description><![CDATA[ 



<p><strong>You can find this notebook on Kaggle <a href="https://www.kaggle.com/code/forbo7/flood-classifier">here</a>.</strong></p>
<p><em>This article was updated on <strong>Friday, 11 November 2022</strong>.</em></p>
<!-- TODO: Rotate image. -->
<p><img src="https://forbo7.github.io/forblog/images/5_detecting_floods_for_disaster_relief/thumbnail.png" class="img-fluid" alt="An image of a house on top of a pinnacle of rock surrounded by water."></p>
<p>The model that will be created in this notebook can detect whether an area shown in an image is flooded or not. The idea for creating this model has been spurred from the recent floodings in Pakistan.</p>
<p>Such models can prove useful in flood relief, helping to detect which areas need immediate focus.</p>
<p>The dataset used to train this model is <strong>Louisiana flood 2016</strong>, uploaded by Kaggle user <strong>Rahul T P</strong>, which you can view <a href="https://www.kaggle.com/datasets/rahultp97/louisiana-flood-2016">here</a>.</p>
<p>The fastai library, a high level PyTorch library, has been used.</p>
<p>One of the points of this notebook is to showcase how simple it is to create powerful models. That said, this notebook is <strong>not</strong> a tutorial or guide.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:05.493309Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:05.492447Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:08.742561Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:08.741405Z&quot;}" data-papermill="{&quot;duration&quot;:3.270399,&quot;end_time&quot;:&quot;2022-09-11T07:18:08.745299&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:05.474900&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<section id="sort-data." class="level2">
<h2 class="anchored" data-anchor-id="sort-data.">Sort data.</h2>
<p>The data in the dataset needs to be organized into <em>train</em> and <em>valid</em> folders. Each will contain the same subfolders, <em>0</em> and <em>1</em>, which will be used to label the data. A label of <code>0</code> indicates the area shown in the image is not flooded, while a label of <code>1</code> indicates the area shown in the image is flooded.</p>
<p>The images in the dataset itself has been organized as follows:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;If no underscore is in the file name, the image shows the area before or after the flood.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;If an underscore is in the file name, the image shows the area during the flood:</p>
<ul>
<li>If a zero follows the underscore, the area was not flooded.</li>
<li>If a one follows the underscore, the area was flooded.</li>
</ul>
<p>Creating the necessary paths.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:08.829498Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:08.828333Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:08.834978Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:08.833986Z&quot;}" data-papermill="{&quot;duration&quot;:0.021492,&quot;end_time&quot;:&quot;2022-09-11T07:18:08.838729&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:08.817237&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">working_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path.cwd()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(working_path)</span>
<span id="cb2-2">folders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>)</span>
<span id="cb2-3">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/kaggle/working</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:08.860991Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:08.859510Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:08.944909Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:08.943807Z&quot;}" data-papermill="{&quot;duration&quot;:0.099093,&quot;end_time&quot;:&quot;2022-09-11T07:18:08.947775&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:08.848682&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/kaggle/input'</span>)</span>
<span id="cb4-2">train_image_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(input_path.rglob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train/*.png'</span>))</span>
<span id="cb4-3">valid_image_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(input_path.rglob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test/*.png'</span>))</span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_image_paths), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_image_paths)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>(270, 52)</code></pre>
</div>
</div>
<p>Creating the necessary directories.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:08.990714Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:08.990359Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:08.996844Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:08.995770Z&quot;}" data-papermill="{&quot;duration&quot;:0.019674,&quot;end_time&quot;:&quot;2022-09-11T07:18:08.998954&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:08.979280&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> folder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> folders:</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> (working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>folder).exists():</span>
<span id="cb6-3">        (working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>folder).mkdir()</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels:</span>
<span id="cb6-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> (working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>folder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>label).exists():</span>
<span id="cb6-6">            (working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>folder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>label).mkdir()</span></code></pre></div>
</div>
<p>Move images to new directories.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:09.042253Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:09.041352Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:12.002238Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:12.001094Z&quot;}" data-papermill="{&quot;duration&quot;:2.974352,&quot;end_time&quot;:&quot;2022-09-11T07:18:12.004531&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:09.030179&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image_path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> train_image_paths:</span>
<span id="cb7-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_1'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> image_path.stem:</span>
<span id="cb7-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> (working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>image_path.name).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb7-5">                f.write(image_path.read_bytes())</span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> (working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>image_path.name).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb7-8">                f.write(image_path.read_bytes())</span>
<span id="cb7-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FileExistsError</span>:</span>
<span id="cb7-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training images have already been moved."</span>)</span>
<span id="cb7-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training images moved."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training images moved.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:12.028069Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:12.026523Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:12.395600Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:12.394388Z&quot;}" data-papermill="{&quot;duration&quot;:0.382827,&quot;end_time&quot;:&quot;2022-09-11T07:18:12.398173&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:12.015346&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb9-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image_path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> valid_image_paths:</span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_1'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> image_path.stem:</span>
<span id="cb9-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> (working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>image_path.name).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb9-5">                f.write(image_path.read_bytes())</span>
<span id="cb9-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb9-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> (working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>image_path.name).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb9-8">                f.write(image_path.read_bytes())</span>
<span id="cb9-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FileExistsError</span>:</span>
<span id="cb9-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testing images have already been moved."</span>)</span>
<span id="cb9-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb9-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testing images moved."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Testing images moved.</code></pre>
</div>
</div>
<p>Check that images have been moved.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:12.442516Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:12.441495Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:12.452149Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:12.450721Z&quot;}" data-papermill="{&quot;duration&quot;:0.024352,&quot;end_time&quot;:&quot;2022-09-11T07:18:12.454314&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:12.429962&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">training_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(training_images))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>270</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:12.477823Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:12.477117Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:12.688255Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:12.687359Z&quot;}" data-papermill="{&quot;duration&quot;:0.226811,&quot;end_time&quot;:&quot;2022-09-11T07:18:12.691568&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:12.464757&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(training_images[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:12.719927Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:12.719594Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:12.728327Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:12.727274Z&quot;}" data-papermill="{&quot;duration&quot;:0.025912,&quot;end_time&quot;:&quot;2022-09-11T07:18:12.730913&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:12.705001&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">validation_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(working_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(validation_images))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>52</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:12.760100Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:12.759783Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:12.880274Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:12.879306Z&quot;}" data-papermill="{&quot;duration&quot;:0.139112,&quot;end_time&quot;:&quot;2022-09-11T07:18:12.884616&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:12.745504&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(validation_images[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="load-data" class="level2">
<h2 class="anchored" data-anchor-id="load-data">Load data</h2>
<p>Create the training and validation dataloaders through fastai’s quick and easy <code>DataBlock</code> class.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:12.985360Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:12.985000Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:16.619229Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:16.618265Z&quot;}" data-papermill="{&quot;duration&quot;:3.654376,&quot;end_time&quot;:&quot;2022-09-11T07:18:16.621871&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:12.967495&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">dataloaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb17-2">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ImageBlock, CategoryBlock),</span>
<span id="cb17-3">    get_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files,</span>
<span id="cb17-4">    splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GrandparentSplitter(),</span>
<span id="cb17-5">    get_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parent_label,</span>
<span id="cb17-6">    item_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb17-7">).dataloaders(working_path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span></code></pre></div>
</div>
<p>Check that data has been loaded correctly.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:16.690449Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:16.689337Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:17.569325Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:17.568486Z&quot;}" data-papermill="{&quot;duration&quot;:0.904393,&quot;end_time&quot;:&quot;2022-09-11T07:18:17.576236&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:16.671843&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">dataloaders.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="instantiate-and-train-model" class="level2">
<h2 class="anchored" data-anchor-id="instantiate-and-train-model">Instantiate and Train Model</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:17.666206Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:17.665830Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:58.064050Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:58.062950Z&quot;}" data-papermill="{&quot;duration&quot;:40.424136,&quot;end_time&quot;:&quot;2022-09-11T07:18:58.066398&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:17.642262&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">learner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dataloaders, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb19-2">learner.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bdd89b090c3944d5a5462767fc8bf29d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.919323</td>
<td>1.118264</td>
<td>0.365385</td>
<td>00:09</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.490039</td>
<td>0.628054</td>
<td>0.250000</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.367996</td>
<td>0.411558</td>
<td>0.192308</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.266664</td>
<td>0.472146</td>
<td>0.192308</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.203069</td>
<td>0.256436</td>
<td>0.115385</td>
<td>00:03</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.158453</td>
<td>0.127106</td>
<td>0.076923</td>
<td>00:03</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.124499</td>
<td>0.095927</td>
<td>0.038462</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.098409</td>
<td>0.089279</td>
<td>0.038462</td>
<td>00:03</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.079600</td>
<td>0.093277</td>
<td>0.038462</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.064886</td>
<td>0.090372</td>
<td>0.038462</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Nice! A relatively low error rate for no tweaking.</p>
</section>
<section id="visualizing-mistakes" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-mistakes">Visualizing Mistakes</h2>
<p>We have to see how the model is getting confuzzled.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:58.241827Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:58.241361Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:18:59.575155Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:18:59.573757Z&quot;}" data-papermill="{&quot;duration&quot;:1.361381,&quot;end_time&quot;:&quot;2022-09-11T07:18:59.579075&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:58.217694&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learner)</span>
<span id="cb21-2">interp.plot_confusion_matrix()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-15-output-5.png" class="img-fluid"></p>
</div>
</div>
<p>Only a couple of mistakes. Let’s see what they are.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:18:59.724320Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:18:59.723919Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:00.338604Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:00.337405Z&quot;}" data-papermill="{&quot;duration&quot;:0.648114,&quot;end_time&quot;:&quot;2022-09-11T07:19:00.341972&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:18:59.693858&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-16-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Nothing has been mislabeled, but the first one is especially tricky to determine, even for human eyes.</p>
</section>
<section id="model-inference" class="level2">
<h2 class="anchored" data-anchor-id="model-inference">Model Inference</h2>
<p>Let’s test the model on some images of the recent flooding in Pakistan.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:00.558615Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:00.558198Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:00.565882Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:00.565018Z&quot;}" data-papermill="{&quot;duration&quot;:0.038169,&quot;end_time&quot;:&quot;2022-09-11T07:19:00.567989&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:00.529820&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> infer_image(image_path):</span>
<span id="cb23-2">    display(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image_path))</span>
<span id="cb23-3">    label, _, probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learner.predict(PILImage(PILImage.create(image_path)))</span>
<span id="cb23-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>:</span>
<span id="cb23-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The area shown in the image is not flooded with probability </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probabilities[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%."</span>)</span>
<span id="cb23-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>:</span>
<span id="cb23-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The area shown in the image is flooded with probability </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probabilities[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%."</span>)</span>
<span id="cb23-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb23-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unknown label assigned to image."</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:00.622862Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:00.622520Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:00.688753Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:00.687512Z&quot;}" data-papermill="{&quot;duration&quot;:0.096393,&quot;end_time&quot;:&quot;2022-09-11T07:19:00.690854&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:00.594461&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">infer_image(input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1.jpeg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>The area shown in the image is not flooded with probability 65.65%.</code></pre>
</div>
</div>
<p>Not bad!</p>
<p>Let’s try it on another image.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:00.808329Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:00.807968Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:02.432693Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:02.431630Z&quot;}" data-papermill="{&quot;duration&quot;:1.658645,&quot;end_time&quot;:&quot;2022-09-11T07:19:02.435988&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:00.777343&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="18">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">infer_image(input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2.jpg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>The area shown in the image is flooded with probability 99.90%.</code></pre>
</div>
</div>
<p>The label for this image is kind of meaningless. This is an image of a vast area of land, so certain areas could be flooded, while others are not. That said, it could be used to determine whether there is flooding in the image.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:03.158164Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:03.157795Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:03.326060Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:03.324479Z&quot;}" data-papermill="{&quot;duration&quot;:0.313347,&quot;end_time&quot;:&quot;2022-09-11T07:19:03.329205&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:03.015858&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="19">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">infer_image(input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3.jpg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>The area shown in the image is flooded with probability 99.99%.</code></pre>
</div>
</div>
<p>The model performed really well in this case: the input image is shown at a different angle. The images in the training set only show areas from a top-down view.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:03.915708Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:03.915118Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:04.297396Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:04.296252Z&quot;}" data-papermill="{&quot;duration&quot;:0.532781,&quot;end_time&quot;:&quot;2022-09-11T07:19:04.300294&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:03.767513&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="20">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">infer_image(input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4.jpg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-21-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>The area shown in the image is not flooded with probability 64.56%.</code></pre>
</div>
</div>
<p>Over here, the limitations of the current state of the model can be seen. The model is not performing well on images where the view is more parallel to the ground, since the images in the training set are all top-down.</p>
<p>Let’s do two more images.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:05.417373Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:05.416795Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:05.473225Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:05.471793Z&quot;}" data-papermill="{&quot;duration&quot;:0.252769,&quot;end_time&quot;:&quot;2022-09-11T07:19:05.475284&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:05.222515&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="21">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">infer_image(input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5.jpg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-22-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>The area shown in the image is flooded with probability 99.94%.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:05.835986Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:05.835396Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:06.151206Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:06.150029Z&quot;}" data-papermill="{&quot;duration&quot;:0.504279,&quot;end_time&quot;:&quot;2022-09-11T07:19:06.154063&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:05.649784&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="22">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">infer_image(input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'6.jpg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>The area shown in the image is flooded with probability 100.00%.</code></pre>
</div>
</div>
<p>The model is working well with images of different sizes too, and has given this image a very high, correct confidence.</p>
</section>
<section id="improving-the-model." class="level2">
<h2 class="anchored" data-anchor-id="improving-the-model.">Improving the model.</h2>
<p>Let’s see if we can get the model’s performance to improve on the following image through augmenting the training set.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:07.793911Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:07.793281Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:08.090600Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:08.089689Z&quot;}" data-papermill="{&quot;duration&quot;:0.526936,&quot;end_time&quot;:&quot;2022-09-11T07:19:08.109805&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:07.582869&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="23">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4.jpg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:09.399017Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:09.398632Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:12.073251Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:12.072257Z&quot;}" data-papermill="{&quot;duration&quot;:3.737701,&quot;end_time&quot;:&quot;2022-09-11T07:19:12.075717&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:08.338016&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="24">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">augmented_dataloaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb37-2">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ImageBlock, CategoryBlock),</span>
<span id="cb37-3">    get_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files,</span>
<span id="cb37-4">    splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GrandparentSplitter(),</span>
<span id="cb37-5">    get_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parent_label,</span>
<span id="cb37-6">    item_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb37-7">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms()</span>
<span id="cb37-8">).dataloaders(working_path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:12.539701Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:12.539118Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:13.438651Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:13.437466Z&quot;}" data-papermill="{&quot;duration&quot;:1.134797,&quot;end_time&quot;:&quot;2022-09-11T07:19:13.443352&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:12.308555&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="25">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">augmented_dataloaders.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:14.119021Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:14.118453Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:42.786631Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:42.785492Z&quot;}" data-papermill="{&quot;duration&quot;:28.901784,&quot;end_time&quot;:&quot;2022-09-11T07:19:42.788960&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:13.887176&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="26">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">augmented_learner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(augmented_dataloaders, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb39-2">augmented_learner.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.161182</td>
<td>0.835870</td>
<td>0.365385</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.442552</td>
<td>0.686252</td>
<td>0.288462</td>
<td>00:03</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.417739</td>
<td>0.411907</td>
<td>0.153846</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.346400</td>
<td>0.316388</td>
<td>0.057692</td>
<td>00:03</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.306782</td>
<td>0.213407</td>
<td>0.076923</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.251947</td>
<td>0.199586</td>
<td>0.076923</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.209951</td>
<td>0.141818</td>
<td>0.057692</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.188433</td>
<td>0.116713</td>
<td>0.057692</td>
<td>00:03</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.169689</td>
<td>0.125078</td>
<td>0.057692</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.151843</td>
<td>0.131188</td>
<td>0.057692</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Let’s try the new model out.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:43.735511Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:43.733929Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:44.110452Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:44.109223Z&quot;}" data-papermill="{&quot;duration&quot;:0.619631,&quot;end_time&quot;:&quot;2022-09-11T07:19:44.113360&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:43.493729&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="27">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">display(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4.jpg'</span>))</span>
<span id="cb40-2">label, _, probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> augmented_learner.predict(PILImage(PILImage.create(input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4.jpg'</span>)))</span>
<span id="cb40-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>:</span>
<span id="cb40-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The area shown in the image is not flooded with probability </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probabilities[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%."</span>)</span>
<span id="cb40-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>:</span>
<span id="cb40-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The area shown in the image is flooded with probability </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probabilities[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%."</span>)</span>
<span id="cb40-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb40-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unknown label assigned to image."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>The area shown in the image is flooded with probability 99.91%.</code></pre>
</div>
</div>
<p>Dang, impressive! The correct label <em>and</em> with excellent confidence!</p>
<p>Before we get too excited though, we should check the performance on the model with the previous images.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:45.714022Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:45.713440Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:45.727793Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:45.726862Z&quot;}" data-papermill="{&quot;duration&quot;:0.283643,&quot;end_time&quot;:&quot;2022-09-11T07:19:45.729947&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:45.446304&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="28">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learner.dls.test_dl([image_path <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image_path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>((input_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floodclassifiertestset'</span>).rglob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.*'</span>))])</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:46.267204Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:46.266630Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:47.016009Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:47.014674Z&quot;}" data-papermill="{&quot;duration&quot;:1.030615,&quot;end_time&quot;:&quot;2022-09-11T07:19:47.018653&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:45.988038&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="29">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">probabilities, _, labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> augmented_learner.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataloader, with_decoded<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2022-09-11T07:19:47.597219Z&quot;,&quot;iopub.status.busy&quot;:&quot;2022-09-11T07:19:47.594938Z&quot;,&quot;iopub.status.idle&quot;:&quot;2022-09-11T07:19:48.299583Z&quot;,&quot;shell.execute_reply&quot;:&quot;2022-09-11T07:19:48.298350Z&quot;}" data-papermill="{&quot;duration&quot;:1.000961,&quot;end_time&quot;:&quot;2022-09-11T07:19:48.303699&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2022-09-11T07:19:47.302738&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="30">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Images are numbered horizontally."</span>)</span>
<span id="cb44-2">test_dataloader.show_batch()</span>
<span id="cb44-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> probability, label, image_number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(probabilities, labels, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)):</span>
<span id="cb44-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb44-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image_number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is flooded with a probability of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probability[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%."</span>)</span>
<span id="cb44-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb44-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image_number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is not flooded with a probability of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probability[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%."</span>)</span>
<span id="cb44-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb44-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image_number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has been assigned an unknown label."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Images are numbered horizontally.
Image 1 is flooded with a probability of 95.94%.
Image 2 is flooded with a probability of 99.92%.
Image 3 is flooded with a probability of 91.34%.
Image 4 is flooded with a probability of 99.71%.
Image 5 is flooded with a probability of 100.00%.
Image 6 is flooded with a probability of 100.00%.</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief_files/figure-html/cell-31-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Drastically improved probabilities! A little augmentation can go a long way.</p>
</section>
<section id="takeaways" class="level2">
<h2 class="anchored" data-anchor-id="takeaways">Takeaways</h2>
<p>This model was trained on only 270 images and minimal code. Accessbility and abstraction to the field of machine learning has come a long, long way. Given the right data and the right pretrained model, a powerful model can be produced in less than an hour, if not half.</p>
<p>This is important: in disasters such as floods, the time taken to produce the logistics required for relief can be drastically reduced. It is also important because the barrier of entry to this field is dramatically lowered; more people can create powerful models, in turn producing better solutions.</p>
<p>However, there could be some improvements and additions made to the model:</p>
<ul>
<li><p>Include a third class to the model. Images that are not flooded, but show signs of having been flooded would be assigned this class. The dataset used for this model includes such images.</p></li>
<li><p>Train the model on images that include a variety of geographic locations and dwellings. The current dataset only contains images taken in a lush, green area with plenty of trees; infrastructure looks a certain way; the color of the floodwater is also dependent on the surroundings. All this makes the model good a prediciting whether an image is flooded for images with certain features.</p></li>
</ul>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Creating Models</category>
  <guid>https://forbo7.github.io/forblog/posts/5_detecting_floods_for_disaster_relief.html</guid>
  <pubDate>Mon, 12 Sep 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Quality is Important | Car Classifier</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/4_data_quality_is_important.html</link>
  <description><![CDATA[ 



<p><em>This article was updated on <strong>Thursday, 10 November 2022</strong>.</em></p>
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/thumbnail.jpg" class="img-fluid" alt="A parking lot filled with cars."></p>
<p>I recently created a car classifier that classified cars into their respective brands.</p>
<p>Despite having almost 5000 images in my training set, I ended up trying out over a hundred layers in my model, and twenty epochs. Even then, I had an error rate of 17.4%.</p>
<p>The culprit? My dataset.</p>
<p>I scraped 5000 images of cars (500 for each company) from DuckDuckGo. Naturally, as expected, the data quality is not so good.</p>
<p>Why? Below are some potential reasons:</p>
<ul>
<li>Noncar images present in dataset</li>
<li>Cars of incorrect company present in dataset</li>
<li>F1 cars present in dataset</li>
<li>A large variety of cars from different time periods present in dataset</li>
<li>Different companys’ cars look similar</li>
<li>Modded cars present in dataset</li>
<li>Concept cars present in dataset</li>
<li>Multiple cars present in a single image</li>
<li>Certain angles of cars appear more than others</li>
<li>Cars appear in certain backgrounds more than others</li>
<li>The search term <code>{car_brand} car</code> could be skewing results</li>
</ul>
<p>I could have absolutely achieved better results with fewer layers and fewer epochs if I trained the model on better quality data — or manually combed through the 5000 images 💀. However, I did use fastai’s GUI for data cleaning. This GUI sorts images by their loss which helps to determine if certain images should be relabeled or deleted.</p>
<p>Below is the confusion matrix for this model.</p>
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/confusion_matrix.png" class="img-fluid" style="width:65.0%" alt="A confusion matrix of the model."></p>
<p>It can be seen that this model “confuses” between quite a few different brands: Ford and Chevrolet, Chevrolet and Ford, Jaguar and Aston Martin, Renault and Ford.</p>
<p>But <strong>why</strong> is data quality important? Because without good data, the model will not be able to “see” things the way they actually are, and in turn end up making worse predictions and not generalize to other data.</p>
<p>Let’s say you did not know how, say, a toaster looked like. So I taught you by showing you pictures of a kettle. Then to test you, I showed you a set of pictures depicting various kitchen appliances and told you to find the toaster. You would not be able to.</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/kettle_1.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/kettle_2.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/toaster_1.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/toaster_2.jpg" class="img-fluid"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/kettle_3.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/kettle_4.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/toaster_3.jpg" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://forbo7.github.io/forblog/images/4_data_quality_is_important/toaster_4.jpg" class="img-fluid"></p>
</div>
</div>
</div>
<p>Extending upon this example, say I showed you toasters only from the last two years and from two brands only. You would not be able to identify toasters older than two years, and toasters from other brands to much success.</p>
<p>Obviously, humans are smarter and can infer. AI methods can only infer to a certain degree, mainly based on what is in their dataset. This talk does start to become more philosophical.</p>
<p>The point of this post is to emphasize the importance of data quality and different aspects to consider as to why data quality may not be good. You can have the best architecture in the world, but it is useless if you do not have good data.</p>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Data</category>
  <category>Analyzing Models</category>
  <guid>https://forbo7.github.io/forblog/posts/4_data_quality_is_important.html</guid>
  <pubDate>Sat, 04 Jun 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A No Nonsense Guide to Reading a Confusion Matrix</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/3_the_confusion_matrix.html</link>
  <description><![CDATA[ 



<p><em>This article was updated on <strong>Thursday, 10 November 2022</strong>.</em></p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/thumbnail.jpg" class="img-fluid" alt="A meme from the Matrix film."></p>
<p>Confusion matrices help model designers view what mistakes a model has made.</p>
<p>In this post, I’ll be telling you how to easily read such matrices.</p>
<p>Jump to Section&nbsp;2 for an ultra concise rundown.</p>
<p>Ready? Here we go.</p>
<section id="case-1-introduction" class="level2">
<h2 class="anchored" data-anchor-id="case-1-introduction">Case 1: Introduction</h2>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1.png" class="img-fluid" style="width:65.0%"></p>
<p>Ignore the “Actual” and “Predicted” labels for now.</p>
<p>Let’s compare grizzly bears to black bears.</p>
<p>All comparisons begin at the bottom, with the columns.</p>
<p>First, highlight the grizzly bear column.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1_1.png" class="img-fluid" style="width:65.0%"></p>
<p>Next, highlight the black bear row.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1_2.png" class="img-fluid" style="width:65.0%"></p>
<p>Now find the common entry in the highlighted column and row.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1_3.png" class="img-fluid" style="width:65.0%"></p>
<p>This common entry is our required information.</p>
<p>All entries in the diagonal going from the top left to the bottom right (blue) are correct classifications. All other entries are incorrect classifications.</p>
<p>Our common entry does not lie in the main diagonal. Therefore, we are looking at incorrect classifications.</p>
<p>We have compared grizzly bears to black bears. Therefore, from this deduction, <strong>three grizzly bears have been incorrectly classified as black bears</strong>.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>There is a difference between comparing grizzly bears to black bears and black bears to grizzly bears.</strong></p>
<p>Comparing grizzly bears to black bears means, “How many grizzly bears were misclassified as black bears?”</p>
<p>Comparing black bears to grizzly bears means, “How many black bears were misclassified as grizzly bears?”</p>
</div>
</div>
</section>
<section id="sec-case2" class="level2">
<h2 class="anchored" data-anchor-id="sec-case2">Case 2: Ultra Concise</h2>
<p>Let’s compare black bears to grizzly bears.</p>
<p>Highlight the black bear column.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1_4.png" class="img-fluid" style="width:65.0%"></p>
<p>Highlight the grizzly bear row.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1_5.png" class="img-fluid" style="width:65.0%"></p>
<p>Highlight the common entry.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1_6.png" class="img-fluid" style="width:65.0%"></p>
<p>Zero black bears were misclassified as grizzly bears.</p>
</section>
<section id="case-3-correct-classifications" class="level2">
<h2 class="anchored" data-anchor-id="case-3-correct-classifications">Case 3: Correct Classifications</h2>
<p>Let’s see how many teddy bears were correctly classified. We are essentially comparing teddy bears to teddy bears.</p>
<p>Highlight the teddy bear column.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1_7.png" class="img-fluid" style="width:65.0%"></p>
<p>Highlight the teddy bear row.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1_8.png" class="img-fluid" style="width:65.0%"></p>
<p>Highlight the common entry.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_1_9.png" class="img-fluid" style="width:65.0%"></p>
<p>Fifty three teddy bears were correctly classified as teddy bears.</p>
</section>
<section id="exercise-do-it-yourself" class="level2">
<h2 class="anchored" data-anchor-id="exercise-do-it-yourself">Exercise: Do It Yourself</h2>
<p>Below is a confusion matrix of a car classifier that classifies cars into their brand.</p>
<p><img src="https://forbo7.github.io/forblog/images/3_the_confusion_matrix/confusion_matrix_2.png" class="img-fluid" style="width:65.0%"></p>
<p>You learn by doing!</p>
<ul>
<li>How many Lamborghinis were correctly classified?</li>
<li>How many Jaguars were incorrectly classified?</li>
<li>How many Chevrolets were misclassified as Fords?</li>
<li>How many Fords were misclassified as Chevrolets?</li>
<li>Which two car brands did the model have the most trouble differentiating between?</li>
</ul>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Analyzing Models</category>
  <guid>https://forbo7.github.io/forblog/posts/3_the_confusion_matrix.html</guid>
  <pubDate>Fri, 03 Jun 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My first AI model</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/2_bear_classifier_model.html</link>
  <description><![CDATA[ 



<p><em>This article was updated on <strong>Tuesday, 1 November 2022</strong>.</em></p>
<p><img src="https://forbo7.github.io/forblog/images/2_bear_classifier_model/thumbnail.jpg" class="img-fluid" alt="A bear waving hello."></p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This is my first attempt at creating an AI model: an image classifier. This classifier can tell whether a grizzly bear, black bear, or teddy bear is in an image.</p>
<p>You can visit the classifier <a href="https://forbo7.github.io/web_apps/apps/bear_detector.html">here</a> to test it out for yourself!</p>
</section>
<section id="load-libraries" class="level2">
<h2 class="anchored" data-anchor-id="load-libraries">Load libraries</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No need to fret! fastai is specifically designed to be used with import *.</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastbook <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
</section>
<section id="download-image-files" class="level2">
<h2 class="anchored" data-anchor-id="download-image-files">Download image files</h2>
<p>Specify the bear images we wish to download.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">bear_types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grizzly'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'teddy'</span>,)</span>
<span id="cb2-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bears'</span>)</span></code></pre></div>
</div>
<p>Download 200 of each bear (<code>search_images_ddg</code> defaults to 200 URLs) and assign them to a specific directory.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> path.exists():</span>
<span id="cb3-2">    path.mkdir()</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bear_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bear_types:</span>
<span id="cb3-4">        destination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> bear_type)</span>
<span id="cb3-5">        destination.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-6">        urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images_ddg(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bear_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bear"</span>)</span>
<span id="cb3-7">        download_iamges(destination, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>urls)</span></code></pre></div>
</div>
<p>Check if our folder has the image files.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">fns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path)</span>
<span id="cb4-2">fns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(#802) [Path('bears/grizzly/00000238.jpg'),Path('bears/grizzly/00000047.jpg'),Path('bears/grizzly/00000199.jpg'),Path('bears/grizzly/00000237.jpg'),Path('bears/grizzly/00000055.jpg'),Path('bears/grizzly/00000000.png'),Path('bears/grizzly/00000235.jpg'),Path('bears/grizzly/00000159.jpg'),Path('bears/grizzly/00000268.jpg'),Path('bears/grizzly/00000266.jpg')...]</code></pre>
</div>
</div>
<p>Check for corrupt images.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">corrupt_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(fns)</span>
<span id="cb6-2">corrupt_images</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>(#0) []</code></pre>
</div>
</div>
<p>Remove corrupt images.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">corrupt_images.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(pathlib.Path.unlink)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(#0) []</code></pre>
</div>
</div>
</section>
<section id="load-image-files" class="level2">
<h2 class="anchored" data-anchor-id="load-image-files">Load image files</h2>
<p>The DataBlock API for creates the necessary <code>DataLoaders</code> for us.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb10-2">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb10-3">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb10-4">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb10-5">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb10-6">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),</span>
<span id="cb10-7">)</span></code></pre></div>
</div>
<p>The <code>blocks</code> parameter allows us to specify the independent and dependent variables.</p>
<p>The <code>get_items</code> parameter tells fastai how to obtain our data. We use the <code>get_image_files</code> function to obtain our images.</p>
<p>The <code>splitter</code> parameter allows us to tell fastai how to split our data into training and validation sets. Since our data is one big set, we use the <code>RandomSplitter</code> class and tell it to use 20% of our data as the validation set. We specify a seed so the same split occurs each time.</p>
<p>The <code>get_y</code> parameter obtains our labels. The <code>parent_label</code> function simply gets the name of the folder a file is in. Since we have organized our bear images into different folders, this will nicely handle our target labels.</p>
<p>The <code>item_tfms</code> parameter allows us to specify a transform to apply to our data. Since we want all our images to be of the same size, we use the <code>Resize()</code> class.</p>
<p>We now have a DataBlock object from which can load the data.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dataloaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span></code></pre></div>
</div>
<p>Let us view a few images in the validation set.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">dataloaders.valid.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/2_bear_classifier_model_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="data-augmentation" class="level2">
<h2 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h2>
<p>Data augmentation refers to creating random variations to our input data. This produces new data points based on the existing data points. This allows each data point to look different, without changing their meaning.</p>
<p>Typical examples of image augmentation include rotation, flipping, perspective warping, brightness changing, and contrast changing.</p>
<section id="cropping" class="level3">
<h3 class="anchored" data-anchor-id="cropping">Cropping</h3>
<p>The validation set images shown above are cropped. We achieved this by specifying the <code>Resize</code> argument when defining the <code>DataBlock</code>. <code>Resize</code> crops images to the size specified.</p>
<p>Cropping results in detail being lost.</p>
<p>Alternatively, we can squish or stretch images, or pad them to a desired size.</p>
</section>
<section id="squishingstretching" class="level3">
<h3 class="anchored" data-anchor-id="squishingstretching">Squishing/Stretching</h3>
<p>The problem with squishing or stretching images is that the model will learn to “see” images the way they are not supposed to be.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.new(item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, ResizeMethod.Squish))</span>
<span id="cb13-2">dataloaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span>
<span id="cb13-3">dataloaders.valid.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/2_bear_classifier_model_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="padding" class="level3">
<h3 class="anchored" data-anchor-id="padding">Padding</h3>
<p>By padding, the image is surrounded typically by black, meaningless pixels. This results in extra, wasted computation.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.new(item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'zeros'</span>))</span>
<span id="cb14-2">dataloaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span>
<span id="cb14-3">dataloaders.valid.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/2_bear_classifier_model_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The best approach is to take random crops of different parts of the same image. This makes sure that the model does not miss out on any details whilst letting it “know” how an object fully looks like.</p>
<p>Below, we have <code>unique=True</code> so that the same image is repeated with different variations.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.new(item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>))</span>
<span id="cb15-2">dataloaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span>
<span id="cb15-3">dataloaders.train.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/2_bear_classifier_model_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>fastai comes with a function that applies a variety of augmentations to images. This can allow a model to “see” and recognize images in a variety of scenarios.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.new(item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>), batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(mult<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb16-2">dataloaders  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span>
<span id="cb16-3">dataloaders.train.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/2_bear_classifier_model_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>I have not used <code>RandomResizedCrop</code> here so that the different augmentations can be seen more clearly. <code>RandomResizedCrop</code> will be used when the model is trained.</p>
<p><code>batch_tfms</code> tells fastai that we want to use these transforms on a batch.</p>
</section>
</section>
<section id="training-the-model" class="level2">
<h2 class="anchored" data-anchor-id="training-the-model">Training the model</h2>
<p>We do not have a lot of data. Only 200 images of each bear at most. Therefore, we will augment our images not only to get more data, but so that the model can recognize data in a variety of situations.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.new(</span>
<span id="cb17-2">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb17-3">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(),</span>
<span id="cb17-4">)</span>
<span id="cb17-5">dataloaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span></code></pre></div>
</div>
<p>We will now create our learner and fine-tune it.</p>
<p>We will be using the ResNet18 architecture (which is a convolutional neural network, or CNN for short). Error rate will be the metric.</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dataloaders, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb18-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5e2ebba3dfc945c9be0edd07e1196ebe","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.985666</td>
<td>0.104632</td>
<td>0.025000</td>
<td>00:20</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.132230</td>
<td>0.073527</td>
<td>0.012500</td>
<td>00:22</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.106222</td>
<td>0.054833</td>
<td>0.018750</td>
<td>00:22</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.087129</td>
<td>0.058497</td>
<td>0.012500</td>
<td>00:20</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.069890</td>
<td>0.058845</td>
<td>0.018750</td>
<td>00:19</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Our model only has a 1.9% error rate! Not bad! Though it seems if I had done an extra epoch, the error rate may have gone down to 1.3%, judging by the previous epochs’ error rates.</p>
</section>
<section id="visualizing-mistakes" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-mistakes">Visualizing mistakes</h2>
<p>We can visualize the mistakes the model is making by a confusion matrix.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn)</span>
<span id="cb20-2">interp.plot_confusion_matrix()</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/2_bear_classifier_model_files/figure-html/cell-17-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>3 grizzly bears were misclassified as black bears.</p>
<p>Let us see where the errors are occurring, so we can determine if they are due to a dataset problem or a model problem.</p>
<p>To do this, we will sort images by their loss.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://forbo7.github.io/forblog/posts/2_bear_classifier_model_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="data-cleaning" class="level2">
<h2 class="anchored" data-anchor-id="data-cleaning">Data cleaning</h2>
<p>The intuitive approach to data cleaning is to do it before training the model. However, a trained model can help us clean the data. For example, we can see some mislabaled bears in the above cases.</p>
<p>fastai includes a GUI for data cleaning. This GUI allows you to choose a category/label and its associated training and validation sets. It then shows you images in order of highest-loss first, from which you can select images for removal or relabeling.</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">cleaner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageClassifierCleaner(learn)</span>
<span id="cb22-2">cleaner</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7d3bc1c4ea394fceadf6ccbf4febb422","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p><code>ImageClassifierCleaner</code> does not actually delete or relabel. It just returns the indices that are to be deleted or relabeled.</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete images selected for deletion.</span></span>
<span id="cb23-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cleaner.delete():</span>
<span id="cb23-3">    cleaner.fns[index].unlink()</span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Relabel images selected for relabeling.</span></span>
<span id="cb23-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, category <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cleaner.change():</span>
<span id="cb23-7">    shutil.move(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(cleaner.fns[index]), path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>category)</span></code></pre></div>
</div>
<p>We can now retrain and better performance should be expected.</p>
</section>
<section id="saving-the-model" class="level2">
<h2 class="anchored" data-anchor-id="saving-the-model">Saving the model</h2>
<p>A model consists of two parts: the architecture and the parameters.</p>
<p>When we use the <code>export()</code> method, both of these are saved.</p>
<p>This method also saves the definition of our <code>DataLoaders</code>. This is done so that we do not have to redefine how to transform our data when the model is used in production.</p>
<p>fastai uses our validation set <code>DataLoader</code> by default, so the data augmentation will not be applied, which is generally what is wanted.</p>
<p>The <code>export()</code> method creates a file named “export.pkl”.</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">learn.export()</span></code></pre></div>
</div>
<p>Let us check that the file exists.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path()</span>
<span id="cb25-2">path.ls(file_exts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.pkl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>(#1) [Path('export.pkl')]</code></pre>
</div>
</div>
<p>If you wish to deploy an app, this is the file you will need.</p>
</section>
<section id="loading-the-model-for-inference" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-model-for-inference">Loading the model for inference</h2>
<p>Now obviously we do not need to load the model as we already have the <code>learner</code> variable. But I shall do so anyways.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">learn_inf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_learner(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'export.pkl'</span>)</span></code></pre></div>
</div>
<p>We generally do inference for a single image at a time.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">learn_inf.predict(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images/grizzly.jpg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>('grizzly', TensorBase(1), TensorBase([1.4230e-06, 1.0000e+00, 3.9502e-08]))</code></pre>
</div>
</div>
<p>Three things have been returned: the predicted category, the index of the predicted category, and the probabilities of each category.</p>
<p>The order of each category is based on the order of the <em>vocabulary</em> of the <code>DataLoaders</code>; that is, the stored tuple of all possible categories.</p>
<p>The <code>DataLoaders</code> can be accessed as an attribute of the <code>Learner</code>.</p>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">learn_inf.dataloaders.vocab</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>['black', 'grizzly', 'teddy']</code></pre>
</div>
</div>
</section>
<section id="why-cnns-work-so-well" class="level2">
<h2 class="anchored" data-anchor-id="why-cnns-work-so-well">Why CNNs work so well</h2>
<p>The ResNet18 architecture is a sort of CNN. Below is my understanding as to why CNNs work so well.</p>
<p>A neural network is comprised of many layers. Each layer is comprised of many neurons. In a CNN, each neuron in the same layer is given the exact same weights, while being given different input data. This allows all neurons in a layer to fire upon detecting the same pattern.</p>
<p>Because of this, CNNs can become really good at detecting objects in various patterns, orientations, shapes, positions, and so on.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Well then, that wraps up my first deep learning model! I have to say, it is much easier than I thought it would be to implement a model. You do not need to go into the nitty gritty details of artificial intelligence. A high level understanding can suffice in the beginning. It is like playing a sport: you do not need to understand the physics to be able to play it.</p>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Creating Models</category>
  <guid>https://forbo7.github.io/forblog/posts/2_bear_classifier_model.html</guid>
  <pubDate>Sat, 28 May 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Approach Creating AI Models</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <link>https://forbo7.github.io/forblog/posts/1_how_to_approach_creating_ai_models.html</link>
  <description><![CDATA[ 



<p><em>This article was rewritten on <strong>Monday, 31 October 2022</strong>.</em></p>
<p><img src="https://forbo7.github.io/forblog/images/1_how_to_approach_creating_ai_models/thumbnail.jpg" class="img-fluid" alt="A picture showing cogs and gears."></p>
<section id="introduction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<div class="page-columns page-full"><p>How you approach making models is crucial. The way AI methods are used in today’s landscape is very different. AI methods are created to solve small, atomic problems. And we’ve got most of the methods to handle these small tasks hammered down. Therefore, applied AI is not about creating models; it’s only a small part of it. It’s 80% problem solving and 20% implementing (I would not be surprised if it actually followed the 80-20 rule<sup>1</sup>).</p><div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;<a href="https://en.wikipedia.org/wiki/Pareto_principle">The 80/20 Rule, also known as the Pareto Principle</a></p></li></div></div>
<p>Think of AI methods as a tool; think of it as a pencil. You can use pencils to draw, take notes, poke holes, and much more. There are also dozens of pencils out there. But what point is there in using any of those pencils if you don’t even know how to properly use a pencil in the first place? The art of creating pencils has already been perfected too.</p>
<p>One highly successful approach is the <em>Drivetrain Approach</em>, created by Jeremy Howard — who’s widely known for his fastai course and library —, Margit Zwemer, and Mike Loukides.</p>
<p>The goal of the <em>Drivetrain Approach</em> is to not just use data to generate more data — data that is in the form of predictions. But rather to use data to also generate actionable outcomes.</p>
<p>The official blogpost goes into much more depth <a href="https://www.oreilly.com/radar/drivetrain-approach-data-products/">here</a>.</p>
<p>In this post, I’ll be providing a short overview of my understanding of this approach by applying it to the <a href="https://www.elementsofai.com">Elements of AI</a> course’s final project (this online course was created by the University of Helsinki and Reaktor).</p>
</section>
<section id="overview-of-the-drivetrain-approach" class="level2">
<h2 class="anchored" data-anchor-id="overview-of-the-drivetrain-approach">Overview of the Drivetrain Approach</h2>
<p>There are four main steps to this approach:</p>
<ul>
<li>Define the objective</li>
<li>Consider your possible actions</li>
<li>Consider your data</li>
<li>Create the models</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://forbo7.github.io/forblog/images/1_how_to_approach_creating_ai_models/drivetrain_approach.png" class="img-fluid figure-img" alt="A diagram depicting the DrivetrainApproach as a flow chart."></p>
<figcaption class="figure-caption"><a href="https://www.oreilly.%20com/radar/drivetrain-approach-data-products/">Image Source</a></figcaption>
</figure>
</div>
<section id="define-the-objective" class="level3">
<h3 class="anchored" data-anchor-id="define-the-objective">Define the objective</h3>
<p>Write out what you are really trying to achieve. What is your goal? Writing it out puts it in a tangible manner.</p>
</section>
<section id="consider-your-actions" class="level3">
<h3 class="anchored" data-anchor-id="consider-your-actions">Consider your actions</h3>
<p>Think about what actions you can take to achieve your objective.</p>
<p>Also think about what would happen if you did those actions.</p>
<p>What would happen if I did <em>x</em>? Would <em>y</em> really be a good idea? What if <em>z</em> worked out <strong>too</strong> well? Will <em>x</em> lead to <em>y</em>? What would happen if <em>x</em> turned out poorly?</p>
</section>
<section id="consider-your-data" class="level3">
<h3 class="anchored" data-anchor-id="consider-your-data">Consider your data</h3>
<p>Think about the data you already have and how it could be used.</p>
<p>Think about any further data that is needed and how it could be collected.</p>
</section>
<section id="create-the-models" class="level3">
<h3 class="anchored" data-anchor-id="create-the-models">Create the models</h3>
<p>Create models. But create models that produce actions. Actions that produce the best results for your objective.</p>
</section>
</section>
<section id="endangered-language-chatbot" class="level2">
<h2 class="anchored" data-anchor-id="endangered-language-chatbot">Endangered Language Chatbot</h2>
<p>The final project of the Elements of AI course asked me to come up with my own AI method that would solve a problem, and how it would do so.</p>
<p>The problem I tackled was the endangerment of languages. The solution I came up with was to create a chatbot that could converse in these endangered languages. I created an overview of how this could be done.</p>
<p>The overview can be read <a href="https://github.com/ForBo7/Endangered-Language-Chatbot">here</a>.</p>
<p>Let’s tackle this problem through the <em>Drivetrain Approach</em>.</p>
<section id="define-the-objective-1" class="level3">
<h3 class="anchored" data-anchor-id="define-the-objective-1">Define the objective</h3>
<p>The objective is to preserve languages that are in danger of going extinct. Through preserving languages, histories and cultures can be preserved.</p>
</section>
<section id="consider-your-actions-1" class="level3">
<h3 class="anchored" data-anchor-id="consider-your-actions-1">Consider your actions</h3>
<p>One way this could be done is to create a chatbot that could converse in endangered languages. However, this would be a monumental task considering the amount of data needed to achieve this.</p>
<p>Another action that could be taken is to create an information retrieval (IR) system of sorts. A corpus of written text of the language could be provided, from which insights about the language’s history, culture, and way of conversing could be gained. In turn the language is preserved.</p>
<p>The latter action may be easier to achieve.</p>
</section>
<section id="consider-your-data-1" class="level3">
<h3 class="anchored" data-anchor-id="consider-your-data-1">Consider your data</h3>
<p>The obvious source of data would be a corpora of text.</p>
<p>However, a major problem arises for those languages which are only spoken. Audio recordings of conversations would have to be made which would take a lot of time and effort. This would be especially difficult for those languages where very few speakers remain.</p>
<p>Even if a language does have written text, gathering enough text for the language can also be a problem: the language may not have much written text. This may especially be the case for endangered languages. Again, one solution is to manually create texts — using an NLP method to create these texts is not viable.</p>
<p>In short, for some languages, there may be no choice other than to manually create the data that would be fed into the system — this manual creation also has the chance to skew the performance of the model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://forbo7.github.io/forblog/images/1_how_to_approach_creating_ai_models/whistle_language.jpg" class="img-fluid figure-img" alt="An elderly man blowing a whistle."></p>
<figcaption class="figure-caption">Kuş dili, a whistled language spoken in Turkey. How would such a language be preserved? <a href="https://ich.unesco.org/en/USL/whistled-language-00658">Image Source</a></figcaption>
</figure>
</div>
</section>
<section id="create-the-model" class="level3">
<h3 class="anchored" data-anchor-id="create-the-model">Create the model</h3>
<p>Either a chatbot needs to be created that speaks as accurately as a native speaker, or an IR system needs to be created that gives meaningful, correct insights into a language and its associated culture.</p>
<p>This step may either be easy or hard, depending on the language. Most NLP or IR systems have been built on a few, select languages. Perhaps this step may be easy for those languages that are similar to languages on which NLP or IR systems have already been built on. It will most likely be harder for those languages which are not.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This concludes my understanding of the <em>Drivetrain Approach</em>, through an example.</p>
<p>Approaches are crucial: you can have state-of-the-art tools, but they are useless if not correctly applied. The approach you take can either make it or break it. Putting it into a concrete, organized, tangible manner goes a long way.</p>
<p>If you have any comments, questions, suggestions, feedback, criticisms, or corrections, please do post them down in the comment section below!</p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Approaching AI</category>
  <guid>https://forbo7.github.io/forblog/posts/1_how_to_approach_creating_ai_models.html</guid>
  <pubDate>Fri, 27 May 2022 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
